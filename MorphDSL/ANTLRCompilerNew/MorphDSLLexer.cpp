/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Grammar/MorphDSL.g
 *     -                            On : 2015-03-16 12:01:57
 *     -                 for the lexer : MorphDSLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "stdafx.h"
#include    "MorphDSLLexer.hpp"
/* ----------------------------------------- */



	namespace 	LPM_MorphDSL  {


/** String literals used by MorphDSLLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x41, 0x4E, 0x44,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x41, 0x52, 0x45, 0x41,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x62, 0x6F, 0x75, 0x6E, 0x64, 0x61, 0x72, 0x79,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x42, 0x4F, 0x58,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x63, 0x6C, 0x6F, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x63, 0x72, 0x6F, 0x70,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x44, 0x41, 0x50,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x69, 0x61, 0x6C, 0x50, 0x72, 0x6F, 0x66, 0x69, 0x6C, 0x65, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x64, 0x69, 0x6C, 0x61, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x64, 0x69, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x44, 0x4D, 0x50,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x65, 0x72, 0x6F, 0x64, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x45, 0x58, 0x54, 0x45, 0x52, 0x4E, 0x41, 0x4C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x46, 0x52, 0x4F, 0x4D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x68, 0x69, 0x74, 0x6D, 0x69, 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x49, 0x4E, 0x54, 0x45, 0x52, 0x4E, 0x41, 0x4C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x69, 0x6E, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x6C, 0x6F, 0x61, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x6D, 0x61, 0x70, 0x70, 0x69, 0x6E, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x4D, 0x4F, 0x52, 0x50, 0x48, 0x4F, 0x4C, 0x4F, 0x47, 0x49, 0x43, 0x41, 0x4C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x4D, 0x53, 0x4C, 0x53,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x6D, 0x75, 0x6C, 0x74, 0x69, 0x70, 0x6C, 0x79,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x6E, 0x65, 0x67, 0x61, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x69, 0x7A, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x6F, 0x70, 0x65, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x52, 0x45, 0x43, 0x4F, 0x4E, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4F, 0x4E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x73, 0x65, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x53, 0x45, 0x4C, 0x45, 0x43, 0x54,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x74, 0x72, 0x65, 0x73, 0x68, 0x6F, 0x6C, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x75, 0x6E, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x57, 0x41, 0x54, 0x48, 0x45, 0x52, 0x53, 0x48, 0x41, 0x44, 0x45,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x57, 0x48, 0x45, 0x52, 0x45,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x77, 0x69, 0x74, 0x68, 0x6F, 0x75, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x61, 0x72, 0x65, 0x61,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x61, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_43[]  = { 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_44[]  = { 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_45[]  = { 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x67, 0x72, 0x65, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_46[]  = { 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_47[]  = { 0x6D, 0x61, 0x73, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_48[]  = { 0x6F, 0x6B, 0x72, 0x6F, 0x67, 0x6C, 0x6F, 0x73, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_49[]  = { 0x72, 0x65, 0x73, 0x70, 0x6F, 0x6E, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_50[]  = { 0x73, 0x65, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_51[]  = { 0x76, 0x6F, 0x6C, 0x75, 0x6D, 0x65, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace 	LPM_MorphDSL  {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



MorphDSLLexer::~MorphDSLLexer()
{
}

void
MorphDSLLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Grammar/MorphDSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSLLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called MorphDSLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pMorphDSLLexer initialized for the lex start
 *     - Fail NULL
 */
MorphDSLLexer::MorphDSLLexer(StreamType* instream)
:MorphDSLLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called MorphDSLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pMorphDSLLexer initialized for the lex start
 *     - Fail NULL
 */
MorphDSLLexer::MorphDSLLexer(StreamType* instream, RecognizerSharedStateType* state)
:MorphDSLLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void MorphDSLLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in MorphDSLLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 32:7: ( 'AND' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_AND
 *
 * Looks to match the characters the constitute the token T_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_AND()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_AND;


    // Grammar/MorphDSL.g:32:7: ( 'AND' )
    // Grammar/MorphDSL.g:32:9: 'AND'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT_ANDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_ANDEx; /* Prevent compiler warnings */
    ruleT_ANDEx: ;

}
// $ANTLR end T_AND

//   Comes from: 33:8: ( 'AREA' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_AREA
 *
 * Looks to match the characters the constitute the token T_AREA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_AREA()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_AREA;


    // Grammar/MorphDSL.g:33:8: ( 'AREA' )
    // Grammar/MorphDSL.g:33:10: 'AREA'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT_AREAEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_AREAEx; /* Prevent compiler warnings */
    ruleT_AREAEx: ;

}
// $ANTLR end T_AREA

//   Comes from: 34:13: ( 'ATTRIBUTE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_ATTRIBUTE
 *
 * Looks to match the characters the constitute the token T_ATTRIBUTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_ATTRIBUTE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_ATTRIBUTE;


    // Grammar/MorphDSL.g:34:13: ( 'ATTRIBUTE' )
    // Grammar/MorphDSL.g:34:15: 'ATTRIBUTE'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT_ATTRIBUTEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_ATTRIBUTEEx; /* Prevent compiler warnings */
    ruleT_ATTRIBUTEEx: ;

}
// $ANTLR end T_ATTRIBUTE

//   Comes from: 35:12: ( 'boundary' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_BOUNDARY
 *
 * Looks to match the characters the constitute the token T_BOUNDARY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_BOUNDARY()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_BOUNDARY;


    // Grammar/MorphDSL.g:35:12: ( 'boundary' )
    // Grammar/MorphDSL.g:35:14: 'boundary'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT_BOUNDARYEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_BOUNDARYEx; /* Prevent compiler warnings */
    ruleT_BOUNDARYEx: ;

}
// $ANTLR end T_BOUNDARY

//   Comes from: 36:7: ( 'BOX' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_BOX
 *
 * Looks to match the characters the constitute the token T_BOX
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_BOX()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_BOX;


    // Grammar/MorphDSL.g:36:7: ( 'BOX' )
    // Grammar/MorphDSL.g:36:9: 'BOX'
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT_BOXEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_BOXEx; /* Prevent compiler warnings */
    ruleT_BOXEx: ;

}
// $ANTLR end T_BOX

//   Comes from: 37:9: ( 'close' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_CLOSE
 *
 * Looks to match the characters the constitute the token T_CLOSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_CLOSE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_CLOSE;


    // Grammar/MorphDSL.g:37:9: ( 'close' )
    // Grammar/MorphDSL.g:37:11: 'close'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT_CLOSEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_CLOSEEx; /* Prevent compiler warnings */
    ruleT_CLOSEEx: ;

}
// $ANTLR end T_CLOSE

//   Comes from: 38:9: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_COMMA
 *
 * Looks to match the characters the constitute the token T_COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_COMMA()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_COMMA;


    // Grammar/MorphDSL.g:38:9: ( ',' )
    // Grammar/MorphDSL.g:38:11: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleT_COMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_COMMAEx; /* Prevent compiler warnings */
    ruleT_COMMAEx: ;

}
// $ANTLR end T_COMMA

//   Comes from: 39:14: ( 'complement' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_COMPLEMENT
 *
 * Looks to match the characters the constitute the token T_COMPLEMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_COMPLEMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_COMPLEMENT;


    // Grammar/MorphDSL.g:39:14: ( 'complement' )
    // Grammar/MorphDSL.g:39:16: 'complement'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT_COMPLEMENTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_COMPLEMENTEx; /* Prevent compiler warnings */
    ruleT_COMPLEMENTEx: ;

}
// $ANTLR end T_COMPLEMENT

//   Comes from: 40:8: ( 'crop' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_CROP
 *
 * Looks to match the characters the constitute the token T_CROP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_CROP()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_CROP;


    // Grammar/MorphDSL.g:40:8: ( 'crop' )
    // Grammar/MorphDSL.g:40:10: 'crop'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT_CROPEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_CROPEx; /* Prevent compiler warnings */
    ruleT_CROPEx: ;

}
// $ANTLR end T_CROP

//   Comes from: 41:7: ( 'DAP' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DAP
 *
 * Looks to match the characters the constitute the token T_DAP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_DAP()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_DAP;


    // Grammar/MorphDSL.g:41:7: ( 'DAP' )
    // Grammar/MorphDSL.g:41:9: 'DAP'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT_DAPEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_DAPEx; /* Prevent compiler warnings */
    ruleT_DAPEx: ;

}
// $ANTLR end T_DAP

//   Comes from: 42:23: ( 'diferentialProfiles' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DIFERENTIALPROFILES
 *
 * Looks to match the characters the constitute the token T_DIFERENTIALPROFILES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_DIFERENTIALPROFILES()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_DIFERENTIALPROFILES;


    // Grammar/MorphDSL.g:42:23: ( 'diferentialProfiles' )
    // Grammar/MorphDSL.g:42:25: 'diferentialProfiles'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT_DIFERENTIALPROFILESEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_DIFERENTIALPROFILESEx; /* Prevent compiler warnings */
    ruleT_DIFERENTIALPROFILESEx: ;

}
// $ANTLR end T_DIFERENTIALPROFILES

//   Comes from: 43:10: ( 'dilate' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DILATE
 *
 * Looks to match the characters the constitute the token T_DILATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_DILATE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_DILATE;


    // Grammar/MorphDSL.g:43:10: ( 'dilate' )
    // Grammar/MorphDSL.g:43:12: 'dilate'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleT_DILATEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_DILATEEx; /* Prevent compiler warnings */
    ruleT_DILATEEx: ;

}
// $ANTLR end T_DILATE

//   Comes from: 44:21: ( 'distanceTransform' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DISTANCETRANSFORM
 *
 * Looks to match the characters the constitute the token T_DISTANCETRANSFORM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_DISTANCETRANSFORM()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_DISTANCETRANSFORM;


    // Grammar/MorphDSL.g:44:21: ( 'distanceTransform' )
    // Grammar/MorphDSL.g:44:23: 'distanceTransform'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleT_DISTANCETRANSFORMEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_DISTANCETRANSFORMEx; /* Prevent compiler warnings */
    ruleT_DISTANCETRANSFORMEx: ;

}
// $ANTLR end T_DISTANCETRANSFORM

//   Comes from: 45:7: ( 'DMP' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DMP
 *
 * Looks to match the characters the constitute the token T_DMP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_DMP()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_DMP;


    // Grammar/MorphDSL.g:45:7: ( 'DMP' )
    // Grammar/MorphDSL.g:45:9: 'DMP'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleT_DMPEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_DMPEx; /* Prevent compiler warnings */
    ruleT_DMPEx: ;

}
// $ANTLR end T_DMP

//   Comes from: 46:16: ( '\\\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DOUBLE_QUOTE
 *
 * Looks to match the characters the constitute the token T_DOUBLE_QUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_DOUBLE_QUOTE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_DOUBLE_QUOTE;


    // Grammar/MorphDSL.g:46:16: ( '\\\"' )
    // Grammar/MorphDSL.g:46:18: '\\\"'
    {
         this->matchc('\"');
        if  (this->hasException())
        {
            goto ruleT_DOUBLE_QUOTEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_DOUBLE_QUOTEEx; /* Prevent compiler warnings */
    ruleT_DOUBLE_QUOTEEx: ;

}
// $ANTLR end T_DOUBLE_QUOTE

//   Comes from: 47:10: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_EQUALS
 *
 * Looks to match the characters the constitute the token T_EQUALS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_EQUALS()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_EQUALS;


    // Grammar/MorphDSL.g:47:10: ( '=' )
    // Grammar/MorphDSL.g:47:12: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleT_EQUALSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_EQUALSEx; /* Prevent compiler warnings */
    ruleT_EQUALSEx: ;

}
// $ANTLR end T_EQUALS

//   Comes from: 48:9: ( 'erode' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_ERODE
 *
 * Looks to match the characters the constitute the token T_ERODE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_ERODE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_ERODE;


    // Grammar/MorphDSL.g:48:9: ( 'erode' )
    // Grammar/MorphDSL.g:48:11: 'erode'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleT_ERODEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_ERODEEx; /* Prevent compiler warnings */
    ruleT_ERODEEx: ;

}
// $ANTLR end T_ERODE

//   Comes from: 49:12: ( 'EXTERNAL' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_EXTERNAL
 *
 * Looks to match the characters the constitute the token T_EXTERNAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_EXTERNAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_EXTERNAL;


    // Grammar/MorphDSL.g:49:12: ( 'EXTERNAL' )
    // Grammar/MorphDSL.g:49:14: 'EXTERNAL'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleT_EXTERNALEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_EXTERNALEx; /* Prevent compiler warnings */
    ruleT_EXTERNALEx: ;

}
// $ANTLR end T_EXTERNAL

//   Comes from: 50:8: ( 'FROM' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_FROM
 *
 * Looks to match the characters the constitute the token T_FROM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_FROM()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_FROM;


    // Grammar/MorphDSL.g:50:8: ( 'FROM' )
    // Grammar/MorphDSL.g:50:10: 'FROM'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleT_FROMEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_FROMEx; /* Prevent compiler warnings */
    ruleT_FROMEx: ;

}
// $ANTLR end T_FROM

//   Comes from: 51:12: ( 'gradient' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_GRADIENT
 *
 * Looks to match the characters the constitute the token T_GRADIENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_GRADIENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_GRADIENT;


    // Grammar/MorphDSL.g:51:12: ( 'gradient' )
    // Grammar/MorphDSL.g:51:14: 'gradient'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleT_GRADIENTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_GRADIENTEx; /* Prevent compiler warnings */
    ruleT_GRADIENTEx: ;

}
// $ANTLR end T_GRADIENT

//   Comes from: 52:11: ( 'hitmiss' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_HITMISS
 *
 * Looks to match the characters the constitute the token T_HITMISS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_HITMISS()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_HITMISS;


    // Grammar/MorphDSL.g:52:11: ( 'hitmiss' )
    // Grammar/MorphDSL.g:52:13: 'hitmiss'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleT_HITMISSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_HITMISSEx; /* Prevent compiler warnings */
    ruleT_HITMISSEx: ;

}
// $ANTLR end T_HITMISS

//   Comes from: 53:12: ( 'INTERNAL' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_INTERNAL
 *
 * Looks to match the characters the constitute the token T_INTERNAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_INTERNAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_INTERNAL;


    // Grammar/MorphDSL.g:53:12: ( 'INTERNAL' )
    // Grammar/MorphDSL.g:53:14: 'INTERNAL'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleT_INTERNALEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_INTERNALEx; /* Prevent compiler warnings */
    ruleT_INTERNALEx: ;

}
// $ANTLR end T_INTERNAL

//   Comes from: 54:16: ( 'intersection' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_INTERSECTION
 *
 * Looks to match the characters the constitute the token T_INTERSECTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_INTERSECTION()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_INTERSECTION;


    // Grammar/MorphDSL.g:54:16: ( 'intersection' )
    // Grammar/MorphDSL.g:54:18: 'intersection'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleT_INTERSECTIONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_INTERSECTIONEx; /* Prevent compiler warnings */
    ruleT_INTERSECTIONEx: ;

}
// $ANTLR end T_INTERSECTION

//   Comes from: 55:13: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_LESS_THAN
 *
 * Looks to match the characters the constitute the token T_LESS_THAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_LESS_THAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_LESS_THAN;


    // Grammar/MorphDSL.g:55:13: ( '<' )
    // Grammar/MorphDSL.g:55:15: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleT_LESS_THANEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_LESS_THANEx; /* Prevent compiler warnings */
    ruleT_LESS_THANEx: ;

}
// $ANTLR end T_LESS_THAN

//   Comes from: 56:8: ( 'load' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_LOAD
 *
 * Looks to match the characters the constitute the token T_LOAD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_LOAD()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_LOAD;


    // Grammar/MorphDSL.g:56:8: ( 'load' )
    // Grammar/MorphDSL.g:56:10: 'load'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleT_LOADEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_LOADEx; /* Prevent compiler warnings */
    ruleT_LOADEx: ;

}
// $ANTLR end T_LOAD

//   Comes from: 57:10: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_LPAREN
 *
 * Looks to match the characters the constitute the token T_LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_LPAREN()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_LPAREN;


    // Grammar/MorphDSL.g:57:10: ( '(' )
    // Grammar/MorphDSL.g:57:12: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT_LPARENEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_LPARENEx; /* Prevent compiler warnings */
    ruleT_LPARENEx: ;

}
// $ANTLR end T_LPAREN

//   Comes from: 58:11: ( 'mapping' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_MAPPING
 *
 * Looks to match the characters the constitute the token T_MAPPING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_MAPPING()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_MAPPING;


    // Grammar/MorphDSL.g:58:11: ( 'mapping' )
    // Grammar/MorphDSL.g:58:13: 'mapping'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleT_MAPPINGEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_MAPPINGEx; /* Prevent compiler warnings */
    ruleT_MAPPINGEx: ;

}
// $ANTLR end T_MAPPING

//   Comes from: 59:13: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_MORE_THAN
 *
 * Looks to match the characters the constitute the token T_MORE_THAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_MORE_THAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_MORE_THAN;


    // Grammar/MorphDSL.g:59:13: ( '>' )
    // Grammar/MorphDSL.g:59:15: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleT_MORE_THANEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_MORE_THANEx; /* Prevent compiler warnings */
    ruleT_MORE_THANEx: ;

}
// $ANTLR end T_MORE_THAN

//   Comes from: 60:17: ( 'MORPHOLOGICAL' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_MORPHOLOGICAL
 *
 * Looks to match the characters the constitute the token T_MORPHOLOGICAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_MORPHOLOGICAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_MORPHOLOGICAL;


    // Grammar/MorphDSL.g:60:17: ( 'MORPHOLOGICAL' )
    // Grammar/MorphDSL.g:60:19: 'MORPHOLOGICAL'
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleT_MORPHOLOGICALEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_MORPHOLOGICALEx; /* Prevent compiler warnings */
    ruleT_MORPHOLOGICALEx: ;

}
// $ANTLR end T_MORPHOLOGICAL

//   Comes from: 61:8: ( 'MSLS' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_MSLS
 *
 * Looks to match the characters the constitute the token T_MSLS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_MSLS()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_MSLS;


    // Grammar/MorphDSL.g:61:8: ( 'MSLS' )
    // Grammar/MorphDSL.g:61:10: 'MSLS'
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleT_MSLSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_MSLSEx; /* Prevent compiler warnings */
    ruleT_MSLSEx: ;

}
// $ANTLR end T_MSLS

//   Comes from: 62:12: ( 'multiply' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_MULTIPLY
 *
 * Looks to match the characters the constitute the token T_MULTIPLY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_MULTIPLY()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_MULTIPLY;


    // Grammar/MorphDSL.g:62:12: ( 'multiply' )
    // Grammar/MorphDSL.g:62:14: 'multiply'
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleT_MULTIPLYEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_MULTIPLYEx; /* Prevent compiler warnings */
    ruleT_MULTIPLYEx: ;

}
// $ANTLR end T_MULTIPLY

//   Comes from: 63:10: ( 'negate' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NEGATE
 *
 * Looks to match the characters the constitute the token T_NEGATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_NEGATE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_NEGATE;


    // Grammar/MorphDSL.g:63:10: ( 'negate' )
    // Grammar/MorphDSL.g:63:12: 'negate'
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleT_NEGATEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_NEGATEEx; /* Prevent compiler warnings */
    ruleT_NEGATEEx: ;

}
// $ANTLR end T_NEGATE

//   Comes from: 64:13: ( 'normalize' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NORMALIZE
 *
 * Looks to match the characters the constitute the token T_NORMALIZE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_NORMALIZE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_NORMALIZE;


    // Grammar/MorphDSL.g:64:13: ( 'normalize' )
    // Grammar/MorphDSL.g:64:15: 'normalize'
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleT_NORMALIZEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_NORMALIZEEx; /* Prevent compiler warnings */
    ruleT_NORMALIZEEx: ;

}
// $ANTLR end T_NORMALIZE

//   Comes from: 65:13: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_NOT_EQUAL
 *
 * Looks to match the characters the constitute the token T_NOT_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_NOT_EQUAL()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_NOT_EQUAL;


    // Grammar/MorphDSL.g:65:13: ( '!=' )
    // Grammar/MorphDSL.g:65:15: '!='
    {
        this->matchs(lit_28);
        if  (this->hasException())
        {
            goto ruleT_NOT_EQUALEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_NOT_EQUALEx; /* Prevent compiler warnings */
    ruleT_NOT_EQUALEx: ;

}
// $ANTLR end T_NOT_EQUAL

//   Comes from: 66:8: ( 'open' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_OPEN
 *
 * Looks to match the characters the constitute the token T_OPEN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_OPEN()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_OPEN;


    // Grammar/MorphDSL.g:66:8: ( 'open' )
    // Grammar/MorphDSL.g:66:10: 'open'
    {
        this->matchs(lit_29);
        if  (this->hasException())
        {
            goto ruleT_OPENEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_OPENEx; /* Prevent compiler warnings */
    ruleT_OPENEx: ;

}
// $ANTLR end T_OPEN

//   Comes from: 67:18: ( 'RECONSTRUCTION' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_RECONSTRUCTION
 *
 * Looks to match the characters the constitute the token T_RECONSTRUCTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_RECONSTRUCTION()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_RECONSTRUCTION;


    // Grammar/MorphDSL.g:67:18: ( 'RECONSTRUCTION' )
    // Grammar/MorphDSL.g:67:20: 'RECONSTRUCTION'
    {
        this->matchs(lit_30);
        if  (this->hasException())
        {
            goto ruleT_RECONSTRUCTIONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_RECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleT_RECONSTRUCTIONEx: ;

}
// $ANTLR end T_RECONSTRUCTION

//   Comes from: 68:10: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_RPAREN
 *
 * Looks to match the characters the constitute the token T_RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_RPAREN()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_RPAREN;


    // Grammar/MorphDSL.g:68:10: ( ')' )
    // Grammar/MorphDSL.g:68:12: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT_RPARENEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_RPARENEx; /* Prevent compiler warnings */
    ruleT_RPARENEx: ;

}
// $ANTLR end T_RPAREN

//   Comes from: 69:16: ( 'segmentation' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_SEGMENTATION
 *
 * Looks to match the characters the constitute the token T_SEGMENTATION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_SEGMENTATION()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_SEGMENTATION;


    // Grammar/MorphDSL.g:69:16: ( 'segmentation' )
    // Grammar/MorphDSL.g:69:18: 'segmentation'
    {
        this->matchs(lit_31);
        if  (this->hasException())
        {
            goto ruleT_SEGMENTATIONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_SEGMENTATIONEx; /* Prevent compiler warnings */
    ruleT_SEGMENTATIONEx: ;

}
// $ANTLR end T_SEGMENTATION

//   Comes from: 70:10: ( 'SELECT' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_SELECT
 *
 * Looks to match the characters the constitute the token T_SELECT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_SELECT()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_SELECT;


    // Grammar/MorphDSL.g:70:10: ( 'SELECT' )
    // Grammar/MorphDSL.g:70:12: 'SELECT'
    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleT_SELECTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_SELECTEx; /* Prevent compiler warnings */
    ruleT_SELECTEx: ;

}
// $ANTLR end T_SELECT

//   Comes from: 71:8: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_STAR
 *
 * Looks to match the characters the constitute the token T_STAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_STAR()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_STAR;


    // Grammar/MorphDSL.g:71:8: ( '*' )
    // Grammar/MorphDSL.g:71:10: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT_STAREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_STAREx; /* Prevent compiler warnings */
    ruleT_STAREx: ;

}
// $ANTLR end T_STAR

//   Comes from: 72:12: ( 'subtract' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_SUBTRACT
 *
 * Looks to match the characters the constitute the token T_SUBTRACT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_SUBTRACT()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_SUBTRACT;


    // Grammar/MorphDSL.g:72:12: ( 'subtract' )
    // Grammar/MorphDSL.g:72:14: 'subtract'
    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto ruleT_SUBTRACTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_SUBTRACTEx; /* Prevent compiler warnings */
    ruleT_SUBTRACTEx: ;

}
// $ANTLR end T_SUBTRACT

//   Comes from: 73:12: ( 'treshold' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_TRESHOLD
 *
 * Looks to match the characters the constitute the token T_TRESHOLD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_TRESHOLD()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_TRESHOLD;


    // Grammar/MorphDSL.g:73:12: ( 'treshold' )
    // Grammar/MorphDSL.g:73:14: 'treshold'
    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleT_TRESHOLDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_TRESHOLDEx; /* Prevent compiler warnings */
    ruleT_TRESHOLDEx: ;

}
// $ANTLR end T_TRESHOLD

//   Comes from: 74:9: ( 'union' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_UNION
 *
 * Looks to match the characters the constitute the token T_UNION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_UNION()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_UNION;


    // Grammar/MorphDSL.g:74:9: ( 'union' )
    // Grammar/MorphDSL.g:74:11: 'union'
    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleT_UNIONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_UNIONEx; /* Prevent compiler warnings */
    ruleT_UNIONEx: ;

}
// $ANTLR end T_UNION

//   Comes from: 75:15: ( 'WATHERSHADE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_WATHERSHADE
 *
 * Looks to match the characters the constitute the token T_WATHERSHADE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_WATHERSHADE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_WATHERSHADE;


    // Grammar/MorphDSL.g:75:15: ( 'WATHERSHADE' )
    // Grammar/MorphDSL.g:75:17: 'WATHERSHADE'
    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleT_WATHERSHADEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_WATHERSHADEEx; /* Prevent compiler warnings */
    ruleT_WATHERSHADEEx: ;

}
// $ANTLR end T_WATHERSHADE

//   Comes from: 76:9: ( 'WHERE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_WHERE
 *
 * Looks to match the characters the constitute the token T_WHERE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_WHERE()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_WHERE;


    // Grammar/MorphDSL.g:76:9: ( 'WHERE' )
    // Grammar/MorphDSL.g:76:11: 'WHERE'
    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleT_WHEREEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_WHEREEx; /* Prevent compiler warnings */
    ruleT_WHEREEx: ;

}
// $ANTLR end T_WHERE

//   Comes from: 77:11: ( 'without' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_WITHOUT
 *
 * Looks to match the characters the constitute the token T_WITHOUT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT_WITHOUT()
{
    ANTLR_UINT32	_type;
      


    _type	    = T_WITHOUT;


    // Grammar/MorphDSL.g:77:11: ( 'without' )
    // Grammar/MorphDSL.g:77:13: 'without'
    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleT_WITHOUTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT_WITHOUTEx; /* Prevent compiler warnings */
    ruleT_WITHOUTEx: ;

}
// $ANTLR end T_WITHOUT

//   Comes from: 78:7: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__55
 *
 * Looks to match the characters the constitute the token T__55
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__55()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__55;


    // Grammar/MorphDSL.g:78:7: ( '<=' )
    // Grammar/MorphDSL.g:78:9: '<='
    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleT__55Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__55Ex; /* Prevent compiler warnings */
    ruleT__55Ex: ;

}
// $ANTLR end T__55

//   Comes from: 79:7: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__56
 *
 * Looks to match the characters the constitute the token T__56
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__56()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__56;


    // Grammar/MorphDSL.g:79:7: ( '>=' )
    // Grammar/MorphDSL.g:79:9: '>='
    {
        this->matchs(lit_40);
        if  (this->hasException())
        {
            goto ruleT__56Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__56Ex; /* Prevent compiler warnings */
    ruleT__56Ex: ;

}
// $ANTLR end T__56

//   Comes from: 80:7: ( 'area' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__57
 *
 * Looks to match the characters the constitute the token T__57
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__57()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__57;


    // Grammar/MorphDSL.g:80:7: ( 'area' )
    // Grammar/MorphDSL.g:80:9: 'area'
    {
        this->matchs(lit_41);
        if  (this->hasException())
        {
            goto ruleT__57Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__57Ex; /* Prevent compiler warnings */
    ruleT__57Ex: ;

}
// $ANTLR end T__57

//   Comes from: 81:7: ( 'atribute' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__58
 *
 * Looks to match the characters the constitute the token T__58
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__58()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__58;


    // Grammar/MorphDSL.g:81:7: ( 'atribute' )
    // Grammar/MorphDSL.g:81:9: 'atribute'
    {
        this->matchs(lit_42);
        if  (this->hasException())
        {
            goto ruleT__58Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__58Ex; /* Prevent compiler warnings */
    ruleT__58Ex: ;

}
// $ANTLR end T__58

//   Comes from: 82:7: ( 'attribute' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__59
 *
 * Looks to match the characters the constitute the token T__59
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__59()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__59;


    // Grammar/MorphDSL.g:82:7: ( 'attribute' )
    // Grammar/MorphDSL.g:82:9: 'attribute'
    {
        this->matchs(lit_43);
        if  (this->hasException())
        {
            goto ruleT__59Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__59Ex; /* Prevent compiler warnings */
    ruleT__59Ex: ;

}
// $ANTLR end T__59

//   Comes from: 83:7: ( 'external_gradient' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__60
 *
 * Looks to match the characters the constitute the token T__60
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__60()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__60;


    // Grammar/MorphDSL.g:83:7: ( 'external_gradient' )
    // Grammar/MorphDSL.g:83:9: 'external_gradient'
    {
        this->matchs(lit_44);
        if  (this->hasException())
        {
            goto ruleT__60Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__60Ex; /* Prevent compiler warnings */
    ruleT__60Ex: ;

}
// $ANTLR end T__60

//   Comes from: 84:7: ( 'external_greadient' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__61
 *
 * Looks to match the characters the constitute the token T__61
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__61()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__61;


    // Grammar/MorphDSL.g:84:7: ( 'external_greadient' )
    // Grammar/MorphDSL.g:84:9: 'external_greadient'
    {
        this->matchs(lit_45);
        if  (this->hasException())
        {
            goto ruleT__61Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__61Ex; /* Prevent compiler warnings */
    ruleT__61Ex: ;

}
// $ANTLR end T__61

//   Comes from: 85:7: ( 'internal_gradient' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__62
 *
 * Looks to match the characters the constitute the token T__62
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__62()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__62;


    // Grammar/MorphDSL.g:85:7: ( 'internal_gradient' )
    // Grammar/MorphDSL.g:85:9: 'internal_gradient'
    {
        this->matchs(lit_46);
        if  (this->hasException())
        {
            goto ruleT__62Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__62Ex; /* Prevent compiler warnings */
    ruleT__62Ex: ;

}
// $ANTLR end T__62

//   Comes from: 86:7: ( 'mask' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__63
 *
 * Looks to match the characters the constitute the token T__63
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__63()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__63;


    // Grammar/MorphDSL.g:86:7: ( 'mask' )
    // Grammar/MorphDSL.g:86:9: 'mask'
    {
        this->matchs(lit_47);
        if  (this->hasException())
        {
            goto ruleT__63Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__63Ex; /* Prevent compiler warnings */
    ruleT__63Ex: ;

}
// $ANTLR end T__63

//   Comes from: 87:7: ( 'okroglost' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__64
 *
 * Looks to match the characters the constitute the token T__64
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__64()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__64;


    // Grammar/MorphDSL.g:87:7: ( 'okroglost' )
    // Grammar/MorphDSL.g:87:9: 'okroglost'
    {
        this->matchs(lit_48);
        if  (this->hasException())
        {
            goto ruleT__64Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__64Ex; /* Prevent compiler warnings */
    ruleT__64Ex: ;

}
// $ANTLR end T__64

//   Comes from: 88:7: ( 'response' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__65
 *
 * Looks to match the characters the constitute the token T__65
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__65()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__65;


    // Grammar/MorphDSL.g:88:7: ( 'response' )
    // Grammar/MorphDSL.g:88:9: 'response'
    {
        this->matchs(lit_49);
        if  (this->hasException())
        {
            goto ruleT__65Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__65Ex; /* Prevent compiler warnings */
    ruleT__65Ex: ;

}
// $ANTLR end T__65

//   Comes from: 89:7: ( 'set' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__66
 *
 * Looks to match the characters the constitute the token T__66
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__66()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__66;


    // Grammar/MorphDSL.g:89:7: ( 'set' )
    // Grammar/MorphDSL.g:89:9: 'set'
    {
        this->matchs(lit_50);
        if  (this->hasException())
        {
            goto ruleT__66Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__66Ex; /* Prevent compiler warnings */
    ruleT__66Ex: ;

}
// $ANTLR end T__66

//   Comes from: 90:7: ( 'volument' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__67
 *
 * Looks to match the characters the constitute the token T__67
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mT__67()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__67;


    // Grammar/MorphDSL.g:90:7: ( 'volument' )
    // Grammar/MorphDSL.g:90:9: 'volument'
    {
        this->matchs(lit_51);
        if  (this->hasException())
        {
            goto ruleT__67Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__67Ex; /* Prevent compiler warnings */
    ruleT__67Ex: ;

}
// $ANTLR end T__67

//   Comes from: 398:3: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '\\\\' | '.' | ':' )+ ( '[' NUMBER ']' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // Grammar/MorphDSL.g:398:3: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '\\\\' | '.' | ':' )+ ( '[' NUMBER ']' )? )
    // Grammar/MorphDSL.g:398:5: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '\\\\' | '.' | ':' )+ ( '[' NUMBER ']' )?
    {
        // Grammar/MorphDSL.g:398:5: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '\\\\' | '.' | ':' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( this->LA(1) )
        	{
        	case '.':
        	case ':':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'G':
        	case 'H':
        	case 'I':
        	case 'J':
        	case 'K':
        	case 'L':
        	case 'M':
        	case 'N':
        	case 'O':
        	case 'P':
        	case 'Q':
        	case 'R':
        	case 'S':
        	case 'T':
        	case 'U':
        	case 'V':
        	case 'W':
        	case 'X':
        	case 'Y':
        	case 'Z':
        	case '\\':
        	case '_':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        	case 'g':
        	case 'h':
        	case 'i':
        	case 'j':
        	case 'k':
        	case 'l':
        	case 'm':
        	case 'n':
        	case 'o':
        	case 'p':
        	case 'q':
        	case 'r':
        	case 's':
        	case 't':
        	case 'u':
        	case 'v':
        	case 'w':
        	case 'x':
        	case 'y':
        	case 'z':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1)
        	{
        	    case 1:
        	        // Grammar/MorphDSL.g:
        	        {
        	            if ( this->LA(1) == '.' || this->LA(1) == ':' || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '\\' || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< MorphDSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleIDEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< MorphDSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleIDEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

        // Grammar/MorphDSL.g:398:59: ( '[' NUMBER ']' )?
        {
            int alt2=2;
            switch ( this->LA(1) )
            {
                case '[':
                	{
                		alt2=1;
                	}
                    break;
            }

            switch (alt2)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:398:61: '[' NUMBER ']'
        	    {
        	         this->matchc('[');
        	        if  (this->hasException())
        	        {
        	            goto ruleIDEx;
        	        }


        	        /* 398:61: '[' NUMBER ']' */
        	        mNUMBER();
        	        if  (this->hasException())
        	        {
        	            goto ruleIDEx;
        	        }



        	         this->matchc(']');
        	        if  (this->hasException())
        	        {
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 400:13: ( NUMBER ( '.' NUMBER )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOUBLENUMBER
 *
 * Looks to match the characters the constitute the token DOUBLENUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mDOUBLENUMBER()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOUBLENUMBER;


    // Grammar/MorphDSL.g:400:13: ( NUMBER ( '.' NUMBER )? )
    // Grammar/MorphDSL.g:400:15: NUMBER ( '.' NUMBER )?
    {
        /* 400:15: NUMBER ( '.' NUMBER )? */
        mNUMBER();
        if  (this->hasException())
        {
            goto ruleDOUBLENUMBEREx;
        }



        // Grammar/MorphDSL.g:400:22: ( '.' NUMBER )?
        {
            int alt3=2;
            switch ( this->LA(1) )
            {
                case '.':
                	{
                		alt3=1;
                	}
                    break;
            }

            switch (alt3)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:400:24: '.' NUMBER
        	    {
        	         this->matchc('.');
        	        if  (this->hasException())
        	        {
        	            goto ruleDOUBLENUMBEREx;
        	        }


        	        /* 400:24: '.' NUMBER */
        	        mNUMBER();
        	        if  (this->hasException())
        	        {
        	            goto ruleDOUBLENUMBEREx;
        	        }



        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOUBLENUMBEREx; /* Prevent compiler warnings */
    ruleDOUBLENUMBEREx: ;

}
// $ANTLR end DOUBLENUMBER

//   Comes from: 402:16: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NUMBER
 *
 * Looks to match the characters the constitute the token NUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mNUMBER()
{
    ANTLR_UINT32	_type;
      



    // Grammar/MorphDSL.g:402:16: ( ( '0' .. '9' )+ )
    // Grammar/MorphDSL.g:402:18: ( '0' .. '9' )+
    {
        // Grammar/MorphDSL.g:402:18: ( '0' .. '9' )+
        {
            int cnt4=0;

            for (;;)
            {
                int alt4=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt4=1;
        		}
        	    break;

        	}

        	switch (alt4)
        	{
        	    case 1:
        	        // Grammar/MorphDSL.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< MorphDSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleNUMBEREx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt4 >= 1 )
        		{
        		    goto loop4;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< MorphDSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleNUMBEREx;
        	}
        	cnt4++;
            }
            loop4: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleNUMBEREx; /* Prevent compiler warnings */
    ruleNUMBEREx: ;

}
// $ANTLR end NUMBER

//   Comes from: 404:3: ( ( ' ' | '\\t' | '\\n' | '\\r' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // Grammar/MorphDSL.g:404:3: ( ( ' ' | '\\t' | '\\n' | '\\r' ) )
    // Grammar/MorphDSL.g:404:5: ( ' ' | '\\t' | '\\n' | '\\r' )
    {
        if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< MorphDSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleWSEx;
        }


        {
             skip(); 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 406:8: ( '/' '/' (~ ( '\\r' | '\\n' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MorphDSLLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    // Grammar/MorphDSL.g:406:8: ( '/' '/' (~ ( '\\r' | '\\n' ) )* )
    // Grammar/MorphDSL.g:406:10: '/' '/' (~ ( '\\r' | '\\n' ) )*
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }


         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }


        // Grammar/MorphDSL.g:406:18: (~ ( '\\r' | '\\n' ) )*

        for (;;)
        {
            int alt5=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA5_0 = this->LA(1);
                if ( (((LA5_0 >= 0x0000) && (LA5_0 <= '\t')) || ((LA5_0 >= 0x000B) && (LA5_0 <= '\f')) || ((LA5_0 >= 0x000E) && (LA5_0 <= 0xFFFF))))
                {
                    alt5=1;
                }

            }
            switch (alt5)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MorphDSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop5;	/* break out of the loop */
        	    break;
            }
        }
        loop5: ; /* Jump out to here if this rule does not match */


        {
             skip(); 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
MorphDSLLexer::mTokens()
{
    {
        //  Grammar/MorphDSL.g:1:8: ( T_AND | T_AREA | T_ATTRIBUTE | T_BOUNDARY | T_BOX | T_CLOSE | T_COMMA | T_COMPLEMENT | T_CROP | T_DAP | T_DIFERENTIALPROFILES | T_DILATE | T_DISTANCETRANSFORM | T_DMP | T_DOUBLE_QUOTE | T_EQUALS | T_ERODE | T_EXTERNAL | T_FROM | T_GRADIENT | T_HITMISS | T_INTERNAL | T_INTERSECTION | T_LESS_THAN | T_LOAD | T_LPAREN | T_MAPPING | T_MORE_THAN | T_MORPHOLOGICAL | T_MSLS | T_MULTIPLY | T_NEGATE | T_NORMALIZE | T_NOT_EQUAL | T_OPEN | T_RECONSTRUCTION | T_RPAREN | T_SEGMENTATION | T_SELECT | T_STAR | T_SUBTRACT | T_TRESHOLD | T_UNION | T_WATHERSHADE | T_WHERE | T_WITHOUT | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | ID | DOUBLENUMBER | WS | COMMENT )

        ANTLR_UINT32 alt6;

        alt6=63;

        switch ( this->LA(1) )
        {
        case 'A':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'N':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'D':
        					{
        						switch ( this->LA(4) )
        						{
        						case '.':
        						case ':':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '[':
        						case '\\':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt6=60;
        							}
        						    break;

        						default:
        						    alt6=1;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'R':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'E':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'A':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=2;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'T':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'T':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'R':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'I':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'B':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'U':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'T':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'E':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '.':
        																		case ':':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '[':
        																		case '\\':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt6=60;
        																			}
        																		    break;

        																		default:
        																		    alt6=3;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'b':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'u':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'd':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'a':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'r':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'y':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=4;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'B':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'O':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'X':
        					{
        						switch ( this->LA(4) )
        						{
        						case '.':
        						case ':':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '[':
        						case '\\':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt6=60;
        							}
        						    break;

        						default:
        						    alt6=5;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'c':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '.':
        										case ':':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '[':
        										case '\\':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt6=60;
        											}
        										    break;

        										default:
        										    alt6=6;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'm':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'p':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'l':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'm':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'n':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 't':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case '.':
        																				case ':':
        																				case 'A':
        																				case 'B':
        																				case 'C':
        																				case 'D':
        																				case 'E':
        																				case 'F':
        																				case 'G':
        																				case 'H':
        																				case 'I':
        																				case 'J':
        																				case 'K':
        																				case 'L':
        																				case 'M':
        																				case 'N':
        																				case 'O':
        																				case 'P':
        																				case 'Q':
        																				case 'R':
        																				case 'S':
        																				case 'T':
        																				case 'U':
        																				case 'V':
        																				case 'W':
        																				case 'X':
        																				case 'Y':
        																				case 'Z':
        																				case '[':
        																				case '\\':
        																				case '_':
        																				case 'a':
        																				case 'b':
        																				case 'c':
        																				case 'd':
        																				case 'e':
        																				case 'f':
        																				case 'g':
        																				case 'h':
        																				case 'i':
        																				case 'j':
        																				case 'k':
        																				case 'l':
        																				case 'm':
        																				case 'n':
        																				case 'o':
        																				case 'p':
        																				case 'q':
        																				case 'r':
        																				case 's':
        																				case 't':
        																				case 'u':
        																				case 'v':
        																				case 'w':
        																				case 'x':
        																				case 'y':
        																				case 'z':
        																					{
        																						alt6=60;
        																					}
        																				    break;

        																				default:
        																				    alt6=8;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'p':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=9;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case ',':
        	{
        		alt6=7;
        	}
            break;
        case 'D':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'A':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'P':
        					{
        						switch ( this->LA(4) )
        						{
        						case '.':
        						case ':':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '[':
        						case '\\':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt6=60;
        							}
        						    break;

        						default:
        						    alt6=10;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'M':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'P':
        					{
        						switch ( this->LA(4) )
        						{
        						case '.':
        						case ':':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '[':
        						case '\\':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt6=60;
        							}
        						    break;

        						default:
        						    alt6=14;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'd':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'f':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'r':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'n':
        													{
        														switch ( this->LA(8) )
        														{
        														case 't':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'i':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'a':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'l':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'P':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 'r':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case 'o':
        																											{
        																												switch ( this->LA(15) )
        																												{
        																												case 'f':
        																													{
        																														switch ( this->LA(16) )
        																														{
        																														case 'i':
        																															{
        																																switch ( this->LA(17) )
        																																{
        																																case 'l':
        																																	{
        																																		switch ( this->LA(18) )
        																																		{
        																																		case 'e':
        																																			{
        																																				switch ( this->LA(19) )
        																																				{
        																																				case 's':
        																																					{
        																																						switch ( this->LA(20) )
        																																						{
        																																						case '.':
        																																						case ':':
        																																						case 'A':
        																																						case 'B':
        																																						case 'C':
        																																						case 'D':
        																																						case 'E':
        																																						case 'F':
        																																						case 'G':
        																																						case 'H':
        																																						case 'I':
        																																						case 'J':
        																																						case 'K':
        																																						case 'L':
        																																						case 'M':
        																																						case 'N':
        																																						case 'O':
        																																						case 'P':
        																																						case 'Q':
        																																						case 'R':
        																																						case 'S':
        																																						case 'T':
        																																						case 'U':
        																																						case 'V':
        																																						case 'W':
        																																						case 'X':
        																																						case 'Y':
        																																						case 'Z':
        																																						case '[':
        																																						case '\\':
        																																						case '_':
        																																						case 'a':
        																																						case 'b':
        																																						case 'c':
        																																						case 'd':
        																																						case 'e':
        																																						case 'f':
        																																						case 'g':
        																																						case 'h':
        																																						case 'i':
        																																						case 'j':
        																																						case 'k':
        																																						case 'l':
        																																						case 'm':
        																																						case 'n':
        																																						case 'o':
        																																						case 'p':
        																																						case 'q':
        																																						case 'r':
        																																						case 's':
        																																						case 't':
        																																						case 'u':
        																																						case 'v':
        																																						case 'w':
        																																						case 'x':
        																																						case 'y':
        																																						case 'z':
        																																							{
        																																								alt6=60;
        																																							}
        																																						    break;

        																																						default:
        																																						    alt6=11;
        																																						}

        																																					}
        																																				    break;

        																																				default:
        																																				    alt6=60;
        																																				}

        																																			}
        																																		    break;

        																																		default:
        																																		    alt6=60;
        																																		}

        																																	}
        																																    break;

        																																default:
        																																    alt6=60;
        																																}

        																															}
        																														    break;

        																														default:
        																														    alt6=60;
        																														}

        																													}
        																												    break;

        																												default:
        																												    alt6=60;
        																												}

        																											}
        																										    break;

        																										default:
        																										    alt6=60;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;
        				case 'l':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 't':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case '.':
        												case ':':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '[':
        												case '\\':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt6=60;
        													}
        												    break;

        												default:
        												    alt6=12;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'a':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'c':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'T':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'r':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'a':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'n':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 's':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case 'f':
        																											{
        																												switch ( this->LA(15) )
        																												{
        																												case 'o':
        																													{
        																														switch ( this->LA(16) )
        																														{
        																														case 'r':
        																															{
        																																switch ( this->LA(17) )
        																																{
        																																case 'm':
        																																	{
        																																		switch ( this->LA(18) )
        																																		{
        																																		case '.':
        																																		case ':':
        																																		case 'A':
        																																		case 'B':
        																																		case 'C':
        																																		case 'D':
        																																		case 'E':
        																																		case 'F':
        																																		case 'G':
        																																		case 'H':
        																																		case 'I':
        																																		case 'J':
        																																		case 'K':
        																																		case 'L':
        																																		case 'M':
        																																		case 'N':
        																																		case 'O':
        																																		case 'P':
        																																		case 'Q':
        																																		case 'R':
        																																		case 'S':
        																																		case 'T':
        																																		case 'U':
        																																		case 'V':
        																																		case 'W':
        																																		case 'X':
        																																		case 'Y':
        																																		case 'Z':
        																																		case '[':
        																																		case '\\':
        																																		case '_':
        																																		case 'a':
        																																		case 'b':
        																																		case 'c':
        																																		case 'd':
        																																		case 'e':
        																																		case 'f':
        																																		case 'g':
        																																		case 'h':
        																																		case 'i':
        																																		case 'j':
        																																		case 'k':
        																																		case 'l':
        																																		case 'm':
        																																		case 'n':
        																																		case 'o':
        																																		case 'p':
        																																		case 'q':
        																																		case 'r':
        																																		case 's':
        																																		case 't':
        																																		case 'u':
        																																		case 'v':
        																																		case 'w':
        																																		case 'x':
        																																		case 'y':
        																																		case 'z':
        																																			{
        																																				alt6=60;
        																																			}
        																																		    break;

        																																		default:
        																																		    alt6=13;
        																																		}

        																																	}
        																																    break;

        																																default:
        																																    alt6=60;
        																																}

        																															}
        																														    break;

        																														default:
        																														    alt6=60;
        																														}

        																													}
        																												    break;

        																												default:
        																												    alt6=60;
        																												}

        																											}
        																										    break;

        																										default:
        																										    alt6=60;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '"':
        	{
        		alt6=15;
        	}
            break;
        case '=':
        	{
        		alt6=16;
        	}
            break;
        case 'e':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'd':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '.':
        										case ':':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '[':
        										case '\\':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt6=60;
        											}
        										    break;

        										default:
        										    alt6=17;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'x':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'r':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'a':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'l':
        															{
        																switch ( this->LA(9) )
        																{
        																case '_':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'g':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'r':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'a':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 'd':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case 'i':
        																											{
        																												switch ( this->LA(15) )
        																												{
        																												case 'e':
        																													{
        																														switch ( this->LA(16) )
        																														{
        																														case 'n':
        																															{
        																																switch ( this->LA(17) )
        																																{
        																																case 't':
        																																	{
        																																		switch ( this->LA(18) )
        																																		{
        																																		case '.':
        																																		case ':':
        																																		case 'A':
        																																		case 'B':
        																																		case 'C':
        																																		case 'D':
        																																		case 'E':
        																																		case 'F':
        																																		case 'G':
        																																		case 'H':
        																																		case 'I':
        																																		case 'J':
        																																		case 'K':
        																																		case 'L':
        																																		case 'M':
        																																		case 'N':
        																																		case 'O':
        																																		case 'P':
        																																		case 'Q':
        																																		case 'R':
        																																		case 'S':
        																																		case 'T':
        																																		case 'U':
        																																		case 'V':
        																																		case 'W':
        																																		case 'X':
        																																		case 'Y':
        																																		case 'Z':
        																																		case '[':
        																																		case '\\':
        																																		case '_':
        																																		case 'a':
        																																		case 'b':
        																																		case 'c':
        																																		case 'd':
        																																		case 'e':
        																																		case 'f':
        																																		case 'g':
        																																		case 'h':
        																																		case 'i':
        																																		case 'j':
        																																		case 'k':
        																																		case 'l':
        																																		case 'm':
        																																		case 'n':
        																																		case 'o':
        																																		case 'p':
        																																		case 'q':
        																																		case 'r':
        																																		case 's':
        																																		case 't':
        																																		case 'u':
        																																		case 'v':
        																																		case 'w':
        																																		case 'x':
        																																		case 'y':
        																																		case 'z':
        																																			{
        																																				alt6=60;
        																																			}
        																																		    break;

        																																		default:
        																																		    alt6=52;
        																																		}

        																																	}
        																																    break;

        																																default:
        																																    alt6=60;
        																																}

        																															}
        																														    break;

        																														default:
        																														    alt6=60;
        																														}

        																													}
        																												    break;

        																												default:
        																												    alt6=60;
        																												}

        																											}
        																										    break;

        																										default:
        																										    alt6=60;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;
        																						case 'e':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 'a':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case 'd':
        																											{
        																												switch ( this->LA(15) )
        																												{
        																												case 'i':
        																													{
        																														switch ( this->LA(16) )
        																														{
        																														case 'e':
        																															{
        																																switch ( this->LA(17) )
        																																{
        																																case 'n':
        																																	{
        																																		switch ( this->LA(18) )
        																																		{
        																																		case 't':
        																																			{
        																																				switch ( this->LA(19) )
        																																				{
        																																				case '.':
        																																				case ':':
        																																				case 'A':
        																																				case 'B':
        																																				case 'C':
        																																				case 'D':
        																																				case 'E':
        																																				case 'F':
        																																				case 'G':
        																																				case 'H':
        																																				case 'I':
        																																				case 'J':
        																																				case 'K':
        																																				case 'L':
        																																				case 'M':
        																																				case 'N':
        																																				case 'O':
        																																				case 'P':
        																																				case 'Q':
        																																				case 'R':
        																																				case 'S':
        																																				case 'T':
        																																				case 'U':
        																																				case 'V':
        																																				case 'W':
        																																				case 'X':
        																																				case 'Y':
        																																				case 'Z':
        																																				case '[':
        																																				case '\\':
        																																				case '_':
        																																				case 'a':
        																																				case 'b':
        																																				case 'c':
        																																				case 'd':
        																																				case 'e':
        																																				case 'f':
        																																				case 'g':
        																																				case 'h':
        																																				case 'i':
        																																				case 'j':
        																																				case 'k':
        																																				case 'l':
        																																				case 'm':
        																																				case 'n':
        																																				case 'o':
        																																				case 'p':
        																																				case 'q':
        																																				case 'r':
        																																				case 's':
        																																				case 't':
        																																				case 'u':
        																																				case 'v':
        																																				case 'w':
        																																				case 'x':
        																																				case 'y':
        																																				case 'z':
        																																					{
        																																						alt6=60;
        																																					}
        																																				    break;

        																																				default:
        																																				    alt6=53;
        																																				}

        																																			}
        																																		    break;

        																																		default:
        																																		    alt6=60;
        																																		}

        																																	}
        																																    break;

        																																default:
        																																    alt6=60;
        																																}

        																															}
        																														    break;

        																														default:
        																														    alt6=60;
        																														}

        																													}
        																												    break;

        																												default:
        																												    alt6=60;
        																												}

        																											}
        																										    break;

        																										default:
        																										    alt6=60;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'E':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'X':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'T':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'E':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'R':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'N':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'A':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'L':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=18;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'F':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'R':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'O':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'M':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=19;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'g':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'a':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'd':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'n':
        													{
        														switch ( this->LA(8) )
        														{
        														case 't':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=20;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'h':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'm':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 's':
        											{
        												switch ( this->LA(7) )
        												{
        												case 's':
        													{
        														switch ( this->LA(8) )
        														{
        														case '.':
        														case ':':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '[':
        														case '\\':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt6=60;
        															}
        														    break;

        														default:
        														    alt6=21;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'I':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'N':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'T':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'E':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'R':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'N':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'A':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'L':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=22;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'i':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'r':
        									{
        										switch ( this->LA(6) )
        										{
        										case 's':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'e':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'c':
        															{
        																switch ( this->LA(9) )
        																{
        																case 't':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'i':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'o':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'n':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case '.':
        																								case ':':
        																								case 'A':
        																								case 'B':
        																								case 'C':
        																								case 'D':
        																								case 'E':
        																								case 'F':
        																								case 'G':
        																								case 'H':
        																								case 'I':
        																								case 'J':
        																								case 'K':
        																								case 'L':
        																								case 'M':
        																								case 'N':
        																								case 'O':
        																								case 'P':
        																								case 'Q':
        																								case 'R':
        																								case 'S':
        																								case 'T':
        																								case 'U':
        																								case 'V':
        																								case 'W':
        																								case 'X':
        																								case 'Y':
        																								case 'Z':
        																								case '[':
        																								case '\\':
        																								case '_':
        																								case 'a':
        																								case 'b':
        																								case 'c':
        																								case 'd':
        																								case 'e':
        																								case 'f':
        																								case 'g':
        																								case 'h':
        																								case 'i':
        																								case 'j':
        																								case 'k':
        																								case 'l':
        																								case 'm':
        																								case 'n':
        																								case 'o':
        																								case 'p':
        																								case 'q':
        																								case 'r':
        																								case 's':
        																								case 't':
        																								case 'u':
        																								case 'v':
        																								case 'w':
        																								case 'x':
        																								case 'y':
        																								case 'z':
        																									{
        																										alt6=60;
        																									}
        																								    break;

        																								default:
        																								    alt6=23;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'a':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'l':
        															{
        																switch ( this->LA(9) )
        																{
        																case '_':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'g':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'r':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'a':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 'd':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case 'i':
        																											{
        																												switch ( this->LA(15) )
        																												{
        																												case 'e':
        																													{
        																														switch ( this->LA(16) )
        																														{
        																														case 'n':
        																															{
        																																switch ( this->LA(17) )
        																																{
        																																case 't':
        																																	{
        																																		switch ( this->LA(18) )
        																																		{
        																																		case '.':
        																																		case ':':
        																																		case 'A':
        																																		case 'B':
        																																		case 'C':
        																																		case 'D':
        																																		case 'E':
        																																		case 'F':
        																																		case 'G':
        																																		case 'H':
        																																		case 'I':
        																																		case 'J':
        																																		case 'K':
        																																		case 'L':
        																																		case 'M':
        																																		case 'N':
        																																		case 'O':
        																																		case 'P':
        																																		case 'Q':
        																																		case 'R':
        																																		case 'S':
        																																		case 'T':
        																																		case 'U':
        																																		case 'V':
        																																		case 'W':
        																																		case 'X':
        																																		case 'Y':
        																																		case 'Z':
        																																		case '[':
        																																		case '\\':
        																																		case '_':
        																																		case 'a':
        																																		case 'b':
        																																		case 'c':
        																																		case 'd':
        																																		case 'e':
        																																		case 'f':
        																																		case 'g':
        																																		case 'h':
        																																		case 'i':
        																																		case 'j':
        																																		case 'k':
        																																		case 'l':
        																																		case 'm':
        																																		case 'n':
        																																		case 'o':
        																																		case 'p':
        																																		case 'q':
        																																		case 'r':
        																																		case 's':
        																																		case 't':
        																																		case 'u':
        																																		case 'v':
        																																		case 'w':
        																																		case 'x':
        																																		case 'y':
        																																		case 'z':
        																																			{
        																																				alt6=60;
        																																			}
        																																		    break;

        																																		default:
        																																		    alt6=54;
        																																		}

        																																	}
        																																    break;

        																																default:
        																																    alt6=60;
        																																}

        																															}
        																														    break;

        																														default:
        																														    alt6=60;
        																														}

        																													}
        																												    break;

        																												default:
        																												    alt6=60;
        																												}

        																											}
        																										    break;

        																										default:
        																										    alt6=60;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '<':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt6=47;
        			}
        		    break;

        		default:
        		    alt6=24;
        		}

        	}
            break;
        case 'l':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'a':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'd':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=25;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '(':
        	{
        		alt6=26;
        	}
            break;
        case 'm':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'p':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'p':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'g':
        													{
        														switch ( this->LA(8) )
        														{
        														case '.':
        														case ':':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '[':
        														case '\\':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt6=60;
        															}
        														    break;

        														default:
        														    alt6=27;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'k':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=55;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'l':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'p':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'l':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'y':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=31;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '>':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt6=48;
        			}
        		    break;

        		default:
        		    alt6=28;
        		}

        	}
            break;
        case 'M':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'O':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'R':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'P':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'H':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'O':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'L':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'O':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'G':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'I':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'C':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'A':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 'L':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case '.':
        																										case ':':
        																										case 'A':
        																										case 'B':
        																										case 'C':
        																										case 'D':
        																										case 'E':
        																										case 'F':
        																										case 'G':
        																										case 'H':
        																										case 'I':
        																										case 'J':
        																										case 'K':
        																										case 'L':
        																										case 'M':
        																										case 'N':
        																										case 'O':
        																										case 'P':
        																										case 'Q':
        																										case 'R':
        																										case 'S':
        																										case 'T':
        																										case 'U':
        																										case 'V':
        																										case 'W':
        																										case 'X':
        																										case 'Y':
        																										case 'Z':
        																										case '[':
        																										case '\\':
        																										case '_':
        																										case 'a':
        																										case 'b':
        																										case 'c':
        																										case 'd':
        																										case 'e':
        																										case 'f':
        																										case 'g':
        																										case 'h':
        																										case 'i':
        																										case 'j':
        																										case 'k':
        																										case 'l':
        																										case 'm':
        																										case 'n':
        																										case 'o':
        																										case 'p':
        																										case 'q':
        																										case 'r':
        																										case 's':
        																										case 't':
        																										case 'u':
        																										case 'v':
        																										case 'w':
        																										case 'x':
        																										case 'y':
        																										case 'z':
        																											{
        																												alt6=60;
        																											}
        																										    break;

        																										default:
        																										    alt6=29;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'S':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'L':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'S':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=30;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'n':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'g':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 't':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case '.':
        												case ':':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '[':
        												case '\\':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt6=60;
        													}
        												    break;

        												default:
        												    alt6=32;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'r':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'm':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'a':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'l':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'i':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'z':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'e':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '.':
        																		case ':':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '[':
        																		case '\\':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt6=60;
        																			}
        																		    break;

        																		default:
        																		    alt6=33;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '!':
        	{
        		alt6=34;
        	}
            break;
        case 'o':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'p':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=35;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'k':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'r':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'o':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'g':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'l':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'o':
        													{
        														switch ( this->LA(8) )
        														{
        														case 's':
        															{
        																switch ( this->LA(9) )
        																{
        																case 't':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '.':
        																		case ':':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '[':
        																		case '\\':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt6=60;
        																			}
        																		    break;

        																		default:
        																		    alt6=56;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'R':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'E':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'C':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'O':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'N':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'S':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'T':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'R':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'U':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'C':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'T':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'I':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case 'O':
        																									{
        																										switch ( this->LA(14) )
        																										{
        																										case 'N':
        																											{
        																												switch ( this->LA(15) )
        																												{
        																												case '.':
        																												case ':':
        																												case 'A':
        																												case 'B':
        																												case 'C':
        																												case 'D':
        																												case 'E':
        																												case 'F':
        																												case 'G':
        																												case 'H':
        																												case 'I':
        																												case 'J':
        																												case 'K':
        																												case 'L':
        																												case 'M':
        																												case 'N':
        																												case 'O':
        																												case 'P':
        																												case 'Q':
        																												case 'R':
        																												case 'S':
        																												case 'T':
        																												case 'U':
        																												case 'V':
        																												case 'W':
        																												case 'X':
        																												case 'Y':
        																												case 'Z':
        																												case '[':
        																												case '\\':
        																												case '_':
        																												case 'a':
        																												case 'b':
        																												case 'c':
        																												case 'd':
        																												case 'e':
        																												case 'f':
        																												case 'g':
        																												case 'h':
        																												case 'i':
        																												case 'j':
        																												case 'k':
        																												case 'l':
        																												case 'm':
        																												case 'n':
        																												case 'o':
        																												case 'p':
        																												case 'q':
        																												case 'r':
        																												case 's':
        																												case 't':
        																												case 'u':
        																												case 'v':
        																												case 'w':
        																												case 'x':
        																												case 'y':
        																												case 'z':
        																													{
        																														alt6=60;
        																													}
        																												    break;

        																												default:
        																												    alt6=36;
        																												}

        																											}
        																										    break;

        																										default:
        																										    alt6=60;
        																										}

        																									}
        																								    break;

        																								default:
        																								    alt6=60;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case ')':
        	{
        		alt6=37;
        	}
            break;
        case 's':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'g':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'm':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 't':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'a':
        															{
        																switch ( this->LA(9) )
        																{
        																case 't':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'i':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'o':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case 'n':
        																							{
        																								switch ( this->LA(13) )
        																								{
        																								case '.':
        																								case ':':
        																								case 'A':
        																								case 'B':
        																								case 'C':
        																								case 'D':
        																								case 'E':
        																								case 'F':
        																								case 'G':
        																								case 'H':
        																								case 'I':
        																								case 'J':
        																								case 'K':
        																								case 'L':
        																								case 'M':
        																								case 'N':
        																								case 'O':
        																								case 'P':
        																								case 'Q':
        																								case 'R':
        																								case 'S':
        																								case 'T':
        																								case 'U':
        																								case 'V':
        																								case 'W':
        																								case 'X':
        																								case 'Y':
        																								case 'Z':
        																								case '[':
        																								case '\\':
        																								case '_':
        																								case 'a':
        																								case 'b':
        																								case 'c':
        																								case 'd':
        																								case 'e':
        																								case 'f':
        																								case 'g':
        																								case 'h':
        																								case 'i':
        																								case 'j':
        																								case 'k':
        																								case 'l':
        																								case 'm':
        																								case 'n':
        																								case 'o':
        																								case 'p':
        																								case 'q':
        																								case 'r':
        																								case 's':
        																								case 't':
        																								case 'u':
        																								case 'v':
        																								case 'w':
        																								case 'x':
        																								case 'y':
        																								case 'z':
        																									{
        																										alt6=60;
        																									}
        																								    break;

        																								default:
        																								    alt6=38;
        																								}

        																							}
        																						    break;

        																						default:
        																						    alt6=60;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case '.':
        						case ':':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '[':
        						case '\\':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt6=60;
        							}
        						    break;

        						default:
        						    alt6=58;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'b':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'r':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'a':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'c':
        													{
        														switch ( this->LA(8) )
        														{
        														case 't':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=41;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'S':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'E':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'L':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'E':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'C':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'T':
        											{
        												switch ( this->LA(7) )
        												{
        												case '.':
        												case ':':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '[':
        												case '\\':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt6=60;
        													}
        												    break;

        												default:
        												    alt6=39;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '*':
        	{
        		alt6=40;
        	}
            break;
        case 't':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'h':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'o':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'l':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'd':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=42;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'u':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'i':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'o':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'n':
        									{
        										switch ( this->LA(6) )
        										{
        										case '.':
        										case ':':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '[':
        										case '\\':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt6=60;
        											}
        										    break;

        										default:
        										    alt6=43;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'W':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'A':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'T':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'H':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'E':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'R':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'S':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'H':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'A':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case 'D':
        																			{
        																				switch ( this->LA(11) )
        																				{
        																				case 'E':
        																					{
        																						switch ( this->LA(12) )
        																						{
        																						case '.':
        																						case ':':
        																						case 'A':
        																						case 'B':
        																						case 'C':
        																						case 'D':
        																						case 'E':
        																						case 'F':
        																						case 'G':
        																						case 'H':
        																						case 'I':
        																						case 'J':
        																						case 'K':
        																						case 'L':
        																						case 'M':
        																						case 'N':
        																						case 'O':
        																						case 'P':
        																						case 'Q':
        																						case 'R':
        																						case 'S':
        																						case 'T':
        																						case 'U':
        																						case 'V':
        																						case 'W':
        																						case 'X':
        																						case 'Y':
        																						case 'Z':
        																						case '[':
        																						case '\\':
        																						case '_':
        																						case 'a':
        																						case 'b':
        																						case 'c':
        																						case 'd':
        																						case 'e':
        																						case 'f':
        																						case 'g':
        																						case 'h':
        																						case 'i':
        																						case 'j':
        																						case 'k':
        																						case 'l':
        																						case 'm':
        																						case 'n':
        																						case 'o':
        																						case 'p':
        																						case 'q':
        																						case 'r':
        																						case 's':
        																						case 't':
        																						case 'u':
        																						case 'v':
        																						case 'w':
        																						case 'x':
        																						case 'y':
        																						case 'z':
        																							{
        																								alt6=60;
        																							}
        																						    break;

        																						default:
        																						    alt6=44;
        																						}

        																					}
        																				    break;

        																				default:
        																				    alt6=60;
        																				}

        																			}
        																		    break;

        																		default:
        																		    alt6=60;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 'H':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'E':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'R':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'E':
        									{
        										switch ( this->LA(6) )
        										{
        										case '.':
        										case ':':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '[':
        										case '\\':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt6=60;
        											}
        										    break;

        										default:
        										    alt6=45;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'w':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'h':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'o':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'u':
        											{
        												switch ( this->LA(7) )
        												{
        												case 't':
        													{
        														switch ( this->LA(8) )
        														{
        														case '.':
        														case ':':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '[':
        														case '\\':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt6=60;
        															}
        														    break;

        														default:
        														    alt6=46;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'a':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case ':':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '[':
        								case '\\':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt6=60;
        									}
        								    break;

        								default:
        								    alt6=49;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;
        		case 't':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'r':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'i':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'b':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'u':
        											{
        												switch ( this->LA(7) )
        												{
        												case 't':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=50;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'r':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'b':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'u':
        													{
        														switch ( this->LA(8) )
        														{
        														case 't':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'e':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '.':
        																		case ':':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '[':
        																		case '\\':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt6=60;
        																			}
        																		    break;

        																		default:
        																		    alt6=51;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=60;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'r':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'p':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'o':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 's':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=57;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case 'v':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'l':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'u':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'm':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'n':
        													{
        														switch ( this->LA(8) )
        														{
        														case 't':
        															{
        																switch ( this->LA(9) )
        																{
        																case '.':
        																case ':':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '[':
        																case '\\':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt6=60;
        																	}
        																    break;

        																default:
        																    alt6=59;
        																}

        															}
        														    break;

        														default:
        														    alt6=60;
        														}

        													}
        												    break;

        												default:
        												    alt6=60;
        												}

        											}
        										    break;

        										default:
        										    alt6=60;
        										}

        									}
        								    break;

        								default:
        								    alt6=60;
        								}

        							}
        						    break;

        						default:
        						    alt6=60;
        						}

        					}
        				    break;

        				default:
        				    alt6=60;
        				}

        			}
        		    break;

        		default:
        		    alt6=60;
        		}

        	}
            break;
        case '.':
        case ':':
        case 'C':
        case 'G':
        case 'H':
        case 'J':
        case 'K':
        case 'L':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'T':
        case 'U':
        case 'V':
        case 'X':
        case 'Y':
        case 'Z':
        case '\\':
        case '_':
        case 'f':
        case 'j':
        case 'k':
        case 'p':
        case 'q':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt6=60;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt6=61;
        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt6=62;
        	}
            break;
        case '/':
        	{
        		alt6=63;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 6 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt6)
        {
    	case 1:
    	    // Grammar/MorphDSL.g:1:10: T_AND
    	    {
    	        /* 1:10: T_AND */
    	        mT_AND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Grammar/MorphDSL.g:1:16: T_AREA
    	    {
    	        /* 1:16: T_AREA */
    	        mT_AREA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Grammar/MorphDSL.g:1:23: T_ATTRIBUTE
    	    {
    	        /* 1:23: T_ATTRIBUTE */
    	        mT_ATTRIBUTE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // Grammar/MorphDSL.g:1:35: T_BOUNDARY
    	    {
    	        /* 1:35: T_BOUNDARY */
    	        mT_BOUNDARY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // Grammar/MorphDSL.g:1:46: T_BOX
    	    {
    	        /* 1:46: T_BOX */
    	        mT_BOX();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // Grammar/MorphDSL.g:1:52: T_CLOSE
    	    {
    	        /* 1:52: T_CLOSE */
    	        mT_CLOSE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // Grammar/MorphDSL.g:1:60: T_COMMA
    	    {
    	        /* 1:60: T_COMMA */
    	        mT_COMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // Grammar/MorphDSL.g:1:68: T_COMPLEMENT
    	    {
    	        /* 1:68: T_COMPLEMENT */
    	        mT_COMPLEMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // Grammar/MorphDSL.g:1:81: T_CROP
    	    {
    	        /* 1:81: T_CROP */
    	        mT_CROP();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // Grammar/MorphDSL.g:1:88: T_DAP
    	    {
    	        /* 1:88: T_DAP */
    	        mT_DAP();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // Grammar/MorphDSL.g:1:94: T_DIFERENTIALPROFILES
    	    {
    	        /* 1:94: T_DIFERENTIALPROFILES */
    	        mT_DIFERENTIALPROFILES();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // Grammar/MorphDSL.g:1:116: T_DILATE
    	    {
    	        /* 1:116: T_DILATE */
    	        mT_DILATE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // Grammar/MorphDSL.g:1:125: T_DISTANCETRANSFORM
    	    {
    	        /* 1:125: T_DISTANCETRANSFORM */
    	        mT_DISTANCETRANSFORM();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // Grammar/MorphDSL.g:1:145: T_DMP
    	    {
    	        /* 1:145: T_DMP */
    	        mT_DMP();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // Grammar/MorphDSL.g:1:151: T_DOUBLE_QUOTE
    	    {
    	        /* 1:151: T_DOUBLE_QUOTE */
    	        mT_DOUBLE_QUOTE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // Grammar/MorphDSL.g:1:166: T_EQUALS
    	    {
    	        /* 1:166: T_EQUALS */
    	        mT_EQUALS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // Grammar/MorphDSL.g:1:175: T_ERODE
    	    {
    	        /* 1:175: T_ERODE */
    	        mT_ERODE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // Grammar/MorphDSL.g:1:183: T_EXTERNAL
    	    {
    	        /* 1:183: T_EXTERNAL */
    	        mT_EXTERNAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // Grammar/MorphDSL.g:1:194: T_FROM
    	    {
    	        /* 1:194: T_FROM */
    	        mT_FROM();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // Grammar/MorphDSL.g:1:201: T_GRADIENT
    	    {
    	        /* 1:201: T_GRADIENT */
    	        mT_GRADIENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // Grammar/MorphDSL.g:1:212: T_HITMISS
    	    {
    	        /* 1:212: T_HITMISS */
    	        mT_HITMISS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // Grammar/MorphDSL.g:1:222: T_INTERNAL
    	    {
    	        /* 1:222: T_INTERNAL */
    	        mT_INTERNAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // Grammar/MorphDSL.g:1:233: T_INTERSECTION
    	    {
    	        /* 1:233: T_INTERSECTION */
    	        mT_INTERSECTION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // Grammar/MorphDSL.g:1:248: T_LESS_THAN
    	    {
    	        /* 1:248: T_LESS_THAN */
    	        mT_LESS_THAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // Grammar/MorphDSL.g:1:260: T_LOAD
    	    {
    	        /* 1:260: T_LOAD */
    	        mT_LOAD();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // Grammar/MorphDSL.g:1:267: T_LPAREN
    	    {
    	        /* 1:267: T_LPAREN */
    	        mT_LPAREN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // Grammar/MorphDSL.g:1:276: T_MAPPING
    	    {
    	        /* 1:276: T_MAPPING */
    	        mT_MAPPING();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // Grammar/MorphDSL.g:1:286: T_MORE_THAN
    	    {
    	        /* 1:286: T_MORE_THAN */
    	        mT_MORE_THAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // Grammar/MorphDSL.g:1:298: T_MORPHOLOGICAL
    	    {
    	        /* 1:298: T_MORPHOLOGICAL */
    	        mT_MORPHOLOGICAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // Grammar/MorphDSL.g:1:314: T_MSLS
    	    {
    	        /* 1:314: T_MSLS */
    	        mT_MSLS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // Grammar/MorphDSL.g:1:321: T_MULTIPLY
    	    {
    	        /* 1:321: T_MULTIPLY */
    	        mT_MULTIPLY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // Grammar/MorphDSL.g:1:332: T_NEGATE
    	    {
    	        /* 1:332: T_NEGATE */
    	        mT_NEGATE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // Grammar/MorphDSL.g:1:341: T_NORMALIZE
    	    {
    	        /* 1:341: T_NORMALIZE */
    	        mT_NORMALIZE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // Grammar/MorphDSL.g:1:353: T_NOT_EQUAL
    	    {
    	        /* 1:353: T_NOT_EQUAL */
    	        mT_NOT_EQUAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // Grammar/MorphDSL.g:1:365: T_OPEN
    	    {
    	        /* 1:365: T_OPEN */
    	        mT_OPEN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // Grammar/MorphDSL.g:1:372: T_RECONSTRUCTION
    	    {
    	        /* 1:372: T_RECONSTRUCTION */
    	        mT_RECONSTRUCTION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // Grammar/MorphDSL.g:1:389: T_RPAREN
    	    {
    	        /* 1:389: T_RPAREN */
    	        mT_RPAREN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // Grammar/MorphDSL.g:1:398: T_SEGMENTATION
    	    {
    	        /* 1:398: T_SEGMENTATION */
    	        mT_SEGMENTATION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // Grammar/MorphDSL.g:1:413: T_SELECT
    	    {
    	        /* 1:413: T_SELECT */
    	        mT_SELECT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // Grammar/MorphDSL.g:1:422: T_STAR
    	    {
    	        /* 1:422: T_STAR */
    	        mT_STAR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // Grammar/MorphDSL.g:1:429: T_SUBTRACT
    	    {
    	        /* 1:429: T_SUBTRACT */
    	        mT_SUBTRACT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // Grammar/MorphDSL.g:1:440: T_TRESHOLD
    	    {
    	        /* 1:440: T_TRESHOLD */
    	        mT_TRESHOLD();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // Grammar/MorphDSL.g:1:451: T_UNION
    	    {
    	        /* 1:451: T_UNION */
    	        mT_UNION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // Grammar/MorphDSL.g:1:459: T_WATHERSHADE
    	    {
    	        /* 1:459: T_WATHERSHADE */
    	        mT_WATHERSHADE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // Grammar/MorphDSL.g:1:473: T_WHERE
    	    {
    	        /* 1:473: T_WHERE */
    	        mT_WHERE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // Grammar/MorphDSL.g:1:481: T_WITHOUT
    	    {
    	        /* 1:481: T_WITHOUT */
    	        mT_WITHOUT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // Grammar/MorphDSL.g:1:491: T__55
    	    {
    	        /* 1:491: T__55 */
    	        mT__55();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // Grammar/MorphDSL.g:1:497: T__56
    	    {
    	        /* 1:497: T__56 */
    	        mT__56();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // Grammar/MorphDSL.g:1:503: T__57
    	    {
    	        /* 1:503: T__57 */
    	        mT__57();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // Grammar/MorphDSL.g:1:509: T__58
    	    {
    	        /* 1:509: T__58 */
    	        mT__58();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // Grammar/MorphDSL.g:1:515: T__59
    	    {
    	        /* 1:515: T__59 */
    	        mT__59();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // Grammar/MorphDSL.g:1:521: T__60
    	    {
    	        /* 1:521: T__60 */
    	        mT__60();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // Grammar/MorphDSL.g:1:527: T__61
    	    {
    	        /* 1:527: T__61 */
    	        mT__61();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // Grammar/MorphDSL.g:1:533: T__62
    	    {
    	        /* 1:533: T__62 */
    	        mT__62();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // Grammar/MorphDSL.g:1:539: T__63
    	    {
    	        /* 1:539: T__63 */
    	        mT__63();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // Grammar/MorphDSL.g:1:545: T__64
    	    {
    	        /* 1:545: T__64 */
    	        mT__64();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // Grammar/MorphDSL.g:1:551: T__65
    	    {
    	        /* 1:551: T__65 */
    	        mT__65();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // Grammar/MorphDSL.g:1:557: T__66
    	    {
    	        /* 1:557: T__66 */
    	        mT__66();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // Grammar/MorphDSL.g:1:563: T__67
    	    {
    	        /* 1:563: T__67 */
    	        mT__67();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // Grammar/MorphDSL.g:1:569: ID
    	    {
    	        /* 1:569: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // Grammar/MorphDSL.g:1:572: DOUBLENUMBER
    	    {
    	        /* 1:572: DOUBLENUMBER */
    	        mDOUBLENUMBER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // Grammar/MorphDSL.g:1:585: WS
    	    {
    	        /* 1:585: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // Grammar/MorphDSL.g:1:588: COMMENT
    	    {
    	        /* 1:588: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
