/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Grammar/MorphDSL.g
 *     -                            On : 2015-03-03 12:44:49
 *     -                for the parser : MorphDSLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */
using namespace std;
/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "stdafx.h"
#include    "MorphDSLParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 	LPM_MorphDSL  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MorphDSLParserTokenNames[58+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DOUBLENUMBER",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "T_AREA",
        (ANTLR_UINT8*) "T_ATTRIBUTE",
        (ANTLR_UINT8*) "T_BOUNDARY",
        (ANTLR_UINT8*) "T_BOX",
        (ANTLR_UINT8*) "T_CLOSE",
        (ANTLR_UINT8*) "T_COMMA",
        (ANTLR_UINT8*) "T_COMPLEMENT",
        (ANTLR_UINT8*) "T_CROP",
        (ANTLR_UINT8*) "T_DAP",
        (ANTLR_UINT8*) "T_DIFERENTIALPROFILES",
        (ANTLR_UINT8*) "T_DILATE",
        (ANTLR_UINT8*) "T_DISTANCETRANSFORM",
        (ANTLR_UINT8*) "T_DMP",
        (ANTLR_UINT8*) "T_DOUBLE_QUOTE",
        (ANTLR_UINT8*) "T_EQUALS",
        (ANTLR_UINT8*) "T_ERODE",
        (ANTLR_UINT8*) "T_EXTERNAL",
        (ANTLR_UINT8*) "T_GRADIENT",
        (ANTLR_UINT8*) "T_HITMISS",
        (ANTLR_UINT8*) "T_INTERNAL",
        (ANTLR_UINT8*) "T_INTERSECTION",
        (ANTLR_UINT8*) "T_LESS_THAN",
        (ANTLR_UINT8*) "T_LOAD",
        (ANTLR_UINT8*) "T_LPAREN",
        (ANTLR_UINT8*) "T_MAPPING",
        (ANTLR_UINT8*) "T_MORE_THAN",
        (ANTLR_UINT8*) "T_MORPHOLOGICAL",
        (ANTLR_UINT8*) "T_MSLS",
        (ANTLR_UINT8*) "T_MULTIPLY",
        (ANTLR_UINT8*) "T_NEGATE",
        (ANTLR_UINT8*) "T_NORMALIZE",
        (ANTLR_UINT8*) "T_NOT_EQUAL",
        (ANTLR_UINT8*) "T_OPEN",
        (ANTLR_UINT8*) "T_RECONSTRUCTION",
        (ANTLR_UINT8*) "T_RPAREN",
        (ANTLR_UINT8*) "T_SEGMENTATION",
        (ANTLR_UINT8*) "T_STAR",
        (ANTLR_UINT8*) "T_SUBTRACT",
        (ANTLR_UINT8*) "T_TRESHOLD",
        (ANTLR_UINT8*) "T_UNION",
        (ANTLR_UINT8*) "T_WATHERSHADE",
        (ANTLR_UINT8*) "T_WITHOUT",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'AND'",
        (ANTLR_UINT8*) "'FROM'",
        (ANTLR_UINT8*) "'SELECT'",
        (ANTLR_UINT8*) "'WHERE'",
        (ANTLR_UINT8*) "'area'",
        (ANTLR_UINT8*) "'atribute'",
        (ANTLR_UINT8*) "'external_gradient'",
        (ANTLR_UINT8*) "'internal_gradient'",
        (ANTLR_UINT8*) "'okroglost'",
        (ANTLR_UINT8*) "'response'",
        (ANTLR_UINT8*) "'volument'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Grammar/MorphDSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSLParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MorphDSLParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MorphDSLParserTokenNames );


}

void
MorphDSLParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MorphDSLParser::~MorphDSLParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MorphDSLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_load_in_program453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_load_in_program453( FOLLOW_load_in_program453_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_program455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000042) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_assignment_in_program455( FOLLOW_assignment_in_program455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load467( FOLLOW_ID_in_load467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_load469_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_load469( FOLLOW_T_EQUALS_in_load469_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LOAD_in_load471_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LOAD_in_load471( FOLLOW_T_LOAD_in_load471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_load473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_load473( FOLLOW_T_LPAREN_in_load473_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load475( FOLLOW_T_DOUBLE_QUOTE_in_load475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load479( FOLLOW_ID_in_load479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load481_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load481( FOLLOW_T_DOUBLE_QUOTE_in_load481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_load483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_load483( FOLLOW_T_RPAREN_in_load483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_figurevector_in_assignment499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_figurevector_in_assignment499( FOLLOW_figurevector_in_assignment499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_assignment501_bits[]	= { ANTLR_UINT64_LIT(0x0022E971168ED420) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_assignment501( FOLLOW_T_EQUALS_in_assignment501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBB_in_assignment507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBB_in_assignment507( FOLLOW_operatorsBB_in_assignment507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGG_in_assignment513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGG_in_assignment513( FOLLOW_operatorsGG_in_assignment513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBBGG_in_assignment518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBBGG_in_assignment518( FOLLOW_operatorsBBGG_in_assignment518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBG_in_assignment523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBG_in_assignment523( FOLLOW_operatorsBG_in_assignment523_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGB_in_assignment528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGB_in_assignment528( FOLLOW_operatorsGB_in_assignment528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_vector_in_assignment533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_vector_in_assignment533( FOLLOW_vector_in_assignment533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_assignment538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_assignment538( FOLLOW_sql_in_assignment538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_figurevector549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_figurevector549( FOLLOW_ID_in_figurevector549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_53_in_sql558_bits[]	= { ANTLR_UINT64_LIT(0x0000104000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_53_in_sql558( FOLLOW_53_in_sql558_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorSql_in_sql561_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorSql_in_sql561( FOLLOW_operatorSql_in_sql561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_sql565_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_sql565( FOLLOW_ID_in_sql565_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_STAR_in_sql569_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_STAR_in_sql569( FOLLOW_T_STAR_in_sql569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_52_in_sql573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_52_in_sql573( FOLLOW_52_in_sql573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_sql575_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_sql575( FOLLOW_ID_in_sql575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_54_in_sql577_bits[]	= { ANTLR_UINT64_LIT(0x3F80000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_54_in_sql577( FOLLOW_54_in_sql577_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql579_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql579( FOLLOW_sqlWhere_in_sql579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_51_in_sql582_bits[]	= { ANTLR_UINT64_LIT(0x3F80000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_51_in_sql582( FOLLOW_51_in_sql582_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql584_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql584( FOLLOW_sqlWhere_in_sql584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorName_in_operatorSql595_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorName_in_operatorSql595( FOLLOW_operatorName_in_operatorSql595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorSql597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorSql597( FOLLOW_T_LPAREN_in_operatorSql597_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorSql599_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorSql599( FOLLOW_ID_in_operatorSql599_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorSql601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorSql601( FOLLOW_T_RPAREN_in_operatorSql601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorName610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorName610( FOLLOW_T_NORMALIZE_in_operatorName610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere619_bits[]	= { ANTLR_UINT64_LIT(0x0000008220400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere619( FOLLOW_DOUBLENUMBER_in_sqlWhere619_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere621_bits[]	= { ANTLR_UINT64_LIT(0x3F80000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere621( FOLLOW_relOp_in_sqlWhere621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlKeyword_in_sqlWhere623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlKeyword_in_sqlWhere623( FOLLOW_sqlKeyword_in_sqlWhere623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlKeyword_in_sqlWhere628_bits[]	= { ANTLR_UINT64_LIT(0x0000008220400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlKeyword_in_sqlWhere628( FOLLOW_sqlKeyword_in_sqlWhere628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere630( FOLLOW_relOp_in_sqlWhere630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere632( FOLLOW_DOUBLENUMBER_in_sqlWhere632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMPLEMENT_in_operatorsBB718_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMPLEMENT_in_operatorsBB718( FOLLOW_T_COMPLEMENT_in_operatorsBB718_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB720( FOLLOW_T_LPAREN_in_operatorsBB720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB724_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB724( FOLLOW_ID_in_operatorsBB724_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB726( FOLLOW_T_RPAREN_in_operatorsBB726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_UNION_in_operatorsBB733_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_UNION_in_operatorsBB733( FOLLOW_T_UNION_in_operatorsBB733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB735( FOLLOW_T_LPAREN_in_operatorsBB735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB739( FOLLOW_ID_in_operatorsBB739_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB741( FOLLOW_T_COMMA_in_operatorsBB741_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB745_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB745( FOLLOW_ID_in_operatorsBB745_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB747( FOLLOW_T_RPAREN_in_operatorsBB747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERSECTION_in_operatorsBB754_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERSECTION_in_operatorsBB754( FOLLOW_T_INTERSECTION_in_operatorsBB754_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB756( FOLLOW_T_LPAREN_in_operatorsBB756_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB760( FOLLOW_ID_in_operatorsBB760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB762( FOLLOW_T_COMMA_in_operatorsBB762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB766_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB766( FOLLOW_ID_in_operatorsBB766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB768( FOLLOW_T_RPAREN_in_operatorsBB768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WITHOUT_in_operatorsBB775_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WITHOUT_in_operatorsBB775( FOLLOW_T_WITHOUT_in_operatorsBB775_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB777( FOLLOW_T_LPAREN_in_operatorsBB777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB781( FOLLOW_ID_in_operatorsBB781_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB783( FOLLOW_T_COMMA_in_operatorsBB783_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB787_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB787( FOLLOW_ID_in_operatorsBB787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB789( FOLLOW_T_RPAREN_in_operatorsBB789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_HITMISS_in_operatorsBB796_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_HITMISS_in_operatorsBB796( FOLLOW_T_HITMISS_in_operatorsBB796_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB798( FOLLOW_T_LPAREN_in_operatorsBB798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB802( FOLLOW_ID_in_operatorsBB802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB804( FOLLOW_T_COMMA_in_operatorsBB804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB808_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB808( FOLLOW_ID_in_operatorsBB808_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB810( FOLLOW_T_RPAREN_in_operatorsBB810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOUNDARY_in_operatorsBB817_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOUNDARY_in_operatorsBB817( FOLLOW_T_BOUNDARY_in_operatorsBB817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB819( FOLLOW_T_LPAREN_in_operatorsBB819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB823_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB823( FOLLOW_ID_in_operatorsBB823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB825( FOLLOW_T_RPAREN_in_operatorsBB825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NEGATE_in_operatorsGG843_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NEGATE_in_operatorsGG843( FOLLOW_T_NEGATE_in_operatorsGG843_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG845( FOLLOW_T_LPAREN_in_operatorsGG845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG849_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG849( FOLLOW_ID_in_operatorsGG849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG851( FOLLOW_T_RPAREN_in_operatorsGG851_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorsGG858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorsGG858( FOLLOW_T_NORMALIZE_in_operatorsGG858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG865_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG865( FOLLOW_T_MULTIPLY_in_operatorsGG865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG867_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG867( FOLLOW_T_LPAREN_in_operatorsGG867_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG871( FOLLOW_ID_in_operatorsGG871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG873( FOLLOW_T_COMMA_in_operatorsGG873_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG877_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG877( FOLLOW_DOUBLENUMBER_in_operatorsGG877_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG879( FOLLOW_T_RPAREN_in_operatorsGG879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG886_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG886( FOLLOW_T_MULTIPLY_in_operatorsGG886_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG888( FOLLOW_T_LPAREN_in_operatorsGG888_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG892( FOLLOW_DOUBLENUMBER_in_operatorsGG892_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG894_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG894( FOLLOW_T_COMMA_in_operatorsGG894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG898_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG898( FOLLOW_ID_in_operatorsGG898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG900( FOLLOW_T_RPAREN_in_operatorsGG900_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG907_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG907( FOLLOW_T_MULTIPLY_in_operatorsGG907_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG909_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG909( FOLLOW_T_LPAREN_in_operatorsGG909_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG913( FOLLOW_ID_in_operatorsGG913_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG915_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG915( FOLLOW_T_COMMA_in_operatorsGG915_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG919_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG919( FOLLOW_ID_in_operatorsGG919_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG921( FOLLOW_T_RPAREN_in_operatorsGG921_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CROP_in_operatorsGG929_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CROP_in_operatorsGG929( FOLLOW_T_CROP_in_operatorsGG929_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG931( FOLLOW_T_LPAREN_in_operatorsGG931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG935( FOLLOW_ID_in_operatorsGG935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG937_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG937( FOLLOW_T_COMMA_in_operatorsGG937_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_interval_in_operatorsGG939_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_interval_in_operatorsGG939( FOLLOW_interval_in_operatorsGG939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG941( FOLLOW_T_RPAREN_in_operatorsGG941_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SUBTRACT_in_operatorsGG949_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SUBTRACT_in_operatorsGG949( FOLLOW_T_SUBTRACT_in_operatorsGG949_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG951( FOLLOW_T_LPAREN_in_operatorsGG951_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG955( FOLLOW_ID_in_operatorsGG955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG957_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG957( FOLLOW_T_COMMA_in_operatorsGG957_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG961_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG961( FOLLOW_ID_in_operatorsGG961_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG963_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG963( FOLLOW_T_RPAREN_in_operatorsGG963_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG971_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG971( FOLLOW_T_GRADIENT_in_operatorsGG971_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG973_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG973( FOLLOW_T_LPAREN_in_operatorsGG973_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_in_operatorsGG975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_in_operatorsGG975( FOLLOW_T_INTERNAL_in_operatorsGG975_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG977( FOLLOW_T_COMMA_in_operatorsGG977_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG981_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG981( FOLLOW_ID_in_operatorsGG981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG983_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG983( FOLLOW_T_RPAREN_in_operatorsGG983_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG991_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG991( FOLLOW_T_GRADIENT_in_operatorsGG991_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG993_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG993( FOLLOW_T_LPAREN_in_operatorsGG993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_in_operatorsGG995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_in_operatorsGG995( FOLLOW_T_EXTERNAL_in_operatorsGG995_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG997( FOLLOW_T_COMMA_in_operatorsGG997_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1001_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1001( FOLLOW_ID_in_operatorsGG1001_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1003_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1003( FOLLOW_T_RPAREN_in_operatorsGG1003_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1011_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1011( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1013_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1013( FOLLOW_T_LPAREN_in_operatorsGG1013_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1015_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1015( FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1015_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1017_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1017( FOLLOW_T_COMMA_in_operatorsGG1017_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1021_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1021( FOLLOW_ID_in_operatorsGG1021_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1023( FOLLOW_T_COMMA_in_operatorsGG1023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1027_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1027( FOLLOW_ID_in_operatorsGG1027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1029( FOLLOW_T_RPAREN_in_operatorsGG1029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1037_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1037( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1037_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1039( FOLLOW_T_LPAREN_in_operatorsGG1039_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_in_operatorsGG1041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_in_operatorsGG1041( FOLLOW_T_ATTRIBUTE_in_operatorsGG1041_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1043( FOLLOW_T_COMMA_in_operatorsGG1043_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1047( FOLLOW_ID_in_operatorsGG1047_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1049( FOLLOW_T_COMMA_in_operatorsGG1049_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1053_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1053( FOLLOW_ID_in_operatorsGG1053_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1055_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1055( FOLLOW_T_RPAREN_in_operatorsGG1055_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1063_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1063( FOLLOW_T_MAPPING_in_operatorsGG1063_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1065( FOLLOW_T_LPAREN_in_operatorsGG1065_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DMP_in_operatorsGG1067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DMP_in_operatorsGG1067( FOLLOW_T_DMP_in_operatorsGG1067_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1069( FOLLOW_T_COMMA_in_operatorsGG1069_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1073( FOLLOW_ID_in_operatorsGG1073_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1075( FOLLOW_T_COMMA_in_operatorsGG1075_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1079_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1079( FOLLOW_ID_in_operatorsGG1079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1083_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1083( FOLLOW_T_RPAREN_in_operatorsGG1083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1091_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1091( FOLLOW_T_MAPPING_in_operatorsGG1091_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1093_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1093( FOLLOW_T_LPAREN_in_operatorsGG1093_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DAP_in_operatorsGG1095_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DAP_in_operatorsGG1095( FOLLOW_T_DAP_in_operatorsGG1095_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1097_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1097( FOLLOW_T_COMMA_in_operatorsGG1097_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1101_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1101( FOLLOW_ID_in_operatorsGG1101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1103_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1103( FOLLOW_T_COMMA_in_operatorsGG1103_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1107_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1107( FOLLOW_ID_in_operatorsGG1107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1111_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1111( FOLLOW_T_RPAREN_in_operatorsGG1111_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1119_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1119( FOLLOW_T_SEGMENTATION_in_operatorsGG1119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1121_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1121( FOLLOW_T_LPAREN_in_operatorsGG1121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1123( FOLLOW_T_MSLS_in_operatorsGG1123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1125( FOLLOW_T_COMMA_in_operatorsGG1125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1129( FOLLOW_ID_in_operatorsGG1129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1131( FOLLOW_T_COMMA_in_operatorsGG1131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1135_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1135( FOLLOW_ID_in_operatorsGG1135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1137( FOLLOW_T_RPAREN_in_operatorsGG1137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1145_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1145( FOLLOW_T_SEGMENTATION_in_operatorsGG1145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1147_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1147( FOLLOW_T_LPAREN_in_operatorsGG1147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1149( FOLLOW_T_MSLS_in_operatorsGG1149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1151( FOLLOW_T_COMMA_in_operatorsGG1151_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1155_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1155( FOLLOW_ID_in_operatorsGG1155_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1157( FOLLOW_T_COMMA_in_operatorsGG1157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1161_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1161( FOLLOW_ID_in_operatorsGG1161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1163( FOLLOW_T_RPAREN_in_operatorsGG1163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1171_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1171( FOLLOW_T_SEGMENTATION_in_operatorsGG1171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1173_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1173( FOLLOW_T_LPAREN_in_operatorsGG1173_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1175_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1175( FOLLOW_T_WATHERSHADE_in_operatorsGG1175_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1177( FOLLOW_T_COMMA_in_operatorsGG1177_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1181_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1181( FOLLOW_ID_in_operatorsGG1181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1183_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1183( FOLLOW_T_RPAREN_in_operatorsGG1183_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1195_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1195( FOLLOW_T_SEGMENTATION_in_operatorsGG1195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1197_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1197( FOLLOW_T_LPAREN_in_operatorsGG1197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1199( FOLLOW_T_WATHERSHADE_in_operatorsGG1199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1201( FOLLOW_T_COMMA_in_operatorsGG1201_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1205( FOLLOW_ID_in_operatorsGG1205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1207( FOLLOW_T_COMMA_in_operatorsGG1207_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1211_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1211( FOLLOW_ID_in_operatorsGG1211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1213( FOLLOW_T_RPAREN_in_operatorsGG1213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1235( FOLLOW_DOUBLENUMBER_in_interval1235_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_interval1237_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_interval1237( FOLLOW_T_COMMA_in_interval1237_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1241( FOLLOW_DOUBLENUMBER_in_interval1241_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBOX_in_operatorsBBGG1256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBOX_in_operatorsBBGG1256( FOLLOW_operatorsBOX_in_operatorsBBGG1256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1262( FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_operatorsBBGG1268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_operatorsBBGG1268( FOLLOW_operatorsAREA_in_operatorsBBGG1268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1274_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1274( FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1274_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsBOX1291_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsBOX1291( FOLLOW_T_ERODE_in_operatorsBOX1291_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1293_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1293( FOLLOW_T_LPAREN_in_operatorsBOX1293_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1295_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1295( FOLLOW_T_BOX_in_operatorsBOX1295_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1297( FOLLOW_T_LPAREN_in_operatorsBOX1297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1301_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1301( FOLLOW_DOUBLENUMBER_in_operatorsBOX1301_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1303( FOLLOW_T_RPAREN_in_operatorsBOX1303_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1305( FOLLOW_T_COMMA_in_operatorsBOX1305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1309_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1309( FOLLOW_ID_in_operatorsBOX1309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1311_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1311( FOLLOW_T_RPAREN_in_operatorsBOX1311_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsBOX1319_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsBOX1319( FOLLOW_T_DILATE_in_operatorsBOX1319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1321_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1321( FOLLOW_T_LPAREN_in_operatorsBOX1321_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1323_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1323( FOLLOW_T_BOX_in_operatorsBOX1323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1325( FOLLOW_T_LPAREN_in_operatorsBOX1325_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1329_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1329( FOLLOW_DOUBLENUMBER_in_operatorsBOX1329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1331( FOLLOW_T_RPAREN_in_operatorsBOX1331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1333( FOLLOW_T_COMMA_in_operatorsBOX1333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1337_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1337( FOLLOW_ID_in_operatorsBOX1337_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1339_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1339( FOLLOW_T_RPAREN_in_operatorsBOX1339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsBOX1346_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsBOX1346( FOLLOW_T_OPEN_in_operatorsBOX1346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1348_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1348( FOLLOW_T_LPAREN_in_operatorsBOX1348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1350_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1350( FOLLOW_T_BOX_in_operatorsBOX1350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1352( FOLLOW_T_LPAREN_in_operatorsBOX1352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1356_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1356( FOLLOW_DOUBLENUMBER_in_operatorsBOX1356_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1358_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1358( FOLLOW_T_RPAREN_in_operatorsBOX1358_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1360( FOLLOW_T_COMMA_in_operatorsBOX1360_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1364_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1364( FOLLOW_ID_in_operatorsBOX1364_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1366( FOLLOW_T_RPAREN_in_operatorsBOX1366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsBOX1375_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsBOX1375( FOLLOW_T_CLOSE_in_operatorsBOX1375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1377_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1377( FOLLOW_T_LPAREN_in_operatorsBOX1377_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1379_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1379( FOLLOW_T_BOX_in_operatorsBOX1379_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1381( FOLLOW_T_LPAREN_in_operatorsBOX1381_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1385_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1385( FOLLOW_DOUBLENUMBER_in_operatorsBOX1385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1387( FOLLOW_T_RPAREN_in_operatorsBOX1387_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1389( FOLLOW_T_COMMA_in_operatorsBOX1389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1393_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1393( FOLLOW_ID_in_operatorsBOX1393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1395_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1395( FOLLOW_T_RPAREN_in_operatorsBOX1395_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1422_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1422( FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1424_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1424( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1426( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1428_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1428( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1428_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1432( FOLLOW_ID_in_operatorsRECONSTRUCTION1432_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1434( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1434_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1438_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1438( FOLLOW_ID_in_operatorsRECONSTRUCTION1438_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1440_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1440( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1440_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1450_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1450( FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1450_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1452_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1452( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1454( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1454_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1456_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1456( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1456_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1460( FOLLOW_ID_in_operatorsRECONSTRUCTION1460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1462( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1462_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1466_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1466( FOLLOW_ID_in_operatorsRECONSTRUCTION1466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1468_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1468( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1468_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1475_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1475( FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1477_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1477( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1477_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1479( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1481( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1483_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1483( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1485( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1489_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1489( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1491( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1493( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1497_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1497( FOLLOW_ID_in_operatorsRECONSTRUCTION1497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1499( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1507_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1507( FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1509_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1509( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1509_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1511( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1513( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1515_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1515( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1515_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1517( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1517_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1521_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1521( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1521_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1523( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1523_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1525( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1525_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1529_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1529( FOLLOW_ID_in_operatorsRECONSTRUCTION1529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1531( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1531_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsAREA1549_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsAREA1549( FOLLOW_T_OPEN_in_operatorsAREA1549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1551_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1551( FOLLOW_T_LPAREN_in_operatorsAREA1551_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1553( FOLLOW_T_AREA_in_operatorsAREA1553_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1555_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1555( FOLLOW_T_COMMA_in_operatorsAREA1555_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1559( FOLLOW_DOUBLENUMBER_in_operatorsAREA1559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1561( FOLLOW_T_COMMA_in_operatorsAREA1561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1565_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1565( FOLLOW_ID_in_operatorsAREA1565_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1567( FOLLOW_T_RPAREN_in_operatorsAREA1567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsAREA1574_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsAREA1574( FOLLOW_T_CLOSE_in_operatorsAREA1574_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1576( FOLLOW_T_LPAREN_in_operatorsAREA1576_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1578( FOLLOW_T_AREA_in_operatorsAREA1578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1580_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1580( FOLLOW_T_COMMA_in_operatorsAREA1580_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1584( FOLLOW_DOUBLENUMBER_in_operatorsAREA1584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1586( FOLLOW_T_COMMA_in_operatorsAREA1586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1590_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1590( FOLLOW_ID_in_operatorsAREA1590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1592( FOLLOW_T_RPAREN_in_operatorsAREA1592_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsATTRIBUTE1609_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsATTRIBUTE1609( FOLLOW_T_OPEN_in_operatorsATTRIBUTE1609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1611( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1611_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1615( FOLLOW_ID_in_operatorsATTRIBUTE1615_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1617( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1621( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1623( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1627_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1627( FOLLOW_ID_in_operatorsATTRIBUTE1627_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1629_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1629( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1629_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1636_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1636( FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1638( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1642( FOLLOW_ID_in_operatorsATTRIBUTE1642_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1644( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1644_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1648( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1650( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1654_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1654( FOLLOW_ID_in_operatorsATTRIBUTE1654_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1656_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1656( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1656_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1670_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1670( FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1670_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBG1672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBG1672( FOLLOW_T_LPAREN_in_operatorsBG1672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBG1674_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBG1674( FOLLOW_ID_in_operatorsBG1674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBG1676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBG1676( FOLLOW_T_RPAREN_in_operatorsBG1676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_TRESHOLD_in_operatorsGB1686_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_TRESHOLD_in_operatorsGB1686( FOLLOW_T_TRESHOLD_in_operatorsGB1686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGB1688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGB1688( FOLLOW_T_LPAREN_in_operatorsGB1688_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGB1690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGB1690( FOLLOW_DOUBLENUMBER_in_operatorsGB1690_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGB1692_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGB1692( FOLLOW_T_COMMA_in_operatorsGB1692_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGB1694_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGB1694( FOLLOW_ID_in_operatorsGB1694_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGB1696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGB1696( FOLLOW_T_RPAREN_in_operatorsGB1696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1747( FOLLOW_DOUBLENUMBER_in_vector1747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_vector1751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_vector1751( FOLLOW_T_COMMA_in_vector1751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1764( FOLLOW_DOUBLENUMBER_in_vector1764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred39_MorphDSL1119_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred39_MorphDSL1119( FOLLOW_T_SEGMENTATION_in_synpred39_MorphDSL1119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred39_MorphDSL1121_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred39_MorphDSL1121( FOLLOW_T_LPAREN_in_synpred39_MorphDSL1121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred39_MorphDSL1123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred39_MorphDSL1123( FOLLOW_T_MSLS_in_synpred39_MorphDSL1123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred39_MorphDSL1125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred39_MorphDSL1125( FOLLOW_T_COMMA_in_synpred39_MorphDSL1125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred39_MorphDSL1129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred39_MorphDSL1129( FOLLOW_ID_in_synpred39_MorphDSL1129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred39_MorphDSL1131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred39_MorphDSL1131( FOLLOW_T_COMMA_in_synpred39_MorphDSL1131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred39_MorphDSL1135_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred39_MorphDSL1135( FOLLOW_ID_in_synpred39_MorphDSL1135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred39_MorphDSL1137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred39_MorphDSL1137( FOLLOW_T_RPAREN_in_synpred39_MorphDSL1137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred40_MorphDSL1145_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred40_MorphDSL1145( FOLLOW_T_SEGMENTATION_in_synpred40_MorphDSL1145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred40_MorphDSL1147_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred40_MorphDSL1147( FOLLOW_T_LPAREN_in_synpred40_MorphDSL1147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred40_MorphDSL1149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred40_MorphDSL1149( FOLLOW_T_MSLS_in_synpred40_MorphDSL1149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred40_MorphDSL1151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred40_MorphDSL1151( FOLLOW_T_COMMA_in_synpred40_MorphDSL1151_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred40_MorphDSL1155_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred40_MorphDSL1155( FOLLOW_ID_in_synpred40_MorphDSL1155_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred40_MorphDSL1157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred40_MorphDSL1157( FOLLOW_T_COMMA_in_synpred40_MorphDSL1157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred40_MorphDSL1161_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred40_MorphDSL1161( FOLLOW_ID_in_synpred40_MorphDSL1161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred40_MorphDSL1163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred40_MorphDSL1163( FOLLOW_T_RPAREN_in_synpred40_MorphDSL1163_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * Grammar/MorphDSL.g:173:1: program : load ( assignment )+ ;
 */
void
MorphDSLParser::program()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */

     
    		currentFigure = NULL;
            /*
    		interval2 = NULL;
    		marker1 = NULL;
    		marker2 = NULL;
            */
    		outputFigureName = "";
    		imageCounter = 0;
    	

 
    {
        // Grammar/MorphDSL.g:181:3: ( load ( assignment )+ )
        // Grammar/MorphDSL.g:182:3: load ( assignment )+
        {
            this->followPush(FOLLOW_load_in_program453);
            load();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:182:8: ( assignment )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // Grammar/MorphDSL.g:182:8: assignment
            	        {
            	            this->followPush(FOLLOW_assignment_in_program455);
            	            assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MorphDSLParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start load
 * Grammar/MorphDSL.g:184:1: load : imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')' ;
 */
void
MorphDSLParser::load()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    imeSpremenljivke;
    const CommonTokenType*    imeSlike;

    /* Initialize rule variables
     */

    imeSpremenljivke       = NULL;
    imeSlike       = NULL;


 
    {
        // Grammar/MorphDSL.g:185:2: (imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')' )
        // Grammar/MorphDSL.g:185:4: imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')'
        {
            imeSpremenljivke =  this->matchToken(ID, &FOLLOW_ID_in_load467);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_load469);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LOAD, &FOLLOW_T_LOAD_in_load471);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_load473);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load475);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            imeSlike =  this->matchToken(ID, &FOLLOW_ID_in_load479);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load481);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_load483);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                		this->currentFigure = imeSpremenljivke;
                		loadImpl((imeSlike->getText()), (imeSpremenljivke->getText()));
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloadEx; /* Prevent compiler warnings */
    ruleloadEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end load */

/**
 * $ANTLR start assignment
 * Grammar/MorphDSL.g:192:1: assignment : figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql ) ;
 */
void
MorphDSLParser::assignment()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:192:12: ( figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql ) )
        // Grammar/MorphDSL.g:193:2: figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql )
        {
            this->followPush(FOLLOW_figurevector_in_assignment499);
            figurevector();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_assignment501);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:194:2: ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql )
            {
                int alt2=7;
                switch ( this->LA(1) )
                {
                case T_BOUNDARY:
                case T_COMPLEMENT:
                case T_HITMISS:
                case T_INTERSECTION:
                case T_UNION:
                case T_WITHOUT:
                	{
                		alt2=1;
                	}
                    break;
                case T_CROP:
                case T_DIFERENTIALPROFILES:
                case T_GRADIENT:
                case T_MAPPING:
                case T_MULTIPLY:
                case T_NEGATE:
                case T_NORMALIZE:
                case T_SEGMENTATION:
                case T_SUBTRACT:
                	{
                		alt2=2;
                	}
                    break;
                case T_CLOSE:
                case T_DILATE:
                case T_ERODE:
                case T_OPEN:
                	{
                		alt2=3;
                	}
                    break;
                case T_DISTANCETRANSFORM:
                	{
                		alt2=4;
                	}
                    break;
                case T_TRESHOLD:
                	{
                		alt2=5;
                	}
                    break;
                case DOUBLENUMBER:
                	{
                		alt2=6;
                	}
                    break;
                case 53:
                	{
                		alt2=7;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleassignmentEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:194:4: operatorsBB
            	    {
            	        this->followPush(FOLLOW_operatorsBB_in_assignment507);
            	        operatorsBB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:195:4: operatorsGG
            	    {
            	        this->followPush(FOLLOW_operatorsGG_in_assignment513);
            	        operatorsGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:196:4: operatorsBBGG
            	    {
            	        this->followPush(FOLLOW_operatorsBBGG_in_assignment518);
            	        operatorsBBGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:197:4: operatorsBG
            	    {
            	        this->followPush(FOLLOW_operatorsBG_in_assignment523);
            	        operatorsBG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:198:4: operatorsGB
            	    {
            	        this->followPush(FOLLOW_operatorsGB_in_assignment528);
            	        operatorsGB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:199:4: vector
            	    {
            	        this->followPush(FOLLOW_vector_in_assignment533);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:200:4: sql
            	    {
            	        this->followPush(FOLLOW_sql_in_assignment538);
            	        sql();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start figurevector
 * Grammar/MorphDSL.g:203:1: figurevector : ID ;
 */
void
MorphDSLParser::figurevector()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID1;

    /* Initialize rule variables
     */

    ID1       = NULL;


 
    {
        // Grammar/MorphDSL.g:203:14: ( ID )
        // Grammar/MorphDSL.g:203:16: ID
        {
            ID1 =  this->matchToken(ID, &FOLLOW_ID_in_figurevector549);
            if  (this->hasException())
            {
                goto rulefigurevectorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 currentFigure = ID1; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefigurevectorEx; /* Prevent compiler warnings */
    rulefigurevectorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end figurevector */

/**
 * $ANTLR start sql
 * Grammar/MorphDSL.g:205:1: sql : 'SELECT' ( operatorSql | ID | '*' ) 'FROM' ID 'WHERE' sqlWhere ( 'AND' sqlWhere )* ;
 */
void
MorphDSLParser::sql()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:205:4: ( 'SELECT' ( operatorSql | ID | '*' ) 'FROM' ID 'WHERE' sqlWhere ( 'AND' sqlWhere )* )
        // Grammar/MorphDSL.g:205:6: 'SELECT' ( operatorSql | ID | '*' ) 'FROM' ID 'WHERE' sqlWhere ( 'AND' sqlWhere )*
        {
             this->matchToken(53, &FOLLOW_53_in_sql558);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:205:15: ( operatorSql | ID | '*' )
            {
                int alt3=3;
                switch ( this->LA(1) )
                {
                case T_NORMALIZE:
                	{
                		alt3=1;
                	}
                    break;
                case ID:
                	{
                		alt3=2;
                	}
                    break;
                case T_STAR:
                	{
                		alt3=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 3 );
                    ex->set_state( 0 );


                    goto rulesqlEx;

                }

                switch (alt3)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:205:16: operatorSql
            	    {
            	        this->followPush(FOLLOW_operatorSql_in_sql561);
            	        operatorSql();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:205:30: ID
            	    {
            	         this->matchToken(ID, &FOLLOW_ID_in_sql565);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:205:35: '*'
            	    {
            	         this->matchToken(T_STAR, &FOLLOW_T_STAR_in_sql569);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(52, &FOLLOW_52_in_sql573);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(ID, &FOLLOW_ID_in_sql575);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(54, &FOLLOW_54_in_sql577);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_sqlWhere_in_sql579);
            sqlWhere();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:205:68: ( 'AND' sqlWhere )*

            for (;;)
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case 51:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:205:69: 'AND' sqlWhere
            	    {
            	         this->matchToken(51, &FOLLOW_51_in_sql582);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_sqlWhere_in_sql584);
            	        sqlWhere();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlEx; /* Prevent compiler warnings */
    rulesqlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end sql */

/**
 * $ANTLR start operatorSql
 * Grammar/MorphDSL.g:207:1: operatorSql : operatorName '(' ID ')' ;
 */
void
MorphDSLParser::operatorSql()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:208:2: ( operatorName '(' ID ')' )
        // Grammar/MorphDSL.g:208:4: operatorName '(' ID ')'
        {
            this->followPush(FOLLOW_operatorName_in_operatorSql595);
            operatorName();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleoperatorSqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorSql597);
            if  (this->hasException())
            {
                goto ruleoperatorSqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(ID, &FOLLOW_ID_in_operatorSql599);
            if  (this->hasException())
            {
                goto ruleoperatorSqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorSql601);
            if  (this->hasException())
            {
                goto ruleoperatorSqlEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorSqlEx; /* Prevent compiler warnings */
    ruleoperatorSqlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorSql */

/**
 * $ANTLR start operatorName
 * Grammar/MorphDSL.g:211:1: operatorName : 'normalize' ;
 */
void
MorphDSLParser::operatorName()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:211:13: ( 'normalize' )
        // Grammar/MorphDSL.g:211:15: 'normalize'
        {
             this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorName610);
            if  (this->hasException())
            {
                goto ruleoperatorNameEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorNameEx; /* Prevent compiler warnings */
    ruleoperatorNameEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorName */

/**
 * $ANTLR start sqlWhere
 * Grammar/MorphDSL.g:213:1: sqlWhere : ( DOUBLENUMBER relOp sqlKeyword | sqlKeyword relOp DOUBLENUMBER );
 */
void
MorphDSLParser::sqlWhere()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  Grammar/MorphDSL.g:214:2: ( DOUBLENUMBER relOp sqlKeyword | sqlKeyword relOp DOUBLENUMBER )

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case DOUBLENUMBER:
            	{
            		alt5=1;
            	}
                break;
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            	{
            		alt5=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto rulesqlWhereEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:214:4: DOUBLENUMBER relOp sqlKeyword
        	    {
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere619);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere621);
        	        relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_sqlKeyword_in_sqlWhere623);
        	        sqlKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:215:4: sqlKeyword relOp DOUBLENUMBER
        	    {
        	        this->followPush(FOLLOW_sqlKeyword_in_sqlWhere628);
        	        sqlKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere630);
        	        relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere632);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereEx; /* Prevent compiler warnings */
    rulesqlWhereEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end sqlWhere */

/**
 * $ANTLR start relOp
 * Grammar/MorphDSL.g:218:1: relOp : ( '>' | '<' | '=' | '!=' );
 */
void
MorphDSLParser::relOp()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:219:2: ( '>' | '<' | '=' | '!=' )
        // Grammar/MorphDSL.g:
        {
            if ( this->LA(1) == T_EQUALS || this->LA(1) == T_LESS_THAN || this->LA(1) == T_MORE_THAN || this->LA(1) == T_NOT_EQUAL )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulerelOpEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulerelOpEx; /* Prevent compiler warnings */
    rulerelOpEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end relOp */

/**
 * $ANTLR start sqlKeyword
 * Grammar/MorphDSL.g:225:1: sqlKeyword : ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' );
 */
void
MorphDSLParser::sqlKeyword()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:226:2: ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= 55) && (this->LA(1) <= 61)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulesqlKeywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlKeywordEx; /* Prevent compiler warnings */
    rulesqlKeywordEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end sqlKeyword */

/**
 * $ANTLR start operatorsBB
 * Grammar/MorphDSL.g:235:1: operatorsBB : ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    cId;
    const CommonTokenType*    uId1;
    const CommonTokenType*    uId2;
    const CommonTokenType*    iId1;
    const CommonTokenType*    iId2;
    const CommonTokenType*    wId1;
    const CommonTokenType*    wId2;
    const CommonTokenType*    hId1;
    const CommonTokenType*    hId2;
    const CommonTokenType*    bId;

    /* Initialize rule variables
     */

    cId       = NULL;
    uId1       = NULL;
    uId2       = NULL;
    iId1       = NULL;
    iId2       = NULL;
    wId1       = NULL;
    wId2       = NULL;
    hId1       = NULL;
    hId2       = NULL;
    bId       = NULL;


 
    {
        // Grammar/MorphDSL.g:235:13: ( ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) )
        // Grammar/MorphDSL.g:236:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
        {
            // Grammar/MorphDSL.g:236:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
            {
                int alt6=6;
                switch ( this->LA(1) )
                {
                case T_COMPLEMENT:
                	{
                		alt6=1;
                	}
                    break;
                case T_UNION:
                	{
                		alt6=2;
                	}
                    break;
                case T_INTERSECTION:
                	{
                		alt6=3;
                	}
                    break;
                case T_WITHOUT:
                	{
                		alt6=4;
                	}
                    break;
                case T_HITMISS:
                	{
                		alt6=5;
                	}
                    break;
                case T_BOUNDARY:
                	{
                		alt6=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:236:4: 'complement' '(' cId= ID ')'
            	    {
            	         this->matchToken(T_COMPLEMENT, &FOLLOW_T_COMPLEMENT_in_operatorsBB718);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB720);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB724);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB726);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            	complementImpl((cId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:237:4: 'union' '(' uId1= ID ',' uId2= ID ')'
            	    {
            	         this->matchToken(T_UNION, &FOLLOW_T_UNION_in_operatorsBB733);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB735);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB739);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB741);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB745);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB747);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             unionImpl((uId1->getText()), (uId2->getText())); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:238:4: 'intersection' '(' iId1= ID ',' iId2= ID ')'
            	    {
            	         this->matchToken(T_INTERSECTION, &FOLLOW_T_INTERSECTION_in_operatorsBB754);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB756);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB760);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB762);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB766);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB768);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             intersectionImpl((iId1->getText()), (iId2->getText())); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:239:4: 'without' '(' wId1= ID ',' wId2= ID ')'
            	    {
            	         this->matchToken(T_WITHOUT, &FOLLOW_T_WITHOUT_in_operatorsBB775);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB777);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB781);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB783);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB787);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB789);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             withoutImpl((wId1->getText()), (wId2->getText())); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:240:4: 'hitmiss' '(' hId1= ID ',' hId2= ID ')'
            	    {
            	         this->matchToken(T_HITMISS, &FOLLOW_T_HITMISS_in_operatorsBB796);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB798);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB802);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB804);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB808);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB810);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             hitMissImpl((hId1->getText()), (hId2->getText())); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:241:4: 'boundary' '(' bId= ID ')'
            	    {
            	         this->matchToken(T_BOUNDARY, &FOLLOW_T_BOUNDARY_in_operatorsBB817);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB819);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        bId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB823);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB825);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             boundaryImpl((bId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBEx; /* Prevent compiler warnings */
    ruleoperatorsBBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBB */

/**
 * $ANTLR start operatorsGG
 * Grammar/MorphDSL.g:244:1: operatorsGG : ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ) ;
 */
void
MorphDSLParser::operatorsGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    nId;
    const CommonTokenType*    mId;
    const CommonTokenType*    mDbl;
    const CommonTokenType*    mDbl2;
    const CommonTokenType*    mId2;
    const CommonTokenType*    mId3;
    const CommonTokenType*    mId4;
    const CommonTokenType*    cId;
    const CommonTokenType*    sId1;
    const CommonTokenType*    sId2;
    const CommonTokenType*    giId;
    const CommonTokenType*    geId;
    const CommonTokenType*    dpmId1;
    const CommonTokenType*    dpmId2;
    const CommonTokenType*    dpaId1;
    const CommonTokenType*    dpaId2;
    const CommonTokenType*    dmpId1;
    const CommonTokenType*    dmpId2;
    const CommonTokenType*    dapId1;
    const CommonTokenType*    dapId2;
    const CommonTokenType*    msls_1_Id1;
    const CommonTokenType*    msls_1_Id2;
    const CommonTokenType*    msls_2_Id1;
    const CommonTokenType*    msls_2_Id2;
    const CommonTokenType*    watershadeId;
    const CommonTokenType*    watershadeMarkerId2;
    const CommonTokenType*    watershadeMarkerId1;
    MorphDSLParser_interval_return interval2;
    typedef	MorphDSLParser_interval_return RETURN_TYPE_interval2;

    /* Initialize rule variables
     */

    nId       = NULL;
    mId       = NULL;
    mDbl       = NULL;
    mDbl2       = NULL;
    mId2       = NULL;
    mId3       = NULL;
    mId4       = NULL;
    cId       = NULL;
    sId1       = NULL;
    sId2       = NULL;
    giId       = NULL;
    geId       = NULL;
    dpmId1       = NULL;
    dpmId2       = NULL;
    dpaId1       = NULL;
    dpaId2       = NULL;
    dmpId1       = NULL;
    dmpId2       = NULL;
    dapId1       = NULL;
    dapId2       = NULL;
    msls_1_Id1       = NULL;
    msls_1_Id2       = NULL;
    msls_2_Id1       = NULL;
    msls_2_Id2       = NULL;
    watershadeId       = NULL;
    watershadeMarkerId2       = NULL;
    watershadeMarkerId1       = NULL;


 
    {
        // Grammar/MorphDSL.g:244:13: ( ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ) )
        // Grammar/MorphDSL.g:245:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
        {
            // Grammar/MorphDSL.g:245:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
            {
                int alt7=17;
                switch ( this->LA(1) )
                {
                case T_NEGATE:
                	{
                		alt7=1;
                	}
                    break;
                case T_NORMALIZE:
                	{
                		alt7=2;
                	}
                    break;
                case T_MULTIPLY:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case DOUBLENUMBER:
                									{
                										alt7=3;
                									}
                								    break;
                								case ID:
                									{
                										alt7=5;
                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 7 );
                								    ex->set_state( 25 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 7 );
                						    ex->set_state( 15 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case DOUBLENUMBER:
                					{
                						alt7=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 7 );
                				    ex->set_state( 10 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 7 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_CROP:
                	{
                		alt7=6;
                	}
                    break;
                case T_SUBTRACT:
                	{
                		alt7=7;
                	}
                    break;
                case T_GRADIENT:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_INTERNAL:
                					{
                						alt7=8;
                					}
                				    break;
                				case T_EXTERNAL:
                					{
                						alt7=9;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 7 );
                				    ex->set_state( 11 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 7 );
                		    ex->set_state( 6 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_DIFERENTIALPROFILES:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MORPHOLOGICAL:
                					{
                						alt7=10;
                					}
                				    break;
                				case T_ATTRIBUTE:
                					{
                						alt7=11;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 7 );
                				    ex->set_state( 12 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 7 );
                		    ex->set_state( 7 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_MAPPING:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_DMP:
                					{
                						alt7=12;
                					}
                				    break;
                				case T_DAP:
                					{
                						alt7=13;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 7 );
                				    ex->set_state( 13 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 7 );
                		    ex->set_state( 8 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_SEGMENTATION:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MSLS:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																{
                																    int LA7_36 = this->LA(9);
                																    if ( (this->msynpred( antlr3::ClassForwarder<synpred39_MorphDSL>() )))
                																    {
                																        alt7=14;
                																    }
                																    else if ( (this->msynpred( antlr3::ClassForwarder<synpred40_MorphDSL>() )))
                																    {
                																        alt7=15;
                																    }
                																    else
                																    {
                																        if (this->get_backtracking()>0)
                																        {
                																            this->set_failedflag( true );
                																            return ;
                																        }


                																        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																        ex->set_decisionNum( 7 );
                																        ex->set_state( 36 );


                																        goto ruleoperatorsGGEx;

                																    }
                																}
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 7 );
                														    ex->set_state( 35 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 7 );
                												    ex->set_state( 32 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 7 );
                										    ex->set_state( 30 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 7 );
                								    ex->set_state( 26 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 7 );
                						    ex->set_state( 23 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case T_WATHERSHADE:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_RPAREN:
                											{
                												alt7=16;
                											}
                										    break;
                										case T_COMMA:
                											{
                												alt7=17;
                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 7 );
                										    ex->set_state( 31 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 7 );
                								    ex->set_state( 27 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 7 );
                						    ex->set_state( 24 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 7 );
                				    ex->set_state( 14 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 7 );
                		    ex->set_state( 9 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 7 );
                    ex->set_state( 0 );


                    goto ruleoperatorsGGEx;

                }

                switch (alt7)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:245:4: 'negate' '(' nId= ID ')'
            	    {
            	         this->matchToken(T_NEGATE, &FOLLOW_T_NEGATE_in_operatorsGG843);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG845);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        nId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG849);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG851);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             negateImpl((nId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:246:4: 'normalize'
            	    {
            	         this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorsGG858);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             normalizeImpl(); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:247:4: 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG865);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG867);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG871);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG873);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG877);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG879);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl((mId->getText()), toDouble(mDbl)); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:248:4: 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG886);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG888);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG892);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG894);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG898);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG900);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl(toDouble(mDbl2), (mId2->getText())); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:249:4: 'multiply' '(' mId3= ID ',' mId4= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG907);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG909);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId3 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG913);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG915);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId4 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG919);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG921);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl((mId3->getText()), (mId4->getText())); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:250:4: 'crop' '(' cId= ID ',' interval ')'
            	    {
            	         this->matchToken(T_CROP, &FOLLOW_T_CROP_in_operatorsGG929);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG931);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG935);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG937);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_interval_in_operatorsGG939);
            	        interval2=interval();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG941);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             cropImpl((cId->getText()), 
            	            interval2.start
            	            , interval2.stop
            	            ); 
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:251:4: 'subtract' '(' sId1= ID ',' sId2= ID ')'
            	    {
            	         this->matchToken(T_SUBTRACT, &FOLLOW_T_SUBTRACT_in_operatorsGG949);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG951);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG955);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG957);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG961);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG963);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             subtractImpl((sId1->getText()), (sId2->getText())); 
            	        }


            	    }
            	    break;
            	case 8:
            	    // Grammar/MorphDSL.g:252:4: 'gradient' '(' 'INTERNAL' ',' giId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG971);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG973);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_INTERNAL, &FOLLOW_T_INTERNAL_in_operatorsGG975);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG977);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        giId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG981);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG983);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientInternalImpl((giId->getText())); 
            	        }


            	    }
            	    break;
            	case 9:
            	    // Grammar/MorphDSL.g:253:4: 'gradient' '(' 'EXTERNAL' ',' geId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG991);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG993);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_EXTERNAL, &FOLLOW_T_EXTERNAL_in_operatorsGG995);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG997);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        geId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1001);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1003);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientExternalImpl((geId->getText())); 
            	        }


            	    }
            	    break;
            	case 10:
            	    // Grammar/MorphDSL.g:254:4: 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1011);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1013);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MORPHOLOGICAL, &FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1015);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1017);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1021);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1023);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1027);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1029);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesMorphologicalImpl((dpmId1->getText()), (dpmId2->getText())); 
            	        }


            	    }
            	    break;
            	case 11:
            	    // Grammar/MorphDSL.g:255:4: 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1037);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1039);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_ATTRIBUTE, &FOLLOW_T_ATTRIBUTE_in_operatorsGG1041);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1043);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1047);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1049);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1053);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1055);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesAttributeImpl((dpaId1->getText()), (dpaId2->getText())); 
            	        }


            	    }
            	    break;
            	case 12:
            	    // Grammar/MorphDSL.g:256:4: 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1063);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1065);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DMP, &FOLLOW_T_DMP_in_operatorsGG1067);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1069);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1073);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1075);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1079);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1083);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 13:
            	    // Grammar/MorphDSL.g:257:4: 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1091);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1093);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DAP, &FOLLOW_T_DAP_in_operatorsGG1095);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1097);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1101);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1103);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1107);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1111);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 14:
            	    // Grammar/MorphDSL.g:258:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1119);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1121);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1123);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1125);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1129);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1131);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1135);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1137);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls1Impl((msls_1_Id1->getText()), (msls_1_Id2->getText())); 
            	        }


            	    }
            	    break;
            	case 15:
            	    // Grammar/MorphDSL.g:259:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1145);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1147);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1149);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1151);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1155);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1157);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1161);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1163);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls2Impl((msls_2_Id1->getText()), (msls_2_Id2->getText())); 
            	        }


            	    }
            	    break;
            	case 16:
            	    // Grammar/MorphDSL.g:260:4: 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1171);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1173);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1175);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1177);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        watershadeId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1181);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1183);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeImpl((watershadeId->getText())); 
            	        }


            	    }
            	    break;
            	case 17:
            	    // Grammar/MorphDSL.g:264:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            	    {
            	        // Grammar/MorphDSL.g:264:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            	        // Grammar/MorphDSL.g:264:5: 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')'
            	        {
            	             this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1195);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1197);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1199);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1201);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            watershadeMarkerId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1205);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1207);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            watershadeMarkerId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1211);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1213);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeMarkerImpl((watershadeMarkerId1->getText()), (watershadeMarkerId2->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGGEx; /* Prevent compiler warnings */
    ruleoperatorsGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGG */

/**
 * $ANTLR start interval
 * Grammar/MorphDSL.g:267:1: interval returns [double start, double stop] : dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER ;
 */
MorphDSLParser_interval_return
MorphDSLParser::interval()
{
    MorphDSLParser_interval_return retval(this);


    const CommonTokenType*    dbl1;
    const CommonTokenType*    dbl2;

    /* Initialize rule variables
     */

    dbl1       = NULL;
    dbl2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:267:44: (dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER )
        // Grammar/MorphDSL.g:268:2: dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER
        {
            dbl1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1235);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_interval1237);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            dbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1241);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {

                		istringstream((dbl1->getText())) >> 
                retval.start
                ;
                		istringstream((dbl2->getText())) >> 
                retval.stop
                ;
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end interval */

/**
 * $ANTLR start operatorsBBGG
 * Grammar/MorphDSL.g:274:1: operatorsBBGG : ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) ;
 */
void
MorphDSLParser::operatorsBBGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:274:15: ( ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) )
        // Grammar/MorphDSL.g:275:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
        {
            // Grammar/MorphDSL.g:275:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
            {
                int alt8=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt8=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt8=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 8 );
                				    ex->set_state( 5 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 8 );
                		    ex->set_state( 1 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_DILATE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt8=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt8=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 8 );
                				    ex->set_state( 6 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 8 );
                		    ex->set_state( 2 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_OPEN:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt8=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt8=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt8=3;
                					}
                				    break;
                				case ID:
                					{
                						alt8=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 8 );
                				    ex->set_state( 7 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 8 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_CLOSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt8=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt8=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt8=3;
                					}
                				    break;
                				case ID:
                					{
                						alt8=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 8 );
                				    ex->set_state( 8 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 8 );
                		    ex->set_state( 4 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 8 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBGGEx;

                }

                switch (alt8)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:275:4: operatorsBOX
            	    {
            	        this->followPush(FOLLOW_operatorsBOX_in_operatorsBBGG1256);
            	        operatorsBOX();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:276:4: operatorsRECONSTRUCTION
            	    {
            	        this->followPush(FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1262);
            	        operatorsRECONSTRUCTION();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:277:4: operatorsAREA
            	    {
            	        this->followPush(FOLLOW_operatorsAREA_in_operatorsBBGG1268);
            	        operatorsAREA();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:278:4: operatorsATTRIBUTE
            	    {
            	        this->followPush(FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1274);
            	        operatorsATTRIBUTE();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBGGEx; /* Prevent compiler warnings */
    ruleoperatorsBBGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBBGG */

/**
 * $ANTLR start operatorsBOX
 * Grammar/MorphDSL.g:281:1: operatorsBOX : ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBOX()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eNum;
    const CommonTokenType*    eId;
    const CommonTokenType*    dNum;
    const CommonTokenType*    dId;
    const CommonTokenType*    oNum;
    const CommonTokenType*    oId;
    const CommonTokenType*    cNum;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eNum       = NULL;
    eId       = NULL;
    dNum       = NULL;
    dId       = NULL;
    oNum       = NULL;
    oId       = NULL;
    cNum       = NULL;
    cId       = NULL;


 
    {
        // Grammar/MorphDSL.g:281:14: ( ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:282:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:282:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
            {
                int alt9=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		alt9=1;
                	}
                    break;
                case T_DILATE:
                	{
                		alt9=2;
                	}
                    break;
                case T_OPEN:
                	{
                		alt9=3;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt9=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBOXEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:282:4: 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')'
            	    {
            	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsBOX1291);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1293);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1295);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1297);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1301);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1303);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1305);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1309);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1311);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             erodeBoxImpl(toDouble(eNum), (eId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:283:4: 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')'
            	    {
            	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsBOX1319);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1321);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1323);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1325);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1329);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1331);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1333);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1337);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1339);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             dilateBoxImpl(toDouble(dNum), (dId->getText())); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:284:4: 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsBOX1346);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1348);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1350);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1352);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1356);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1358);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1360);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1364);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1366);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openBoxImpl(toDouble(oNum), (oId->getText())); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:285:4: 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsBOX1375);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1377);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1379);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1381);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1385);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1387);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1389);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1393);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1395);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeBoxImpl(toDouble(cNum), (cId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBOXEx; /* Prevent compiler warnings */
    ruleoperatorsBOXEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBOX */

/**
 * $ANTLR start operatorsRECONSTRUCTION
 * Grammar/MorphDSL.g:288:1: operatorsRECONSTRUCTION : ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' );
 */
void
MorphDSLParser::operatorsRECONSTRUCTION()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eId2;
    const CommonTokenType*    eId1;
    const CommonTokenType*    dId2;
    const CommonTokenType*    dId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eId2       = NULL;
    eId1       = NULL;
    dId2       = NULL;
    dId1       = NULL;
    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


 
    {
        {
            //  Grammar/MorphDSL.g:288:25: ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' )

            ANTLR_UINT32 alt10;

            alt10=4;

            switch ( this->LA(1) )
            {
            case T_ERODE:
            	{
            		alt10=1;
            	}
                break;
            case T_DILATE:
            	{
            		alt10=2;
            	}
                break;
            case T_OPEN:
            	{
            		alt10=3;
            	}
                break;
            case T_CLOSE:
            	{
            		alt10=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleoperatorsRECONSTRUCTIONEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:290:4: 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')'
        	    {
        	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1422);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1424);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1426);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1428);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1432);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1434);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1438);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1440);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             erodeImpl((eId1->getText()), (eId2->getText())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:292:4: 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')'
        	    {
        	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1450);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1452);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1454);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1456);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1460);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1462);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1466);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1468);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             dilateImpl((dId1->getText()), (dId2->getText())); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:293:4: 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')'
        	    {
        	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1475);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1477);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1479);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1481);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1483);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1485);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1489);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1491);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1493);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1497);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1499);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             openImpl(toDouble(oDbl), (oId->getText())); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:294:4: 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')'
        	    {
        	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1507);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1509);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1511);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1513);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1515);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1517);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1521);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1523);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1525);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1529);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1531);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             closeImpl(toDouble(cDbl), (cId->getText())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsRECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleoperatorsRECONSTRUCTIONEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsRECONSTRUCTION */

/**
 * $ANTLR start operatorsAREA
 * Grammar/MorphDSL.g:297:1: operatorsAREA : ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsAREA()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


 
    {
        // Grammar/MorphDSL.g:297:15: ( ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:298:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:298:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt11=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt11=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto ruleoperatorsAREAEx;

                }

                switch (alt11)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:298:4: 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsAREA1549);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1551);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1553);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1555);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1559);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1561);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1565);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1567);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openArea(toDouble(oDbl), (oId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:299:4: 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsAREA1574);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1576);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1578);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1580);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1584);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1586);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1590);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1592);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeArea(toDouble(cDbl), (cId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsAREAEx; /* Prevent compiler warnings */
    ruleoperatorsAREAEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsAREA */

/**
 * $ANTLR start operatorsATTRIBUTE
 * Grammar/MorphDSL.g:302:1: operatorsATTRIBUTE : ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) ;
 */
void
MorphDSLParser::operatorsATTRIBUTE()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId2;
    const CommonTokenType*    cId1;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId2;

    /* Initialize rule variables
     */

    oId1       = NULL;
    oDbl       = NULL;
    oId2       = NULL;
    cId1       = NULL;
    cDbl       = NULL;
    cId2       = NULL;


 
    {
        // Grammar/MorphDSL.g:302:20: ( ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) )
        // Grammar/MorphDSL.g:303:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
        {
            // Grammar/MorphDSL.g:303:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt12=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt12=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 12 );
                    ex->set_state( 0 );


                    goto ruleoperatorsATTRIBUTEEx;

                }

                switch (alt12)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:303:4: 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsATTRIBUTE1609);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1611);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1615);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1617);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1621);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1623);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1627);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1629);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openAttribute((oId1->getText()), toDouble(oDbl), (oId2->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:304:4: 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1636);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1638);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1642);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1644);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1648);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1650);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1654);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1656);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeAttribute((cId1->getText()), toDouble(cDbl), (cId2->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsATTRIBUTEEx; /* Prevent compiler warnings */
    ruleoperatorsATTRIBUTEEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsATTRIBUTE */

/**
 * $ANTLR start operatorsBG
 * Grammar/MorphDSL.g:307:1: operatorsBG : 'distanceTransform' '(' ID ')' ;
 */
void
MorphDSLParser::operatorsBG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID3;

    /* Initialize rule variables
     */

    ID3       = NULL;


 
    {
        // Grammar/MorphDSL.g:307:13: ( 'distanceTransform' '(' ID ')' )
        // Grammar/MorphDSL.g:307:15: 'distanceTransform' '(' ID ')'
        {
             this->matchToken(T_DISTANCETRANSFORM, &FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1670);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBG1672);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID3 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBG1674);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBG1676);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 distanceTransformImpl((ID3->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBGEx; /* Prevent compiler warnings */
    ruleoperatorsBGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBG */

/**
 * $ANTLR start operatorsGB
 * Grammar/MorphDSL.g:309:1: operatorsGB : 'treshold' '(' DOUBLENUMBER ',' ID ')' ;
 */
void
MorphDSLParser::operatorsGB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    DOUBLENUMBER4;
    const CommonTokenType*    ID5;

    /* Initialize rule variables
     */

    DOUBLENUMBER4       = NULL;
    ID5       = NULL;


 
    {
        // Grammar/MorphDSL.g:309:13: ( 'treshold' '(' DOUBLENUMBER ',' ID ')' )
        // Grammar/MorphDSL.g:309:15: 'treshold' '(' DOUBLENUMBER ',' ID ')'
        {
             this->matchToken(T_TRESHOLD, &FOLLOW_T_TRESHOLD_in_operatorsGB1686);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGB1688);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            DOUBLENUMBER4 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGB1690);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGB1692);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID5 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGB1694);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGB1696);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 tresholdImpl(toDouble(DOUBLENUMBER4), (ID5->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGBEx; /* Prevent compiler warnings */
    ruleoperatorsGBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGB */

/**
 * $ANTLR start marker
 * Grammar/MorphDSL.g:311:1: marker : ( ID | DOUBLENUMBER ) ;
 */
void
MorphDSLParser::marker()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:311:8: ( ( ID | DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= DOUBLENUMBER) && (this->LA(1) <= ID)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemarkerEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemarkerEx; /* Prevent compiler warnings */
    rulemarkerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end marker */

/**
 * $ANTLR start vector
 * Grammar/MorphDSL.g:316:1: vector : (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) ;
 */
MorphDSLParser_vector_return
MorphDSLParser::vector()
{
    MorphDSLParser_vector_return retval(this);


    const CommonTokenType*    st;
    const CommonTokenType*    kncSt;

    /* Initialize rule variables
     */

     std::vector<double> tmp; 
    st       = NULL;
    kncSt       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:329:2: ( (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:330:2: (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER )
        {
            // Grammar/MorphDSL.g:330:2: (st= DOUBLENUMBER ( ',' ) )*

            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case DOUBLENUMBER:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_COMMA:
                			{
                				alt13=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:330:3: st= DOUBLENUMBER ( ',' )
            	    {
            	        st =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1747);
            	        if  (this->hasException())
            	        {
            	            goto rulevectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        // Grammar/MorphDSL.g:330:19: ( ',' )
            	        // Grammar/MorphDSL.g:330:21: ','
            	        {
            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_vector1751);
            	            if  (this->hasException())
            	            {
            	                goto rulevectorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             tmp.push_back(toDouble(st)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


            // Grammar/MorphDSL.g:330:65: (kncSt= DOUBLENUMBER )
            // Grammar/MorphDSL.g:330:66: kncSt= DOUBLENUMBER
            {
                kncSt =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1764);
                if  (this->hasException())
                {
                    goto rulevectorEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                     tmp.push_back(toDouble(kncSt)); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		stringstream fNew;//create a stringstream
                	//	cout<< "VECTOR: ";
                		fNew << currentFigure->getText()[0]-96;
                	//	cout<< currentFigure->getText();
                	//	cout<< " ";
                	//	cout<< fNew.str();
                	//	cout<< endl;
                		std::map<string, std::vector<double>>::iterator it = vect.begin();
                		vect.insert (it, std::pair<string, std::vector<double>>(fNew.str(), tmp));
                	
            }
        }

    return retval;
}
/* $ANTLR end vector */

// $ANTLR start synpred39_MorphDSL
void MorphDSLParser::msynpred39_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_1_Id1;
	const CommonTokenType*    msls_1_Id2;

	msls_1_Id1       = NULL;
	msls_1_Id2       = NULL;

    // Grammar/MorphDSL.g:258:4: ( 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' )
    // Grammar/MorphDSL.g:258:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred39_MorphDSL1119);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred39_MorphDSL1121);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred39_MorphDSL1123);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred39_MorphDSL1125);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred39_MorphDSL1129);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred39_MorphDSL1131);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred39_MorphDSL1135);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred39_MorphDSL1137);
        if  (this->hasException())
        {
            goto rulesynpred39_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred39_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred39_MorphDSLEx: ;

}
// $ANTLR end synpred39_MorphDSL

// $ANTLR start synpred40_MorphDSL
void MorphDSLParser::msynpred40_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_2_Id1;
	const CommonTokenType*    msls_2_Id2;

	msls_2_Id1       = NULL;
	msls_2_Id2       = NULL;

    // Grammar/MorphDSL.g:259:4: ( 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' )
    // Grammar/MorphDSL.g:259:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred40_MorphDSL1145);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred40_MorphDSL1147);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred40_MorphDSL1149);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred40_MorphDSL1151);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred40_MorphDSL1155);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred40_MorphDSL1157);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred40_MorphDSL1161);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred40_MorphDSL1163);
        if  (this->hasException())
        {
            goto rulesynpred40_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred40_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred40_MorphDSLEx: ;

}
// $ANTLR end synpred40_MorphDSL
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred40_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred40_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred39_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred39_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
