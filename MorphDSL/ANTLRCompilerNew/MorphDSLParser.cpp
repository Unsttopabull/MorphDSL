/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Grammar/MorphDSL.g
 *     -                            On : 2015-06-24 12:01:07
 *     -                for the parser : MorphDSLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */
using namespace std;
/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "stdafx.h"
#include    "MorphDSLParser.hpp"
/* Stdafx.h mora vedno biti na vrhu (prvi definiran) */
#include	"Razredi/SqlWhere.h"

/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 	LPM_MorphDSL  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MorphDSLParserTokenNames[63+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DOUBLENUMBER",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "T_AND",
        (ANTLR_UINT8*) "T_AREA",
        (ANTLR_UINT8*) "T_AREA_SQL",
        (ANTLR_UINT8*) "T_ATRIBUTE",
        (ANTLR_UINT8*) "T_ATTRIBUTE",
        (ANTLR_UINT8*) "T_ATTRIBUTE_SQL",
        (ANTLR_UINT8*) "T_BOUNDARY",
        (ANTLR_UINT8*) "T_BOX",
        (ANTLR_UINT8*) "T_CLOSE",
        (ANTLR_UINT8*) "T_COMMA",
        (ANTLR_UINT8*) "T_COMPLEMENT",
        (ANTLR_UINT8*) "T_CROP",
        (ANTLR_UINT8*) "T_DAP",
        (ANTLR_UINT8*) "T_DIFERENTIALPROFILES",
        (ANTLR_UINT8*) "T_DILATE",
        (ANTLR_UINT8*) "T_DISTANCETRANSFORM",
        (ANTLR_UINT8*) "T_DMP",
        (ANTLR_UINT8*) "T_DOUBLE_QUOTE",
        (ANTLR_UINT8*) "T_EQUALS",
        (ANTLR_UINT8*) "T_ERODE",
        (ANTLR_UINT8*) "T_EXTERNAL",
        (ANTLR_UINT8*) "T_EXTERNAL_GRADIENT",
        (ANTLR_UINT8*) "T_FROM",
        (ANTLR_UINT8*) "T_GRADIENT",
        (ANTLR_UINT8*) "T_HITMISS",
        (ANTLR_UINT8*) "T_INTERNAL",
        (ANTLR_UINT8*) "T_INTERNAL_GRADIENT",
        (ANTLR_UINT8*) "T_INTERSECTION",
        (ANTLR_UINT8*) "T_LESS_THAN",
        (ANTLR_UINT8*) "T_LESS_THAN_OR_EQ",
        (ANTLR_UINT8*) "T_LOAD",
        (ANTLR_UINT8*) "T_LPAREN",
        (ANTLR_UINT8*) "T_MAPPING",
        (ANTLR_UINT8*) "T_MASK",
        (ANTLR_UINT8*) "T_MORE_THAN",
        (ANTLR_UINT8*) "T_MORE_THAN_OR_EQ",
        (ANTLR_UINT8*) "T_MORPHOLOGICAL",
        (ANTLR_UINT8*) "T_MSLS",
        (ANTLR_UINT8*) "T_MULTIPLY",
        (ANTLR_UINT8*) "T_NEGATE",
        (ANTLR_UINT8*) "T_NORMALIZE",
        (ANTLR_UINT8*) "T_NOT_EQUAL",
        (ANTLR_UINT8*) "T_OKROGLOST",
        (ANTLR_UINT8*) "T_OPEN",
        (ANTLR_UINT8*) "T_RECONSTRUCTION",
        (ANTLR_UINT8*) "T_RESPONSE",
        (ANTLR_UINT8*) "T_RPAREN",
        (ANTLR_UINT8*) "T_SEGMENTATION",
        (ANTLR_UINT8*) "T_SELECT",
        (ANTLR_UINT8*) "T_SET",
        (ANTLR_UINT8*) "T_STAR",
        (ANTLR_UINT8*) "T_SUBTRACT",
        (ANTLR_UINT8*) "T_TRESHOLD",
        (ANTLR_UINT8*) "T_UNION",
        (ANTLR_UINT8*) "T_VOLUMENT",
        (ANTLR_UINT8*) "T_WATHERSHADE",
        (ANTLR_UINT8*) "T_WHERE",
        (ANTLR_UINT8*) "T_WITHOUT",
        (ANTLR_UINT8*) "WS"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Grammar/MorphDSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSLParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MorphDSLParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MorphDSLParserTokenNames );


}

void
MorphDSLParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MorphDSLParser::~MorphDSLParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MorphDSLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_load_in_program587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000050) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_load_in_program587( FOLLOW_load_in_program587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_program590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000052) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_assignment_in_program590( FOLLOW_assignment_in_program590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_COMMENT_in_program594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000052) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_COMMENT_in_program594( FOLLOW_COMMENT_in_program594_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load607_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load607( FOLLOW_ID_in_load607_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_load609_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_load609( FOLLOW_T_EQUALS_in_load609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LOAD_in_load611_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LOAD_in_load611( FOLLOW_T_LOAD_in_load611_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_load613_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_load613( FOLLOW_T_LPAREN_in_load613_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load615( FOLLOW_T_DOUBLE_QUOTE_in_load615_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load619_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load619( FOLLOW_ID_in_load619_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load621_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load621( FOLLOW_T_DOUBLE_QUOTE_in_load621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_load623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_load623( FOLLOW_T_RPAREN_in_load623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_figurevector_in_assignment639_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_figurevector_in_assignment639( FOLLOW_figurevector_in_assignment639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_assignment641_bits[]	= { ANTLR_UINT64_LIT(0x3989C10988ED4020), ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_assignment641( FOLLOW_T_EQUALS_in_assignment641_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBB_in_assignment647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBB_in_assignment647( FOLLOW_operatorsBB_in_assignment647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGG_in_assignment653_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGG_in_assignment653( FOLLOW_operatorsGG_in_assignment653_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBBGG_in_assignment658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBBGG_in_assignment658( FOLLOW_operatorsBBGG_in_assignment658_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBG_in_assignment663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBG_in_assignment663( FOLLOW_operatorsBG_in_assignment663_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGB_in_assignment668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGB_in_assignment668( FOLLOW_operatorsGB_in_assignment668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_vector_in_assignment673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_vector_in_assignment673( FOLLOW_vector_in_assignment673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_assignment678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_assignment678( FOLLOW_sql_in_assignment678_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_figurevector690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_figurevector690( FOLLOW_ID_in_figurevector690_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SELECT_in_sql719_bits[]	= { ANTLR_UINT64_LIT(0x4605020420002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SELECT_in_sql719( FOLLOW_T_SELECT_in_sql719_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorSql_in_sql721_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorSql_in_sql721( FOLLOW_operatorSql_in_sql721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_FROM_in_sql723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_FROM_in_sql723( FOLLOW_T_FROM_in_sql723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_sql725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_sql725( FOLLOW_ID_in_sql725_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WHERE_in_sql727_bits[]	= { ANTLR_UINT64_LIT(0x4024000420000C20) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WHERE_in_sql727( FOLLOW_T_WHERE_in_sql727_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000102) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql731( FOLLOW_sqlWhere_in_sql731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AND_in_sql738_bits[]	= { ANTLR_UINT64_LIT(0x4024000420000C20) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AND_in_sql738( FOLLOW_T_AND_in_sql738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000102) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql742( FOLLOW_sqlWhere_in_sql742_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorName_in_operatorSql772_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorName_in_operatorSql772( FOLLOW_operatorName_in_operatorSql772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorSql774_bits[]	= { ANTLR_UINT64_LIT(0x4204020420002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorSql774( FOLLOW_T_LPAREN_in_operatorSql774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_selectKeyword_in_operatorSql778_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_selectKeyword_in_operatorSql778( FOLLOW_selectKeyword_in_operatorSql778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorSql782_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorSql782( FOLLOW_T_RPAREN_in_operatorSql782_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_selectKeyword_in_operatorSql789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_selectKeyword_in_operatorSql789( FOLLOW_selectKeyword_in_operatorSql789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_STAR_in_operatorSql796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_STAR_in_operatorSql796( FOLLOW_T_STAR_in_operatorSql796_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MASK_in_selectKeyword819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MASK_in_selectKeyword819( FOLLOW_T_MASK_in_selectKeyword819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SET_in_selectKeyword826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SET_in_selectKeyword826( FOLLOW_T_SET_in_selectKeyword826_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword834( FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OKROGLOST_in_selectKeyword841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OKROGLOST_in_selectKeyword841( FOLLOW_T_OKROGLOST_in_selectKeyword841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_VOLUMENT_in_selectKeyword848_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_VOLUMENT_in_selectKeyword848( FOLLOW_T_VOLUMENT_in_selectKeyword848_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword856( FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword856_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword864( FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorName875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorName875( FOLLOW_T_NORMALIZE_in_operatorName875_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere890_bits[]	= { ANTLR_UINT64_LIT(0x00020C3004000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere890( FOLLOW_DOUBLENUMBER_in_sqlWhere890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere894_bits[]	= { ANTLR_UINT64_LIT(0x4024000420000C00) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere894( FOLLOW_relOp_in_sqlWhere894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere898( FOLLOW_sqlWhereKeyword_in_sqlWhere898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere908_bits[]	= { ANTLR_UINT64_LIT(0x00020C3004000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere908( FOLLOW_sqlWhereKeyword_in_sqlWhere908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere912( FOLLOW_relOp_in_sqlWhere912_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere916( FOLLOW_DOUBLENUMBER_in_sqlWhere916_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere926_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere926( FOLLOW_sqlWhereKeyword_in_sqlWhere926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_sqlWhere928_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_sqlWhere928( FOLLOW_T_EQUALS_in_sqlWhere928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_sqlWhere930_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_sqlWhere930( FOLLOW_T_LPAREN_in_sqlWhere930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_sqlWhere932_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_sqlWhere932( FOLLOW_sql_in_sqlWhere932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_sqlWhere935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_sqlWhere935( FOLLOW_T_RPAREN_in_sqlWhere935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORE_THAN_in_relOp1002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORE_THAN_in_relOp1002( FOLLOW_T_MORE_THAN_in_relOp1002_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LESS_THAN_in_relOp1010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LESS_THAN_in_relOp1010( FOLLOW_T_LESS_THAN_in_relOp1010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_relOp1018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_relOp1018( FOLLOW_T_EQUALS_in_relOp1018_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NOT_EQUAL_in_relOp1026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NOT_EQUAL_in_relOp1026( FOLLOW_T_NOT_EQUAL_in_relOp1026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1033( FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1033_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1040( FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMPLEMENT_in_operatorsBB1056_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMPLEMENT_in_operatorsBB1056( FOLLOW_T_COMPLEMENT_in_operatorsBB1056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1058( FOLLOW_T_LPAREN_in_operatorsBB1058_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1062_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1062( FOLLOW_ID_in_operatorsBB1062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1064( FOLLOW_T_RPAREN_in_operatorsBB1064_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_UNION_in_operatorsBB1071_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_UNION_in_operatorsBB1071( FOLLOW_T_UNION_in_operatorsBB1071_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1073( FOLLOW_T_LPAREN_in_operatorsBB1073_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1077_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1077( FOLLOW_ID_in_operatorsBB1077_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1079( FOLLOW_T_COMMA_in_operatorsBB1079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1083_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1083( FOLLOW_ID_in_operatorsBB1083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1085( FOLLOW_T_RPAREN_in_operatorsBB1085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERSECTION_in_operatorsBB1092_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERSECTION_in_operatorsBB1092( FOLLOW_T_INTERSECTION_in_operatorsBB1092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1094_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1094( FOLLOW_T_LPAREN_in_operatorsBB1094_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1098( FOLLOW_ID_in_operatorsBB1098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1100( FOLLOW_T_COMMA_in_operatorsBB1100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1104_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1104( FOLLOW_ID_in_operatorsBB1104_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1106_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1106( FOLLOW_T_RPAREN_in_operatorsBB1106_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WITHOUT_in_operatorsBB1113_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WITHOUT_in_operatorsBB1113( FOLLOW_T_WITHOUT_in_operatorsBB1113_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1115( FOLLOW_T_LPAREN_in_operatorsBB1115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1119( FOLLOW_ID_in_operatorsBB1119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1121( FOLLOW_T_COMMA_in_operatorsBB1121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1125_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1125( FOLLOW_ID_in_operatorsBB1125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1127( FOLLOW_T_RPAREN_in_operatorsBB1127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_HITMISS_in_operatorsBB1134_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_HITMISS_in_operatorsBB1134( FOLLOW_T_HITMISS_in_operatorsBB1134_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1136( FOLLOW_T_LPAREN_in_operatorsBB1136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1140_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1140( FOLLOW_ID_in_operatorsBB1140_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1142( FOLLOW_T_COMMA_in_operatorsBB1142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1146_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1146( FOLLOW_ID_in_operatorsBB1146_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1148( FOLLOW_T_RPAREN_in_operatorsBB1148_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOUNDARY_in_operatorsBB1155_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOUNDARY_in_operatorsBB1155( FOLLOW_T_BOUNDARY_in_operatorsBB1155_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1157( FOLLOW_T_LPAREN_in_operatorsBB1157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB1161_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB1161( FOLLOW_ID_in_operatorsBB1161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1163( FOLLOW_T_RPAREN_in_operatorsBB1163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NEGATE_in_operatorsGG1181_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NEGATE_in_operatorsGG1181( FOLLOW_T_NEGATE_in_operatorsGG1181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1183_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1183( FOLLOW_T_LPAREN_in_operatorsGG1183_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1187_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1187( FOLLOW_ID_in_operatorsGG1187_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1189_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1189( FOLLOW_T_RPAREN_in_operatorsGG1189_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorsGG1196_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorsGG1196( FOLLOW_T_NORMALIZE_in_operatorsGG1196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1203_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1203( FOLLOW_T_MULTIPLY_in_operatorsGG1203_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1205( FOLLOW_T_LPAREN_in_operatorsGG1205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1209( FOLLOW_ID_in_operatorsGG1209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1211( FOLLOW_T_COMMA_in_operatorsGG1211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG1215_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG1215( FOLLOW_DOUBLENUMBER_in_operatorsGG1215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1217( FOLLOW_T_RPAREN_in_operatorsGG1217_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1224_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1224( FOLLOW_T_MULTIPLY_in_operatorsGG1224_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1226_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1226( FOLLOW_T_LPAREN_in_operatorsGG1226_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG1230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG1230( FOLLOW_DOUBLENUMBER_in_operatorsGG1230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1232( FOLLOW_T_COMMA_in_operatorsGG1232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1236_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1236( FOLLOW_ID_in_operatorsGG1236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1238( FOLLOW_T_RPAREN_in_operatorsGG1238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1245_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1245( FOLLOW_T_MULTIPLY_in_operatorsGG1245_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1247( FOLLOW_T_LPAREN_in_operatorsGG1247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1251_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1251( FOLLOW_ID_in_operatorsGG1251_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1253( FOLLOW_T_COMMA_in_operatorsGG1253_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1257_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1257( FOLLOW_ID_in_operatorsGG1257_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1259( FOLLOW_T_RPAREN_in_operatorsGG1259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CROP_in_operatorsGG1267_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CROP_in_operatorsGG1267( FOLLOW_T_CROP_in_operatorsGG1267_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1269( FOLLOW_T_LPAREN_in_operatorsGG1269_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1273( FOLLOW_ID_in_operatorsGG1273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1275( FOLLOW_T_COMMA_in_operatorsGG1275_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_interval_in_operatorsGG1277_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_interval_in_operatorsGG1277( FOLLOW_interval_in_operatorsGG1277_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1279( FOLLOW_T_RPAREN_in_operatorsGG1279_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SUBTRACT_in_operatorsGG1287_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SUBTRACT_in_operatorsGG1287( FOLLOW_T_SUBTRACT_in_operatorsGG1287_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1289( FOLLOW_T_LPAREN_in_operatorsGG1289_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1293_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1293( FOLLOW_ID_in_operatorsGG1293_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1295( FOLLOW_T_COMMA_in_operatorsGG1295_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1299_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1299( FOLLOW_ID_in_operatorsGG1299_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1301( FOLLOW_T_RPAREN_in_operatorsGG1301_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG1309_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG1309( FOLLOW_T_GRADIENT_in_operatorsGG1309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1311_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1311( FOLLOW_T_LPAREN_in_operatorsGG1311_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_in_operatorsGG1313_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_in_operatorsGG1313( FOLLOW_T_INTERNAL_in_operatorsGG1313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1315_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1315( FOLLOW_T_COMMA_in_operatorsGG1315_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1319_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1319( FOLLOW_ID_in_operatorsGG1319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1321_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1321( FOLLOW_T_RPAREN_in_operatorsGG1321_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG1329_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG1329( FOLLOW_T_GRADIENT_in_operatorsGG1329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1331_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1331( FOLLOW_T_LPAREN_in_operatorsGG1331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_in_operatorsGG1333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_in_operatorsGG1333( FOLLOW_T_EXTERNAL_in_operatorsGG1333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1335( FOLLOW_T_COMMA_in_operatorsGG1335_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1339_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1339( FOLLOW_ID_in_operatorsGG1339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1341( FOLLOW_T_RPAREN_in_operatorsGG1341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1349_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1349( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1351_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1351( FOLLOW_T_LPAREN_in_operatorsGG1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1353( FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1353_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1355( FOLLOW_T_COMMA_in_operatorsGG1355_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1359( FOLLOW_ID_in_operatorsGG1359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1361( FOLLOW_T_COMMA_in_operatorsGG1361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1365_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1365( FOLLOW_ID_in_operatorsGG1365_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1367( FOLLOW_T_RPAREN_in_operatorsGG1367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1375_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1375( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1377_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1377( FOLLOW_T_LPAREN_in_operatorsGG1377_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_in_operatorsGG1379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_in_operatorsGG1379( FOLLOW_T_ATTRIBUTE_in_operatorsGG1379_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1381( FOLLOW_T_COMMA_in_operatorsGG1381_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1385( FOLLOW_ID_in_operatorsGG1385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1387( FOLLOW_T_COMMA_in_operatorsGG1387_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1391_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1391( FOLLOW_ID_in_operatorsGG1391_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1393_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1393( FOLLOW_T_RPAREN_in_operatorsGG1393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1401_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1401( FOLLOW_T_MAPPING_in_operatorsGG1401_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1403_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1403( FOLLOW_T_LPAREN_in_operatorsGG1403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DMP_in_operatorsGG1405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DMP_in_operatorsGG1405( FOLLOW_T_DMP_in_operatorsGG1405_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1407( FOLLOW_T_COMMA_in_operatorsGG1407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1411( FOLLOW_ID_in_operatorsGG1411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1413_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1413( FOLLOW_T_COMMA_in_operatorsGG1413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1417_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1417( FOLLOW_ID_in_operatorsGG1417_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1421( FOLLOW_T_RPAREN_in_operatorsGG1421_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1429_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1429( FOLLOW_T_MAPPING_in_operatorsGG1429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1431( FOLLOW_T_LPAREN_in_operatorsGG1431_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DAP_in_operatorsGG1433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DAP_in_operatorsGG1433( FOLLOW_T_DAP_in_operatorsGG1433_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1435( FOLLOW_T_COMMA_in_operatorsGG1435_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1439( FOLLOW_ID_in_operatorsGG1439_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1441( FOLLOW_T_COMMA_in_operatorsGG1441_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1445_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1445( FOLLOW_ID_in_operatorsGG1445_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1449( FOLLOW_T_RPAREN_in_operatorsGG1449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1457_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1457( FOLLOW_T_SEGMENTATION_in_operatorsGG1457_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1459_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1459( FOLLOW_T_LPAREN_in_operatorsGG1459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1461( FOLLOW_T_MSLS_in_operatorsGG1461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1463( FOLLOW_T_COMMA_in_operatorsGG1463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1467( FOLLOW_ID_in_operatorsGG1467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1469_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1469( FOLLOW_T_COMMA_in_operatorsGG1469_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1473_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1473( FOLLOW_ID_in_operatorsGG1473_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1475( FOLLOW_T_RPAREN_in_operatorsGG1475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1483_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1483( FOLLOW_T_SEGMENTATION_in_operatorsGG1483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1485_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1485( FOLLOW_T_LPAREN_in_operatorsGG1485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1487( FOLLOW_T_MSLS_in_operatorsGG1487_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1489( FOLLOW_T_COMMA_in_operatorsGG1489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1493( FOLLOW_ID_in_operatorsGG1493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1495( FOLLOW_T_COMMA_in_operatorsGG1495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1499_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1499( FOLLOW_ID_in_operatorsGG1499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1501( FOLLOW_T_RPAREN_in_operatorsGG1501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1509_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1509( FOLLOW_T_SEGMENTATION_in_operatorsGG1509_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1511_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1511( FOLLOW_T_LPAREN_in_operatorsGG1511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1513( FOLLOW_T_WATHERSHADE_in_operatorsGG1513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1515( FOLLOW_T_COMMA_in_operatorsGG1515_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1519_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1519( FOLLOW_ID_in_operatorsGG1519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1521_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1521( FOLLOW_T_RPAREN_in_operatorsGG1521_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1533_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1533( FOLLOW_T_SEGMENTATION_in_operatorsGG1533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1535_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1535( FOLLOW_T_LPAREN_in_operatorsGG1535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1537( FOLLOW_T_WATHERSHADE_in_operatorsGG1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1539( FOLLOW_T_COMMA_in_operatorsGG1539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1543( FOLLOW_ID_in_operatorsGG1543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1545( FOLLOW_T_COMMA_in_operatorsGG1545_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1549_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1549( FOLLOW_ID_in_operatorsGG1549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1551_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1551( FOLLOW_T_RPAREN_in_operatorsGG1551_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1573( FOLLOW_DOUBLENUMBER_in_interval1573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_interval1575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_interval1575( FOLLOW_T_COMMA_in_interval1575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1579( FOLLOW_DOUBLENUMBER_in_interval1579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBOX_in_operatorsBBGG1594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBOX_in_operatorsBBGG1594( FOLLOW_operatorsBOX_in_operatorsBBGG1594_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1600_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1600( FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1600_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_operatorsBBGG1606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_operatorsBBGG1606( FOLLOW_operatorsAREA_in_operatorsBBGG1606_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1612( FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsBOX1629_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsBOX1629( FOLLOW_T_ERODE_in_operatorsBOX1629_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1631( FOLLOW_T_LPAREN_in_operatorsBOX1631_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1633_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1633( FOLLOW_T_BOX_in_operatorsBOX1633_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1635( FOLLOW_T_LPAREN_in_operatorsBOX1635_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1639_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1639( FOLLOW_DOUBLENUMBER_in_operatorsBOX1639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1641( FOLLOW_T_RPAREN_in_operatorsBOX1641_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1643_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1643( FOLLOW_T_COMMA_in_operatorsBOX1643_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1647_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1647( FOLLOW_ID_in_operatorsBOX1647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1649( FOLLOW_T_RPAREN_in_operatorsBOX1649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsBOX1657_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsBOX1657( FOLLOW_T_DILATE_in_operatorsBOX1657_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1659( FOLLOW_T_LPAREN_in_operatorsBOX1659_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1661_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1661( FOLLOW_T_BOX_in_operatorsBOX1661_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1663( FOLLOW_T_LPAREN_in_operatorsBOX1663_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1667_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1667( FOLLOW_DOUBLENUMBER_in_operatorsBOX1667_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1669( FOLLOW_T_RPAREN_in_operatorsBOX1669_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1671( FOLLOW_T_COMMA_in_operatorsBOX1671_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1675_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1675( FOLLOW_ID_in_operatorsBOX1675_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1677( FOLLOW_T_RPAREN_in_operatorsBOX1677_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsBOX1684_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsBOX1684( FOLLOW_T_OPEN_in_operatorsBOX1684_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1686( FOLLOW_T_LPAREN_in_operatorsBOX1686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1688_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1688( FOLLOW_T_BOX_in_operatorsBOX1688_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1690( FOLLOW_T_LPAREN_in_operatorsBOX1690_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1694_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1694( FOLLOW_DOUBLENUMBER_in_operatorsBOX1694_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1696( FOLLOW_T_RPAREN_in_operatorsBOX1696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1698_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1698( FOLLOW_T_COMMA_in_operatorsBOX1698_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1702_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1702( FOLLOW_ID_in_operatorsBOX1702_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1704_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1704( FOLLOW_T_RPAREN_in_operatorsBOX1704_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsBOX1713_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsBOX1713( FOLLOW_T_CLOSE_in_operatorsBOX1713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1715( FOLLOW_T_LPAREN_in_operatorsBOX1715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1717_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1717( FOLLOW_T_BOX_in_operatorsBOX1717_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1719( FOLLOW_T_LPAREN_in_operatorsBOX1719_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1723_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1723( FOLLOW_DOUBLENUMBER_in_operatorsBOX1723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1725( FOLLOW_T_RPAREN_in_operatorsBOX1725_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1727( FOLLOW_T_COMMA_in_operatorsBOX1727_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1731_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1731( FOLLOW_ID_in_operatorsBOX1731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1733( FOLLOW_T_RPAREN_in_operatorsBOX1733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1760_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1760( FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1762_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1762( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1764( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1766( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1770( FOLLOW_ID_in_operatorsRECONSTRUCTION1770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1772_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1772( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1776_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1776( FOLLOW_ID_in_operatorsRECONSTRUCTION1776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1778( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1788_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1788( FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1790_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1790( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1790_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1792( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1794_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1794( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1798( FOLLOW_ID_in_operatorsRECONSTRUCTION1798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1800_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1800( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1800_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1804_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1804( FOLLOW_ID_in_operatorsRECONSTRUCTION1804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1806_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1806( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1813_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1813( FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1813_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1815_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1815( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1815_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1817( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1819( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1821_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1821( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1821_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1823( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1827_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1827( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1827_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1829( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1829_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1831( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1831_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1835_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1835( FOLLOW_ID_in_operatorsRECONSTRUCTION1835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1837_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1837( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1837_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1845_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1845( FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1847_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1847( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1847_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1849_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1849( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1851( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1851_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1853_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1853( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1853_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1855( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1855_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1859_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1859( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1859_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1861( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1863( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1863_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1867_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1867( FOLLOW_ID_in_operatorsRECONSTRUCTION1867_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1869_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1869( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1869_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsAREA1887_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsAREA1887( FOLLOW_T_OPEN_in_operatorsAREA1887_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1889( FOLLOW_T_LPAREN_in_operatorsAREA1889_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1891( FOLLOW_T_AREA_in_operatorsAREA1891_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1893( FOLLOW_T_COMMA_in_operatorsAREA1893_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1897( FOLLOW_DOUBLENUMBER_in_operatorsAREA1897_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1899( FOLLOW_T_COMMA_in_operatorsAREA1899_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1903_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1903( FOLLOW_ID_in_operatorsAREA1903_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1905_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1905( FOLLOW_T_RPAREN_in_operatorsAREA1905_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsAREA1912_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsAREA1912( FOLLOW_T_CLOSE_in_operatorsAREA1912_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1914( FOLLOW_T_LPAREN_in_operatorsAREA1914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1916( FOLLOW_T_AREA_in_operatorsAREA1916_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1918_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1918( FOLLOW_T_COMMA_in_operatorsAREA1918_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1922( FOLLOW_DOUBLENUMBER_in_operatorsAREA1922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1924( FOLLOW_T_COMMA_in_operatorsAREA1924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1928_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1928( FOLLOW_ID_in_operatorsAREA1928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1930( FOLLOW_T_RPAREN_in_operatorsAREA1930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsATTRIBUTE1947_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsATTRIBUTE1947( FOLLOW_T_OPEN_in_operatorsATTRIBUTE1947_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1949_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1949( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1949_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1953_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1953( FOLLOW_ID_in_operatorsATTRIBUTE1953_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1955( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1959( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1959_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1961( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1961_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1965_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1965( FOLLOW_ID_in_operatorsATTRIBUTE1965_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1967( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1967_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1974_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1974( FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1976( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1980( FOLLOW_ID_in_operatorsATTRIBUTE1980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1982( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1986_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1986( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1986_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1988_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1988( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1988_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1992_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1992( FOLLOW_ID_in_operatorsATTRIBUTE1992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1994( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1994_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2008_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2008( FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2008_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBG2010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBG2010( FOLLOW_T_LPAREN_in_operatorsBG2010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBG2012_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBG2012( FOLLOW_ID_in_operatorsBG2012_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBG2014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBG2014( FOLLOW_T_RPAREN_in_operatorsBG2014_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_TRESHOLD_in_operatorsGB2024_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_TRESHOLD_in_operatorsGB2024( FOLLOW_T_TRESHOLD_in_operatorsGB2024_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGB2026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGB2026( FOLLOW_T_LPAREN_in_operatorsGB2026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGB2028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGB2028( FOLLOW_DOUBLENUMBER_in_operatorsGB2028_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGB2030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGB2030( FOLLOW_T_COMMA_in_operatorsGB2030_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGB2032_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGB2032( FOLLOW_ID_in_operatorsGB2032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGB2034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGB2034( FOLLOW_T_RPAREN_in_operatorsGB2034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector2085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector2085( FOLLOW_DOUBLENUMBER_in_vector2085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_vector2089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_vector2089( FOLLOW_T_COMMA_in_vector2089_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector2102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector2102( FOLLOW_DOUBLENUMBER_in_vector2102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1457_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1457( FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1457_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred49_MorphDSL1459_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred49_MorphDSL1459( FOLLOW_T_LPAREN_in_synpred49_MorphDSL1459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred49_MorphDSL1461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred49_MorphDSL1461( FOLLOW_T_MSLS_in_synpred49_MorphDSL1461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred49_MorphDSL1463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred49_MorphDSL1463( FOLLOW_T_COMMA_in_synpred49_MorphDSL1463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred49_MorphDSL1467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred49_MorphDSL1467( FOLLOW_ID_in_synpred49_MorphDSL1467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred49_MorphDSL1469_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred49_MorphDSL1469( FOLLOW_T_COMMA_in_synpred49_MorphDSL1469_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred49_MorphDSL1473_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred49_MorphDSL1473( FOLLOW_ID_in_synpred49_MorphDSL1473_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred49_MorphDSL1475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred49_MorphDSL1475( FOLLOW_T_RPAREN_in_synpred49_MorphDSL1475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred50_MorphDSL1483_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred50_MorphDSL1483( FOLLOW_T_SEGMENTATION_in_synpred50_MorphDSL1483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred50_MorphDSL1485_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred50_MorphDSL1485( FOLLOW_T_LPAREN_in_synpred50_MorphDSL1485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred50_MorphDSL1487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred50_MorphDSL1487( FOLLOW_T_MSLS_in_synpred50_MorphDSL1487_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred50_MorphDSL1489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred50_MorphDSL1489( FOLLOW_T_COMMA_in_synpred50_MorphDSL1489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred50_MorphDSL1493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred50_MorphDSL1493( FOLLOW_ID_in_synpred50_MorphDSL1493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred50_MorphDSL1495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred50_MorphDSL1495( FOLLOW_T_COMMA_in_synpred50_MorphDSL1495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred50_MorphDSL1499_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred50_MorphDSL1499( FOLLOW_ID_in_synpred50_MorphDSL1499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred50_MorphDSL1501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred50_MorphDSL1501( FOLLOW_T_RPAREN_in_synpred50_MorphDSL1501_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * Grammar/MorphDSL.g:227:1: program : load ( assignment | COMMENT )+ ;
 */
void
MorphDSLParser::program()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */

     
    		imeIzhodneSlike = "";
    		imageCounter = 1;
    		tempCnt = 0;
    	

    	try {
    {
        // Grammar/MorphDSL.g:232:3: ( load ( assignment | COMMENT )+ )
        // Grammar/MorphDSL.g:233:3: load ( assignment | COMMENT )+
        {
            this->followPush(FOLLOW_load_in_program587);
            load();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:233:8: ( assignment | COMMENT )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=3;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			alt1=1;
            		}
            	    break;
            	case COMMENT:
            		{
            			alt1=2;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // Grammar/MorphDSL.g:233:9: assignment
            	        {
            	            this->followPush(FOLLOW_assignment_in_program590);
            	            assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 2:
            	        // Grammar/MorphDSL.g:233:22: COMMENT
            	        {
            	             this->matchToken(COMMENT, &FOLLOW_COMMENT_in_program594);
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MorphDSLParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start load
 * Grammar/MorphDSL.g:235:1: load : imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')' ;
 */
void
MorphDSLParser::load()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    imeSpremenljivke;
    const CommonTokenType*    imeSlike;

    /* Initialize rule variables
     */

    imeSpremenljivke       = NULL;
    imeSlike       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:236:2: (imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')' )
        // Grammar/MorphDSL.g:236:4: imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')'
        {
            imeSpremenljivke =  this->matchToken(ID, &FOLLOW_ID_in_load607);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_load609);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LOAD, &FOLLOW_T_LOAD_in_load611);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_load613);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load615);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            imeSlike =  this->matchToken(ID, &FOLLOW_ID_in_load619);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load621);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_load623);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                		this->zadnjaSpremenljivka = (imeSpremenljivke->getText());
                		loadImpl((imeSlike->getText()), (imeSpremenljivke->getText()));
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloadEx; /* Prevent compiler warnings */
    ruleloadEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end load */

/**
 * $ANTLR start assignment
 * Grammar/MorphDSL.g:243:1: assignment : figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] ) ;
 */
void
MorphDSLParser::assignment()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    MorphDSLParser_figurevector_return figurevector1;
    typedef	MorphDSLParser_figurevector_return RETURN_TYPE_figurevector1;

    /* Initialize rule variables
     */


    	try {
    {
        // Grammar/MorphDSL.g:243:12: ( figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] ) )
        // Grammar/MorphDSL.g:244:2: figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] )
        {
            this->followPush(FOLLOW_figurevector_in_assignment639);
            figurevector1=figurevector();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_assignment641);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:245:2: ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] )
            {
                int alt2=7;
                switch ( this->LA(1) )
                {
                case T_BOUNDARY:
                case T_COMPLEMENT:
                case T_HITMISS:
                case T_INTERSECTION:
                case T_UNION:
                case T_WITHOUT:
                	{
                		alt2=1;
                	}
                    break;
                case T_CROP:
                case T_DIFERENTIALPROFILES:
                case T_GRADIENT:
                case T_MAPPING:
                case T_MULTIPLY:
                case T_NEGATE:
                case T_NORMALIZE:
                case T_SEGMENTATION:
                case T_SUBTRACT:
                	{
                		alt2=2;
                	}
                    break;
                case T_CLOSE:
                case T_DILATE:
                case T_ERODE:
                case T_OPEN:
                	{
                		alt2=3;
                	}
                    break;
                case T_DISTANCETRANSFORM:
                	{
                		alt2=4;
                	}
                    break;
                case T_TRESHOLD:
                	{
                		alt2=5;
                	}
                    break;
                case DOUBLENUMBER:
                	{
                		alt2=6;
                	}
                    break;
                case T_SELECT:
                	{
                		alt2=7;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleassignmentEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:245:4: operatorsBB
            	    {
            	        this->followPush(FOLLOW_operatorsBB_in_assignment647);
            	        operatorsBB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:246:4: operatorsGG
            	    {
            	        this->followPush(FOLLOW_operatorsGG_in_assignment653);
            	        operatorsGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:247:4: operatorsBBGG
            	    {
            	        this->followPush(FOLLOW_operatorsBBGG_in_assignment658);
            	        operatorsBBGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:248:4: operatorsBG
            	    {
            	        this->followPush(FOLLOW_operatorsBG_in_assignment663);
            	        operatorsBG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:249:4: operatorsGB
            	    {
            	        this->followPush(FOLLOW_operatorsGB_in_assignment668);
            	        operatorsGB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:250:4: vector
            	    {
            	        this->followPush(FOLLOW_vector_in_assignment673);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:251:4: sql[$figurevector.text]
            	    {
            	        this->followPush(FOLLOW_sql_in_assignment678);
            	        sql(
            	        (this->get_strstream()->toStringTT(figurevector1.start, figurevector1.stop))
            	        );

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start figurevector
 * Grammar/MorphDSL.g:254:1: figurevector : ID ;
 */
MorphDSLParser_figurevector_return
MorphDSLParser::figurevector()
{
    MorphDSLParser_figurevector_return retval(this);


    const CommonTokenType*    ID2;

    /* Initialize rule variables
     */

    ID2       = NULL;
    retval.call_start_placeholder(); 



    	try {
    {
        // Grammar/MorphDSL.g:254:14: ( ID )
        // Grammar/MorphDSL.g:254:16: ID
        {
            ID2 =  this->matchToken(ID, &FOLLOW_ID_in_figurevector690);
            if  (this->hasException())
            {
                goto rulefigurevectorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                 
                	zadnjaSpremenljivka = (ID2->getText()); 
                	initNovaSpremenljivka(zadnjaSpremenljivka);

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefigurevectorEx; /* Prevent compiler warnings */
    rulefigurevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end figurevector */

/**
 * $ANTLR start sql
 * Grammar/MorphDSL.g:259:1: sql[std::string spremenljivka] returns [Sql* sql] : 'SELECT' operatorSql 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )* ;
 */
Sql*
MorphDSLParser::sql(std::string spremenljivka)
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Sql* sql;


    const CommonTokenType*    ID4;
    MorphDSLParser_sqlWhere_return w1;
    typedef	MorphDSLParser_sqlWhere_return RETURN_TYPE_w1;

    MorphDSLParser_sqlWhere_return w2;
    typedef	MorphDSLParser_sqlWhere_return RETURN_TYPE_w2;

    MorphDSLParser_operatorSql_return operatorSql3;
    typedef	MorphDSLParser_operatorSql_return RETURN_TYPE_operatorSql3;

    /* Initialize rule variables
     */


    		sql= new Sql();
     
    	
    ID4       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:266:2: ( 'SELECT' operatorSql 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )* )
        // Grammar/MorphDSL.g:266:4: 'SELECT' operatorSql 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )*
        {
             this->matchToken(T_SELECT, &FOLLOW_T_SELECT_in_sql719);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            this->followPush(FOLLOW_operatorSql_in_sql721);
            operatorSql3=operatorSql();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


             this->matchToken(T_FROM, &FOLLOW_T_FROM_in_sql723);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            ID4 =  this->matchToken(ID, &FOLLOW_ID_in_sql725);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


             this->matchToken(T_WHERE, &FOLLOW_T_WHERE_in_sql727);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            this->followPush(FOLLOW_sqlWhere_in_sql731);
            w1=sqlWhere();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            if ( this->get_backtracking()==0 )
            {

                		 sql->dodajOmejitev(w1.keyword
                , w1.stavek
                ); 
                	
            }


            // Grammar/MorphDSL.g:270:2: ( 'AND' w2= sqlWhere )*

            for (;;)
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case T_AND:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:270:3: 'AND' w2= sqlWhere
            	    {
            	         this->matchToken(T_AND, &FOLLOW_T_AND_in_sql738);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	        this->followPush(FOLLOW_sqlWhere_in_sql742);
            	        w2=sqlWhere();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	            			sql->dodajOmejitev(w2.keyword
            	            , w2.stavek
            	            );
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            if ( this->get_backtracking()==0 )
            {

                	    sql
                ->selectKeyword = operatorSql3.selectKw
                ;
                	    sql
                ->selectFunkcija = operatorSql3.funkcija
                ;
                	    sql
                ->fromId = (ID4->getText());
                	  
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlEx; /* Prevent compiler warnings */
    rulesqlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		sqlImpl(sql
                , spremenljivka); delete sql
                ;
                	
            }
        }

	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return sql;
}
/* $ANTLR end sql */

/**
 * $ANTLR start operatorSql
 * Grammar/MorphDSL.g:282:1: operatorSql returns [SelectKw::Keyword selectKw, std::string funkcija] : ( operatorName '(' sk1= selectKeyword ')' |sk2= selectKeyword | '*' );
 */
MorphDSLParser_operatorSql_return
MorphDSLParser::operatorSql()
{
    MorphDSLParser_operatorSql_return retval(this);


    SelectKw::Keyword sk1;
    typedef	SelectKw::Keyword RETURN_TYPE_sk1;

    SelectKw::Keyword sk2;
    typedef	SelectKw::Keyword RETURN_TYPE_sk2;

    MorphDSLParser_operatorName_return operatorName5;
    typedef	MorphDSLParser_operatorName_return RETURN_TYPE_operatorName5;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



    	try {
    {
        {
            //  Grammar/MorphDSL.g:283:2: ( operatorName '(' sk1= selectKeyword ')' |sk2= selectKeyword | '*' )

            ANTLR_UINT32 alt4;

            alt4=3;

            switch ( this->LA(1) )
            {
            case T_NORMALIZE:
            	{
            		alt4=1;
            	}
                break;
            case T_ATTRIBUTE_SQL:
            case T_EXTERNAL_GRADIENT:
            case T_INTERNAL_GRADIENT:
            case T_MASK:
            case T_OKROGLOST:
            case T_SET:
            case T_VOLUMENT:
            	{
            		alt4=2;
            	}
                break;
            case T_STAR:
            	{
            		alt4=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleoperatorSqlEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:283:4: operatorName '(' sk1= selectKeyword ')'
        	    {
        	        this->followPush(FOLLOW_operatorName_in_operatorSql772);
        	        operatorName5=operatorName();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorSql774);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_selectKeyword_in_operatorSql778);
        	        sk1=selectKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             retval.selectKw= 
        	            sk1
        	            ;
        	             retval.funkcija= 
        	            (this->get_strstream()->toStringTT(operatorName5.start, operatorName5.stop))
        	            ;
        	             
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorSql782);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:284:4: sk2= selectKeyword
        	    {
        	        this->followPush(FOLLOW_selectKeyword_in_operatorSql789);
        	        sk2=selectKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             retval.selectKw= 
        	            sk2
        	            ;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:285:4: '*'
        	    {
        	         this->matchToken(T_STAR, &FOLLOW_T_STAR_in_operatorSql796);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             retval.selectKw= SelectKw::Star;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorSqlEx; /* Prevent compiler warnings */
    ruleoperatorSqlEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end operatorSql */

/**
 * $ANTLR start selectKeyword
 * Grammar/MorphDSL.g:288:1: selectKeyword returns [SelectKw::Keyword kw] : ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' | 'internal_gradient' | 'external_gradient' );
 */
SelectKw::Keyword
MorphDSLParser::selectKeyword()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    SelectKw::Keyword kw;


    /* Initialize rule variables
     */

     kw= SelectKw::Error;
     

    	try {
    {
        {
            //  Grammar/MorphDSL.g:290:2: ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' | 'internal_gradient' | 'external_gradient' )

            ANTLR_UINT32 alt5;

            alt5=7;

            switch ( this->LA(1) )
            {
            case T_MASK:
            	{
            		alt5=1;
            	}
                break;
            case T_SET:
            	{
            		alt5=2;
            	}
                break;
            case T_ATTRIBUTE_SQL:
            	{
            		alt5=3;
            	}
                break;
            case T_OKROGLOST:
            	{
            		alt5=4;
            	}
                break;
            case T_VOLUMENT:
            	{
            		alt5=5;
            	}
                break;
            case T_INTERNAL_GRADIENT:
            	{
            		alt5=6;
            	}
                break;
            case T_EXTERNAL_GRADIENT:
            	{
            		alt5=7;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return kw;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruleselectKeywordEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:290:4: 'mask'
        	    {
        	         this->matchToken(T_MASK, &FOLLOW_T_MASK_in_selectKeyword819);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Mask;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:291:4: 'set'
        	    {
        	         this->matchToken(T_SET, &FOLLOW_T_SET_in_selectKeyword826);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Set;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:292:4: 'attribute'
        	    {
        	         this->matchToken(T_ATTRIBUTE_SQL, &FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword834);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Attribute;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:293:4: 'okroglost'
        	    {
        	         this->matchToken(T_OKROGLOST, &FOLLOW_T_OKROGLOST_in_selectKeyword841);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Okroglost;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // Grammar/MorphDSL.g:294:4: 'volument'
        	    {
        	         this->matchToken(T_VOLUMENT, &FOLLOW_T_VOLUMENT_in_selectKeyword848);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Volument;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // Grammar/MorphDSL.g:295:4: 'internal_gradient'
        	    {
        	         this->matchToken(T_INTERNAL_GRADIENT, &FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword856);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::InternalGradient;
        	             
        	        }


        	    }
        	    break;
        	case 7:
        	    // Grammar/MorphDSL.g:296:4: 'external_gradient'
        	    {
        	         this->matchToken(T_EXTERNAL_GRADIENT, &FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword864);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::ExternalGradient;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleselectKeywordEx; /* Prevent compiler warnings */
    ruleselectKeywordEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return kw;
}
/* $ANTLR end selectKeyword */

/**
 * $ANTLR start operatorName
 * Grammar/MorphDSL.g:299:1: operatorName : 'normalize' ;
 */
MorphDSLParser_operatorName_return
MorphDSLParser::operatorName()
{
    MorphDSLParser_operatorName_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



    	try {
    {
        // Grammar/MorphDSL.g:299:13: ( 'normalize' )
        // Grammar/MorphDSL.g:299:15: 'normalize'
        {
             this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorName875);
            if  (this->hasException())
            {
                goto ruleoperatorNameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorNameEx; /* Prevent compiler warnings */
    ruleoperatorNameEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end operatorName */

/**
 * $ANTLR start sqlWhere
 * Grammar/MorphDSL.g:301:1: sqlWhere returns [std::string keyword, SqlWhere* stavek] : (val1= DOUBLENUMBER op1= relOp kv1= sqlWhereKeyword |kv2= sqlWhereKeyword op2= relOp val2= DOUBLENUMBER |kv3= sqlWhereKeyword '=' '(' sql[\"\"] ')' );
 */
MorphDSLParser_sqlWhere_return
MorphDSLParser::sqlWhere()
{
    MorphDSLParser_sqlWhere_return retval(this);


    const CommonTokenType*    val1;
    const CommonTokenType*    val2;
    RelOp::RelacijskiOperatorji op1;
    typedef	RelOp::RelacijskiOperatorji RETURN_TYPE_op1;

    MorphDSLParser_sqlWhereKeyword_return kv1;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv1;

    MorphDSLParser_sqlWhereKeyword_return kv2;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv2;

    RelOp::RelacijskiOperatorji op2;
    typedef	RelOp::RelacijskiOperatorji RETURN_TYPE_op2;

    MorphDSLParser_sqlWhereKeyword_return kv3;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv3;

    Sql* sql6;
    typedef	Sql* RETURN_TYPE_sql6;

    /* Initialize rule variables
     */

    val1       = NULL;
    val2       = NULL;
    retval.call_start_placeholder(); 



    	try {
    {
        {
            //  Grammar/MorphDSL.g:302:2: (val1= DOUBLENUMBER op1= relOp kv1= sqlWhereKeyword |kv2= sqlWhereKeyword op2= relOp val2= DOUBLENUMBER |kv3= sqlWhereKeyword '=' '(' sql[\"\"] ')' )

            ANTLR_UINT32 alt6;

            alt6=3;

            switch ( this->LA(1) )
            {
            case DOUBLENUMBER:
            	{
            		alt6=1;
            	}
                break;
            case T_AREA_SQL:
            case T_ATRIBUTE:
            case T_EXTERNAL_GRADIENT:
            case T_INTERNAL_GRADIENT:
            case T_OKROGLOST:
            case T_RESPONSE:
            case T_VOLUMENT:
            	{
            		switch ( this->LA(2) )
            		{
            		case T_LESS_THAN:
            		case T_LESS_THAN_OR_EQ:
            		case T_MORE_THAN:
            		case T_MORE_THAN_OR_EQ:
            		case T_NOT_EQUAL:
            			{
            				alt6=2;
            			}
            		    break;
            		case T_EQUALS:
            			{
            				switch ( this->LA(3) )
            				{
            				case T_LPAREN:
            					{
            						alt6=3;
            					}
            				    break;
            				case DOUBLENUMBER:
            					{
            						alt6=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return retval;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 6 );
            				    ex->set_state( 4 );


            				    goto rulesqlWhereEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 2 );


            		    goto rulesqlWhereEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto rulesqlWhereEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:302:4: val1= DOUBLENUMBER op1= relOp kv1= sqlWhereKeyword
        	    {
        	        val1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere890);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere894);
        	        op1=relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere898);
        	        kv1=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             
        	            		retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv1.start, kv1.stop))
        	            ;

        	            		retval.stavek= new SqlWhere(
        	            op1
        	            , toDouble(val1), 
        	            (this->get_strstream()->toStringTT(kv1.start, kv1.stop))
        	            );

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:307:4: kv2= sqlWhereKeyword op2= relOp val2= DOUBLENUMBER
        	    {
        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere908);
        	        kv2=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere912);
        	        op2=relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        val2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere916);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             
        	            		retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv2.start, kv2.stop))
        	            ;

        	            		retval.stavek= new SqlWhere(
        	            op2
        	            , toDouble(val2), 
        	            (this->get_strstream()->toStringTT(kv2.start, kv2.stop))
        	            );

        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:312:4: kv3= sqlWhereKeyword '=' '(' sql[\"\"] ')'
        	    {
        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere926);
        	        kv3=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_sqlWhere928);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_sqlWhere930);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_sql_in_sqlWhere932);
        	        sql6=sql("");

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_sqlWhere935);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	            		retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv3.start, kv3.stop))
        	            ;

        	            		retval.stavek= new SqlWhere(
        	            sql6
        	            , (this->get_strstream()->toStringTT(kv3.start, kv3.stop))
        	            );

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereEx; /* Prevent compiler warnings */
    rulesqlWhereEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end sqlWhere */

/**
 * $ANTLR start sqlWhereKeyword
 * Grammar/MorphDSL.g:319:1: sqlWhereKeyword : ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' );
 */
MorphDSLParser_sqlWhereKeyword_return
MorphDSLParser::sqlWhereKeyword()
{
    MorphDSLParser_sqlWhereKeyword_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



    	try {
    {
        // Grammar/MorphDSL.g:320:2: ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= T_AREA_SQL) && (this->LA(1) <= T_ATRIBUTE)) || this->LA(1) == T_EXTERNAL_GRADIENT || this->LA(1) == T_INTERNAL_GRADIENT || this->LA(1) == T_OKROGLOST || this->LA(1) == T_RESPONSE || this->LA(1) == T_VOLUMENT )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulesqlWhereKeywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereKeywordEx; /* Prevent compiler warnings */
    rulesqlWhereKeywordEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end sqlWhereKeyword */

/**
 * $ANTLR start relOp
 * Grammar/MorphDSL.g:329:1: relOp returns [RelOp::RelacijskiOperatorji relOperator] : ( '>' | '<' | '=' | '!=' | '>=' | '<=' );
 */
RelOp::RelacijskiOperatorji
MorphDSLParser::relOp()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    RelOp::RelacijskiOperatorji relOperator;


    /* Initialize rule variables
     */

     relOperator= RelOp::ERR;


    	try {
    {
        {
            //  Grammar/MorphDSL.g:331:2: ( '>' | '<' | '=' | '!=' | '>=' | '<=' )

            ANTLR_UINT32 alt7;

            alt7=6;

            switch ( this->LA(1) )
            {
            case T_MORE_THAN:
            	{
            		alt7=1;
            	}
                break;
            case T_LESS_THAN:
            	{
            		alt7=2;
            	}
                break;
            case T_EQUALS:
            	{
            		alt7=3;
            	}
                break;
            case T_NOT_EQUAL:
            	{
            		alt7=4;
            	}
                break;
            case T_MORE_THAN_OR_EQ:
            	{
            		alt7=5;
            	}
                break;
            case T_LESS_THAN_OR_EQ:
            	{
            		alt7=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return relOperator;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto rulerelOpEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:331:4: '>'
        	    {
        	         this->matchToken(T_MORE_THAN, &FOLLOW_T_MORE_THAN_in_relOp1002);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::GT;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:332:4: '<'
        	    {
        	         this->matchToken(T_LESS_THAN, &FOLLOW_T_LESS_THAN_in_relOp1010);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::LT;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:333:4: '='
        	    {
        	         this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_relOp1018);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::EQ;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:334:4: '!='
        	    {
        	         this->matchToken(T_NOT_EQUAL, &FOLLOW_T_NOT_EQUAL_in_relOp1026);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::NE;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // Grammar/MorphDSL.g:335:4: '>='
        	    {
        	         this->matchToken(T_MORE_THAN_OR_EQ, &FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1033);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::GE;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // Grammar/MorphDSL.g:336:4: '<='
        	    {
        	         this->matchToken(T_LESS_THAN_OR_EQ, &FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1040);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::LE;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulerelOpEx; /* Prevent compiler warnings */
    rulerelOpEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return relOperator;
}
/* $ANTLR end relOp */

/**
 * $ANTLR start operatorsBB
 * Grammar/MorphDSL.g:339:1: operatorsBB : ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    cId;
    const CommonTokenType*    uId1;
    const CommonTokenType*    uId2;
    const CommonTokenType*    iId1;
    const CommonTokenType*    iId2;
    const CommonTokenType*    wId1;
    const CommonTokenType*    wId2;
    const CommonTokenType*    hId1;
    const CommonTokenType*    hId2;
    const CommonTokenType*    bId;

    /* Initialize rule variables
     */

    cId       = NULL;
    uId1       = NULL;
    uId2       = NULL;
    iId1       = NULL;
    iId2       = NULL;
    wId1       = NULL;
    wId2       = NULL;
    hId1       = NULL;
    hId2       = NULL;
    bId       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:339:13: ( ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) )
        // Grammar/MorphDSL.g:340:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
        {
            // Grammar/MorphDSL.g:340:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
            {
                int alt8=6;
                switch ( this->LA(1) )
                {
                case T_COMPLEMENT:
                	{
                		alt8=1;
                	}
                    break;
                case T_UNION:
                	{
                		alt8=2;
                	}
                    break;
                case T_INTERSECTION:
                	{
                		alt8=3;
                	}
                    break;
                case T_WITHOUT:
                	{
                		alt8=4;
                	}
                    break;
                case T_HITMISS:
                	{
                		alt8=5;
                	}
                    break;
                case T_BOUNDARY:
                	{
                		alt8=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 8 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBEx;

                }

                switch (alt8)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:340:4: 'complement' '(' cId= ID ')'
            	    {
            	         this->matchToken(T_COMPLEMENT, &FOLLOW_T_COMPLEMENT_in_operatorsBB1056);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1058);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1062);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1064);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            	complementImpl(cId); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:341:4: 'union' '(' uId1= ID ',' uId2= ID ')'
            	    {
            	         this->matchToken(T_UNION, &FOLLOW_T_UNION_in_operatorsBB1071);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1073);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1077);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1079);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1083);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1085);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             unionImpl(uId1, uId2); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:342:4: 'intersection' '(' iId1= ID ',' iId2= ID ')'
            	    {
            	         this->matchToken(T_INTERSECTION, &FOLLOW_T_INTERSECTION_in_operatorsBB1092);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1094);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1098);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1100);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1104);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1106);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             intersectionImpl(iId1, iId2); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:343:4: 'without' '(' wId1= ID ',' wId2= ID ')'
            	    {
            	         this->matchToken(T_WITHOUT, &FOLLOW_T_WITHOUT_in_operatorsBB1113);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1115);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1119);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1121);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1125);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1127);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             withoutImpl(wId1, wId2); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:344:4: 'hitmiss' '(' hId1= ID ',' hId2= ID ')'
            	    {
            	         this->matchToken(T_HITMISS, &FOLLOW_T_HITMISS_in_operatorsBB1134);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1136);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1140);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1142);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1146);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1148);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             hitMissImpl(hId1, hId2); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:345:4: 'boundary' '(' bId= ID ')'
            	    {
            	         this->matchToken(T_BOUNDARY, &FOLLOW_T_BOUNDARY_in_operatorsBB1155);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1157);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        bId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB1161);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1163);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             boundaryImpl(bId); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBEx; /* Prevent compiler warnings */
    ruleoperatorsBBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsBB */

/**
 * $ANTLR start operatorsGG
 * Grammar/MorphDSL.g:348:1: operatorsGG : ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ) ;
 */
void
MorphDSLParser::operatorsGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    nId;
    const CommonTokenType*    mId;
    const CommonTokenType*    mDbl;
    const CommonTokenType*    mDbl2;
    const CommonTokenType*    mId2;
    const CommonTokenType*    mId3;
    const CommonTokenType*    mId4;
    const CommonTokenType*    cId;
    const CommonTokenType*    sId1;
    const CommonTokenType*    sId2;
    const CommonTokenType*    giId;
    const CommonTokenType*    geId;
    const CommonTokenType*    dpmId1;
    const CommonTokenType*    dpmId2;
    const CommonTokenType*    dpaId1;
    const CommonTokenType*    dpaId2;
    const CommonTokenType*    dmpId1;
    const CommonTokenType*    dmpId2;
    const CommonTokenType*    dapId1;
    const CommonTokenType*    dapId2;
    const CommonTokenType*    msls_1_Id1;
    const CommonTokenType*    msls_1_Id2;
    const CommonTokenType*    msls_2_Id1;
    const CommonTokenType*    msls_2_Id2;
    const CommonTokenType*    watershadeId;
    const CommonTokenType*    watershadeMarkerId2;
    const CommonTokenType*    watershadeMarkerId1;
    MorphDSLParser_interval_return interval7;
    typedef	MorphDSLParser_interval_return RETURN_TYPE_interval7;

    /* Initialize rule variables
     */

    nId       = NULL;
    mId       = NULL;
    mDbl       = NULL;
    mDbl2       = NULL;
    mId2       = NULL;
    mId3       = NULL;
    mId4       = NULL;
    cId       = NULL;
    sId1       = NULL;
    sId2       = NULL;
    giId       = NULL;
    geId       = NULL;
    dpmId1       = NULL;
    dpmId2       = NULL;
    dpaId1       = NULL;
    dpaId2       = NULL;
    dmpId1       = NULL;
    dmpId2       = NULL;
    dapId1       = NULL;
    dapId2       = NULL;
    msls_1_Id1       = NULL;
    msls_1_Id2       = NULL;
    msls_2_Id1       = NULL;
    msls_2_Id2       = NULL;
    watershadeId       = NULL;
    watershadeMarkerId2       = NULL;
    watershadeMarkerId1       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:348:13: ( ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ) )
        // Grammar/MorphDSL.g:349:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
        {
            // Grammar/MorphDSL.g:349:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
            {
                int alt9=17;
                switch ( this->LA(1) )
                {
                case T_NEGATE:
                	{
                		alt9=1;
                	}
                    break;
                case T_NORMALIZE:
                	{
                		alt9=2;
                	}
                    break;
                case T_MULTIPLY:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case DOUBLENUMBER:
                									{
                										alt9=3;
                									}
                								    break;
                								case ID:
                									{
                										alt9=5;
                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 9 );
                								    ex->set_state( 25 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 9 );
                						    ex->set_state( 15 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case DOUBLENUMBER:
                					{
                						alt9=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 10 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_CROP:
                	{
                		alt9=6;
                	}
                    break;
                case T_SUBTRACT:
                	{
                		alt9=7;
                	}
                    break;
                case T_GRADIENT:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_INTERNAL:
                					{
                						alt9=8;
                					}
                				    break;
                				case T_EXTERNAL:
                					{
                						alt9=9;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 11 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 6 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_DIFERENTIALPROFILES:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MORPHOLOGICAL:
                					{
                						alt9=10;
                					}
                				    break;
                				case T_ATTRIBUTE:
                					{
                						alt9=11;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 12 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 7 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_MAPPING:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_DMP:
                					{
                						alt9=12;
                					}
                				    break;
                				case T_DAP:
                					{
                						alt9=13;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 13 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 8 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_SEGMENTATION:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MSLS:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																{
                																    int LA9_36 = this->LA(9);
                																    if ( (this->msynpred( antlr3::ClassForwarder<synpred49_MorphDSL>() )))
                																    {
                																        alt9=14;
                																    }
                																    else if ( (this->msynpred( antlr3::ClassForwarder<synpred50_MorphDSL>() )))
                																    {
                																        alt9=15;
                																    }
                																    else
                																    {
                																        if (this->get_backtracking()>0)
                																        {
                																            this->set_failedflag( true );
                																            return ;
                																        }


                																        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																        ex->set_decisionNum( 9 );
                																        ex->set_state( 36 );


                																        goto ruleoperatorsGGEx;

                																    }
                																}
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 9 );
                														    ex->set_state( 35 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 9 );
                												    ex->set_state( 32 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 9 );
                										    ex->set_state( 30 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 9 );
                								    ex->set_state( 26 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 9 );
                						    ex->set_state( 23 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case T_WATHERSHADE:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_RPAREN:
                											{
                												alt9=16;
                											}
                										    break;
                										case T_COMMA:
                											{
                												alt9=17;
                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 9 );
                										    ex->set_state( 31 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 9 );
                								    ex->set_state( 27 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 9 );
                						    ex->set_state( 24 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 14 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 9 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleoperatorsGGEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:349:4: 'negate' '(' nId= ID ')'
            	    {
            	         this->matchToken(T_NEGATE, &FOLLOW_T_NEGATE_in_operatorsGG1181);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1183);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        nId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1187);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1189);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             negateImpl(nId); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:350:4: 'normalize'
            	    {
            	         this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorsGG1196);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             normalizeImpl(); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:351:4: 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1203);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1205);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1209);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1211);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG1215);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1217);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl(mId, toDouble(mDbl)); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:352:4: 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1224);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1226);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG1230);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1232);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1236);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1238);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl(toDouble(mDbl2), mId2); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:353:4: 'multiply' '(' mId3= ID ',' mId4= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1245);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1247);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId3 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1251);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1253);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId4 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1257);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1259);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl(mId3, mId4); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:354:4: 'crop' '(' cId= ID ',' interval ')'
            	    {
            	         this->matchToken(T_CROP, &FOLLOW_T_CROP_in_operatorsGG1267);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1269);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1273);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1275);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_interval_in_operatorsGG1277);
            	        interval7=interval();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1279);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             cropImpl(cId, 
            	            interval7.start
            	            , interval7.stop
            	            ); 
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:355:4: 'subtract' '(' sId1= ID ',' sId2= ID ')'
            	    {
            	         this->matchToken(T_SUBTRACT, &FOLLOW_T_SUBTRACT_in_operatorsGG1287);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1289);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1293);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1295);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1299);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1301);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             subtractImpl(sId1, sId2); 
            	        }


            	    }
            	    break;
            	case 8:
            	    // Grammar/MorphDSL.g:356:4: 'gradient' '(' 'INTERNAL' ',' giId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG1309);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1311);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_INTERNAL, &FOLLOW_T_INTERNAL_in_operatorsGG1313);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1315);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        giId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1319);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1321);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientInternalImpl(giId); 
            	        }


            	    }
            	    break;
            	case 9:
            	    // Grammar/MorphDSL.g:357:4: 'gradient' '(' 'EXTERNAL' ',' geId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG1329);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1331);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_EXTERNAL, &FOLLOW_T_EXTERNAL_in_operatorsGG1333);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1335);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        geId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1339);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1341);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientExternalImpl(geId); 
            	        }


            	    }
            	    break;
            	case 10:
            	    // Grammar/MorphDSL.g:358:4: 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1349);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1351);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MORPHOLOGICAL, &FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1353);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1355);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1359);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1361);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1365);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1367);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesMorphologicalImpl(dpmId1, dpmId2); 
            	        }


            	    }
            	    break;
            	case 11:
            	    // Grammar/MorphDSL.g:359:4: 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1375);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1377);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_ATTRIBUTE, &FOLLOW_T_ATTRIBUTE_in_operatorsGG1379);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1381);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1385);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1387);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1391);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1393);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesAttributeImpl(dpaId1, dpaId2); 
            	        }


            	    }
            	    break;
            	case 12:
            	    // Grammar/MorphDSL.g:360:4: 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1401);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1403);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DMP, &FOLLOW_T_DMP_in_operatorsGG1405);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1407);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1411);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1413);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1417);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1421);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 13:
            	    // Grammar/MorphDSL.g:361:4: 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1429);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1431);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DAP, &FOLLOW_T_DAP_in_operatorsGG1433);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1435);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1439);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1441);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1445);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1449);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 14:
            	    // Grammar/MorphDSL.g:362:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1457);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1459);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1461);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1463);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1467);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1469);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1473);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1475);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls1Impl(msls_1_Id1, msls_1_Id2); 
            	        }


            	    }
            	    break;
            	case 15:
            	    // Grammar/MorphDSL.g:363:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1483);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1485);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1487);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1489);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1493);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1495);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1499);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1501);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls2Impl(msls_2_Id1, msls_2_Id2); 
            	        }


            	    }
            	    break;
            	case 16:
            	    // Grammar/MorphDSL.g:364:4: 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1509);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1511);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1513);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1515);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        watershadeId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1519);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1521);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeImpl(watershadeId); 
            	        }


            	    }
            	    break;
            	case 17:
            	    // Grammar/MorphDSL.g:368:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            	    {
            	        // Grammar/MorphDSL.g:368:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            	        // Grammar/MorphDSL.g:368:5: 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')'
            	        {
            	             this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1533);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1535);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1537);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1539);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            watershadeMarkerId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1543);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1545);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            watershadeMarkerId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1549);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1551);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeMarkerImpl(watershadeMarkerId1, watershadeMarkerId2); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGGEx; /* Prevent compiler warnings */
    ruleoperatorsGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsGG */

/**
 * $ANTLR start interval
 * Grammar/MorphDSL.g:371:1: interval returns [double start, double stop] : dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER ;
 */
MorphDSLParser_interval_return
MorphDSLParser::interval()
{
    MorphDSLParser_interval_return retval(this);


    const CommonTokenType*    dbl1;
    const CommonTokenType*    dbl2;

    /* Initialize rule variables
     */

    dbl1       = NULL;
    dbl2       = NULL;
    retval.call_start_placeholder(); 



    	try {
    {
        // Grammar/MorphDSL.g:371:44: (dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER )
        // Grammar/MorphDSL.g:372:2: dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER
        {
            dbl1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1573);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_interval1575);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            dbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1579);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {

                		istringstream((dbl1->getText())) >> 
                retval.start
                ;
                		istringstream((dbl2->getText())) >> 
                retval.stop
                ;
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end interval */

/**
 * $ANTLR start operatorsBBGG
 * Grammar/MorphDSL.g:378:1: operatorsBBGG : ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) ;
 */
void
MorphDSLParser::operatorsBBGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


    	try {
    {
        // Grammar/MorphDSL.g:378:15: ( ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) )
        // Grammar/MorphDSL.g:379:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
        {
            // Grammar/MorphDSL.g:379:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
            {
                int alt10=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 5 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 1 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_DILATE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 6 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 2 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_OPEN:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt10=3;
                					}
                				    break;
                				case ID:
                					{
                						alt10=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 7 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_CLOSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt10=3;
                					}
                				    break;
                				case ID:
                					{
                						alt10=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 8 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 4 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 10 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBGGEx;

                }

                switch (alt10)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:379:4: operatorsBOX
            	    {
            	        this->followPush(FOLLOW_operatorsBOX_in_operatorsBBGG1594);
            	        operatorsBOX();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:380:4: operatorsRECONSTRUCTION
            	    {
            	        this->followPush(FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1600);
            	        operatorsRECONSTRUCTION();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:381:4: operatorsAREA
            	    {
            	        this->followPush(FOLLOW_operatorsAREA_in_operatorsBBGG1606);
            	        operatorsAREA();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:382:4: operatorsATTRIBUTE
            	    {
            	        this->followPush(FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1612);
            	        operatorsATTRIBUTE();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBGGEx; /* Prevent compiler warnings */
    ruleoperatorsBBGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsBBGG */

/**
 * $ANTLR start operatorsBOX
 * Grammar/MorphDSL.g:385:1: operatorsBOX : ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBOX()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eNum;
    const CommonTokenType*    eId;
    const CommonTokenType*    dNum;
    const CommonTokenType*    dId;
    const CommonTokenType*    oNum;
    const CommonTokenType*    oId;
    const CommonTokenType*    cNum;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eNum       = NULL;
    eId       = NULL;
    dNum       = NULL;
    dId       = NULL;
    oNum       = NULL;
    oId       = NULL;
    cNum       = NULL;
    cId       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:385:14: ( ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:386:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:386:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
            {
                int alt11=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		alt11=1;
                	}
                    break;
                case T_DILATE:
                	{
                		alt11=2;
                	}
                    break;
                case T_OPEN:
                	{
                		alt11=3;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt11=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBOXEx;

                }

                switch (alt11)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:386:4: 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')'
            	    {
            	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsBOX1629);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1631);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1633);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1635);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1639);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1641);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1643);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1647);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1649);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             erodeBoxImpl(toDouble(eNum), eId); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:387:4: 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')'
            	    {
            	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsBOX1657);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1659);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1661);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1663);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1667);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1669);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1671);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1675);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1677);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             dilateBoxImpl(toDouble(dNum), dId); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:388:4: 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsBOX1684);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1686);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1688);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1690);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1694);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1696);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1698);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1702);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1704);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openBoxImpl(toDouble(oNum), oId); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:389:4: 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsBOX1713);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1715);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1717);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1719);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1723);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1725);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1727);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1731);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1733);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeBoxImpl(toDouble(cNum), cId); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBOXEx; /* Prevent compiler warnings */
    ruleoperatorsBOXEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsBOX */

/**
 * $ANTLR start operatorsRECONSTRUCTION
 * Grammar/MorphDSL.g:392:1: operatorsRECONSTRUCTION : ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' );
 */
void
MorphDSLParser::operatorsRECONSTRUCTION()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eId2;
    const CommonTokenType*    eId1;
    const CommonTokenType*    dId2;
    const CommonTokenType*    dId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eId2       = NULL;
    eId1       = NULL;
    dId2       = NULL;
    dId1       = NULL;
    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


    	try {
    {
        {
            //  Grammar/MorphDSL.g:392:25: ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' )

            ANTLR_UINT32 alt12;

            alt12=4;

            switch ( this->LA(1) )
            {
            case T_ERODE:
            	{
            		alt12=1;
            	}
                break;
            case T_DILATE:
            	{
            		alt12=2;
            	}
                break;
            case T_OPEN:
            	{
            		alt12=3;
            	}
                break;
            case T_CLOSE:
            	{
            		alt12=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 12 );
                ex->set_state( 0 );


                goto ruleoperatorsRECONSTRUCTIONEx;

            }

            switch (alt12)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:394:4: 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')'
        	    {
        	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1760);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1762);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1764);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1766);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1770);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1772);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1776);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1778);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             erodeImpl(eId1, eId2); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:396:4: 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')'
        	    {
        	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1788);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1790);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1792);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1794);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1798);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1800);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1804);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1806);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             dilateImpl(dId1, dId2); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:397:4: 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')'
        	    {
        	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1813);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1815);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1817);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1819);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1821);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1823);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1827);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1829);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1831);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1835);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1837);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             openImpl(toDouble(oDbl), oId); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:398:4: 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')'
        	    {
        	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1845);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1847);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1849);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1851);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1853);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1855);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1859);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1861);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1863);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1867);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1869);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             closeImpl(toDouble(cDbl), cId); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsRECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleoperatorsRECONSTRUCTIONEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsRECONSTRUCTION */

/**
 * $ANTLR start operatorsAREA
 * Grammar/MorphDSL.g:401:1: operatorsAREA : ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsAREA()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:401:15: ( ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:402:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:402:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt13=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt13=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto ruleoperatorsAREAEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:402:4: 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsAREA1887);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1889);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1891);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1893);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1897);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1899);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1903);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1905);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openArea(toDouble(oDbl), oId); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:403:4: 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsAREA1912);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1914);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1916);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1918);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1922);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1924);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1928);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1930);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeArea(toDouble(cDbl), cId); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsAREAEx; /* Prevent compiler warnings */
    ruleoperatorsAREAEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsAREA */

/**
 * $ANTLR start operatorsATTRIBUTE
 * Grammar/MorphDSL.g:406:1: operatorsATTRIBUTE : ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) ;
 */
void
MorphDSLParser::operatorsATTRIBUTE()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId2;
    const CommonTokenType*    cId1;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId2;

    /* Initialize rule variables
     */

    oId1       = NULL;
    oDbl       = NULL;
    oId2       = NULL;
    cId1       = NULL;
    cDbl       = NULL;
    cId2       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:406:20: ( ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) )
        // Grammar/MorphDSL.g:407:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
        {
            // Grammar/MorphDSL.g:407:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt14=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt14=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto ruleoperatorsATTRIBUTEEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:407:4: 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsATTRIBUTE1947);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1949);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1953);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1955);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1959);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1961);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1965);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1967);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openAttribute(oId1, toDouble(oDbl), oId2); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:408:4: 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1974);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1976);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1980);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1982);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1986);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1988);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1992);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1994);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeAttribute(cId1, toDouble(cDbl), cId2); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsATTRIBUTEEx; /* Prevent compiler warnings */
    ruleoperatorsATTRIBUTEEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsATTRIBUTE */

/**
 * $ANTLR start operatorsBG
 * Grammar/MorphDSL.g:411:1: operatorsBG : 'distanceTransform' '(' ID ')' ;
 */
void
MorphDSLParser::operatorsBG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID8;

    /* Initialize rule variables
     */

    ID8       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:411:13: ( 'distanceTransform' '(' ID ')' )
        // Grammar/MorphDSL.g:411:15: 'distanceTransform' '(' ID ')'
        {
             this->matchToken(T_DISTANCETRANSFORM, &FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2008);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBG2010);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID8 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBG2012);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBG2014);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 distanceTransformImpl(ID8); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBGEx; /* Prevent compiler warnings */
    ruleoperatorsBGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsBG */

/**
 * $ANTLR start operatorsGB
 * Grammar/MorphDSL.g:413:1: operatorsGB : 'treshold' '(' DOUBLENUMBER ',' ID ')' ;
 */
void
MorphDSLParser::operatorsGB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    DOUBLENUMBER9;
    const CommonTokenType*    ID10;

    /* Initialize rule variables
     */

    DOUBLENUMBER9       = NULL;
    ID10       = NULL;


    	try {
    {
        // Grammar/MorphDSL.g:413:13: ( 'treshold' '(' DOUBLENUMBER ',' ID ')' )
        // Grammar/MorphDSL.g:413:15: 'treshold' '(' DOUBLENUMBER ',' ID ')'
        {
             this->matchToken(T_TRESHOLD, &FOLLOW_T_TRESHOLD_in_operatorsGB2024);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGB2026);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            DOUBLENUMBER9 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGB2028);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGB2030);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID10 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGB2032);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGB2034);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 tresholdImpl(toDouble(DOUBLENUMBER9), ID10); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGBEx; /* Prevent compiler warnings */
    ruleoperatorsGBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end operatorsGB */

/**
 * $ANTLR start marker
 * Grammar/MorphDSL.g:415:1: marker : ( ID | DOUBLENUMBER ) ;
 */
void
MorphDSLParser::marker()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


    	try {
    {
        // Grammar/MorphDSL.g:415:8: ( ( ID | DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= DOUBLENUMBER) && (this->LA(1) <= ID)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemarkerEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemarkerEx; /* Prevent compiler warnings */
    rulemarkerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return ;
}
/* $ANTLR end marker */

/**
 * $ANTLR start vector
 * Grammar/MorphDSL.g:420:1: vector : (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) ;
 */
MorphDSLParser_vector_return
MorphDSLParser::vector()
{
    MorphDSLParser_vector_return retval(this);


    const CommonTokenType*    st;
    const CommonTokenType*    kncSt;

    /* Initialize rule variables
     */

     std::vector<double> tmp; 
    st       = NULL;
    kncSt       = NULL;
    retval.call_start_placeholder(); 



    	try {
    {
        // Grammar/MorphDSL.g:428:2: ( (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:429:2: (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER )
        {
            // Grammar/MorphDSL.g:429:2: (st= DOUBLENUMBER ( ',' ) )*

            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case DOUBLENUMBER:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_COMMA:
                			{
                				alt15=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:429:3: st= DOUBLENUMBER ( ',' )
            	    {
            	        st =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector2085);
            	        if  (this->hasException())
            	        {
            	            goto rulevectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        // Grammar/MorphDSL.g:429:19: ( ',' )
            	        // Grammar/MorphDSL.g:429:21: ','
            	        {
            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_vector2089);
            	            if  (this->hasException())
            	            {
            	                goto rulevectorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             tmp.push_back(toDouble(st)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


            // Grammar/MorphDSL.g:429:65: (kncSt= DOUBLENUMBER )
            // Grammar/MorphDSL.g:429:66: kncSt= DOUBLENUMBER
            {
                kncSt =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector2102);
                if  (this->hasException())
                {
                    goto rulevectorEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                     tmp.push_back(toDouble(kncSt)); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		std::string fNew = zadnjaSpremenljivka;

                		std::map<string, std::vector<double>>::iterator it = vect.begin();
                		vect.insert (it, std::pair<string, std::vector<double>>(fNew, tmp));
                	
            }
        }

	    } 
  catch(ANTLR_Exception< MorphDSLLexerImplTraits, RECOGNITION_EXCEPTION, StreamType> rex) {
    rex.print();
	set_failedflag(true);
  }


    return retval;
}
/* $ANTLR end vector */

// $ANTLR start synpred49_MorphDSL
void MorphDSLParser::msynpred49_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_1_Id1;
	const CommonTokenType*    msls_1_Id2;

	msls_1_Id1       = NULL;
	msls_1_Id2       = NULL;

    // Grammar/MorphDSL.g:362:4: ( 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' )
    // Grammar/MorphDSL.g:362:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1457);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred49_MorphDSL1459);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred49_MorphDSL1461);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred49_MorphDSL1463);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred49_MorphDSL1467);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred49_MorphDSL1469);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred49_MorphDSL1473);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred49_MorphDSL1475);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred49_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred49_MorphDSLEx: ;

}
// $ANTLR end synpred49_MorphDSL

// $ANTLR start synpred50_MorphDSL
void MorphDSLParser::msynpred50_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_2_Id1;
	const CommonTokenType*    msls_2_Id2;

	msls_2_Id1       = NULL;
	msls_2_Id2       = NULL;

    // Grammar/MorphDSL.g:363:4: ( 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' )
    // Grammar/MorphDSL.g:363:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred50_MorphDSL1483);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred50_MorphDSL1485);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred50_MorphDSL1487);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred50_MorphDSL1489);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred50_MorphDSL1493);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred50_MorphDSL1495);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred50_MorphDSL1499);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred50_MorphDSL1501);
        if  (this->hasException())
        {
            goto rulesynpred50_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred50_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred50_MorphDSLEx: ;

}
// $ANTLR end synpred50_MorphDSL
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred49_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred49_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred50_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred50_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
