/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Grammar/MorphDSL.g
 *     -                            On : 2015-03-10 10:46:20
 *     -                for the parser : MorphDSLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */
using namespace std;
/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "stdafx.h"
#include    "MorphDSLParser.hpp"
#include	"Razredi/SqlWhere.h"
#include	"Razredi/Sql.h"

/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 	LPM_MorphDSL  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MorphDSLParserTokenNames[64+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DOUBLENUMBER",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "T_AREA",
        (ANTLR_UINT8*) "T_ATTRIBUTE",
        (ANTLR_UINT8*) "T_BOUNDARY",
        (ANTLR_UINT8*) "T_BOX",
        (ANTLR_UINT8*) "T_CLOSE",
        (ANTLR_UINT8*) "T_COMMA",
        (ANTLR_UINT8*) "T_COMPLEMENT",
        (ANTLR_UINT8*) "T_CROP",
        (ANTLR_UINT8*) "T_DAP",
        (ANTLR_UINT8*) "T_DIFERENTIALPROFILES",
        (ANTLR_UINT8*) "T_DILATE",
        (ANTLR_UINT8*) "T_DISTANCETRANSFORM",
        (ANTLR_UINT8*) "T_DMP",
        (ANTLR_UINT8*) "T_DOUBLE_QUOTE",
        (ANTLR_UINT8*) "T_EQUALS",
        (ANTLR_UINT8*) "T_ERODE",
        (ANTLR_UINT8*) "T_EXTERNAL",
        (ANTLR_UINT8*) "T_GRADIENT",
        (ANTLR_UINT8*) "T_HITMISS",
        (ANTLR_UINT8*) "T_INTERNAL",
        (ANTLR_UINT8*) "T_INTERSECTION",
        (ANTLR_UINT8*) "T_LESS_THAN",
        (ANTLR_UINT8*) "T_LOAD",
        (ANTLR_UINT8*) "T_LPAREN",
        (ANTLR_UINT8*) "T_MAPPING",
        (ANTLR_UINT8*) "T_MORE_THAN",
        (ANTLR_UINT8*) "T_MORPHOLOGICAL",
        (ANTLR_UINT8*) "T_MSLS",
        (ANTLR_UINT8*) "T_MULTIPLY",
        (ANTLR_UINT8*) "T_NEGATE",
        (ANTLR_UINT8*) "T_NORMALIZE",
        (ANTLR_UINT8*) "T_NOT_EQUAL",
        (ANTLR_UINT8*) "T_OPEN",
        (ANTLR_UINT8*) "T_RECONSTRUCTION",
        (ANTLR_UINT8*) "T_RPAREN",
        (ANTLR_UINT8*) "T_SEGMENTATION",
        (ANTLR_UINT8*) "T_STAR",
        (ANTLR_UINT8*) "T_SUBTRACT",
        (ANTLR_UINT8*) "T_TRESHOLD",
        (ANTLR_UINT8*) "T_UNION",
        (ANTLR_UINT8*) "T_WATHERSHADE",
        (ANTLR_UINT8*) "T_WITHOUT",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'AND'",
        (ANTLR_UINT8*) "'FROM'",
        (ANTLR_UINT8*) "'SELECT'",
        (ANTLR_UINT8*) "'WHERE'",
        (ANTLR_UINT8*) "'area'",
        (ANTLR_UINT8*) "'atribute'",
        (ANTLR_UINT8*) "'attribute'",
        (ANTLR_UINT8*) "'external_gradient'",
        (ANTLR_UINT8*) "'external_greadient'",
        (ANTLR_UINT8*) "'internal_gradient'",
        (ANTLR_UINT8*) "'mask'",
        (ANTLR_UINT8*) "'okroglost'",
        (ANTLR_UINT8*) "'response'",
        (ANTLR_UINT8*) "'set'",
        (ANTLR_UINT8*) "'volument'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Grammar/MorphDSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSLParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MorphDSLParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MorphDSLParserTokenNames );


}

void
MorphDSLParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MorphDSLParser::~MorphDSLParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MorphDSLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_load_in_program453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_load_in_program453( FOLLOW_load_in_program453_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_program455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000042) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_assignment_in_program455( FOLLOW_assignment_in_program455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load467( FOLLOW_ID_in_load467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_load469_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_load469( FOLLOW_T_EQUALS_in_load469_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LOAD_in_load471_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LOAD_in_load471( FOLLOW_T_LOAD_in_load471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_load473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_load473( FOLLOW_T_LPAREN_in_load473_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load475( FOLLOW_T_DOUBLE_QUOTE_in_load475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load479( FOLLOW_ID_in_load479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load481_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load481( FOLLOW_T_DOUBLE_QUOTE_in_load481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_load483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_load483( FOLLOW_T_RPAREN_in_load483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_figurevector_in_assignment499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_figurevector_in_assignment499( FOLLOW_figurevector_in_assignment499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_assignment501_bits[]	= { ANTLR_UINT64_LIT(0x0082E971168ED420) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_assignment501( FOLLOW_T_EQUALS_in_assignment501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBB_in_assignment507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBB_in_assignment507( FOLLOW_operatorsBB_in_assignment507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGG_in_assignment513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGG_in_assignment513( FOLLOW_operatorsGG_in_assignment513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBBGG_in_assignment518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBBGG_in_assignment518( FOLLOW_operatorsBBGG_in_assignment518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBG_in_assignment523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBG_in_assignment523( FOLLOW_operatorsBG_in_assignment523_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGB_in_assignment528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGB_in_assignment528( FOLLOW_operatorsGB_in_assignment528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_vector_in_assignment533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_vector_in_assignment533( FOLLOW_vector_in_assignment533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_assignment538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_assignment538( FOLLOW_sql_in_assignment538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_figurevector549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_figurevector549( FOLLOW_ID_in_figurevector549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_55_in_sql576_bits[]	= { ANTLR_UINT64_LIT(0xE800104000000000), ANTLR_UINT64_LIT(0x000000000000000D) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_55_in_sql576( FOLLOW_55_in_sql576_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorSql_in_sql579_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorSql_in_sql579( FOLLOW_operatorSql_in_sql579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_STAR_in_sql583_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_STAR_in_sql583( FOLLOW_T_STAR_in_sql583_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_54_in_sql587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_54_in_sql587( FOLLOW_54_in_sql587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_sql589_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_sql589( FOLLOW_ID_in_sql589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_56_in_sql591_bits[]	= { ANTLR_UINT64_LIT(0x5600000000000020), ANTLR_UINT64_LIT(0x000000000000000B) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_56_in_sql591( FOLLOW_56_in_sql591_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql595_bits[]	= { ANTLR_UINT64_LIT(0x0020000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql595( FOLLOW_sqlWhere_in_sql595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_53_in_sql603_bits[]	= { ANTLR_UINT64_LIT(0x5600000000000020), ANTLR_UINT64_LIT(0x000000000000000B) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_53_in_sql603( FOLLOW_53_in_sql603_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql607_bits[]	= { ANTLR_UINT64_LIT(0x0020000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql607( FOLLOW_sqlWhere_in_sql607_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorName_in_operatorSql630_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorName_in_operatorSql630( FOLLOW_operatorName_in_operatorSql630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorSql632_bits[]	= { ANTLR_UINT64_LIT(0xE800000000000000), ANTLR_UINT64_LIT(0x000000000000000D) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorSql632( FOLLOW_T_LPAREN_in_operatorSql632_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_selectKeyword_in_operatorSql634_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_selectKeyword_in_operatorSql634( FOLLOW_selectKeyword_in_operatorSql634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorSql636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorSql636( FOLLOW_T_RPAREN_in_operatorSql636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_selectKeyword_in_operatorSql641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_selectKeyword_in_operatorSql641( FOLLOW_selectKeyword_in_operatorSql641_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorName692_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorName692( FOLLOW_T_NORMALIZE_in_operatorName692_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere707_bits[]	= { ANTLR_UINT64_LIT(0x0018008220400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere707( FOLLOW_DOUBLENUMBER_in_sqlWhere707_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere711_bits[]	= { ANTLR_UINT64_LIT(0x5600000000000000), ANTLR_UINT64_LIT(0x000000000000000B) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere711( FOLLOW_relOp_in_sqlWhere711_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere715( FOLLOW_sqlWhereKeyword_in_sqlWhere715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere726_bits[]	= { ANTLR_UINT64_LIT(0x0018008220400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere726( FOLLOW_sqlWhereKeyword_in_sqlWhere726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere730( FOLLOW_relOp_in_sqlWhere730_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere734( FOLLOW_DOUBLENUMBER_in_sqlWhere734_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere744( FOLLOW_sqlWhereKeyword_in_sqlWhere744_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_sqlWhere746_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_sqlWhere746( FOLLOW_T_EQUALS_in_sqlWhere746_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_sqlWhere748_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_sqlWhere748( FOLLOW_T_LPAREN_in_sqlWhere748_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_sqlWhere750_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_sqlWhere750( FOLLOW_sql_in_sqlWhere750_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_sqlWhere752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_sqlWhere752( FOLLOW_T_RPAREN_in_sqlWhere752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORE_THAN_in_relOp778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORE_THAN_in_relOp778( FOLLOW_T_MORE_THAN_in_relOp778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LESS_THAN_in_relOp786_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LESS_THAN_in_relOp786( FOLLOW_T_LESS_THAN_in_relOp786_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_relOp794_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_relOp794( FOLLOW_T_EQUALS_in_relOp794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NOT_EQUAL_in_relOp802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NOT_EQUAL_in_relOp802( FOLLOW_T_NOT_EQUAL_in_relOp802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_52_in_relOp809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_52_in_relOp809( FOLLOW_52_in_relOp809_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_51_in_relOp816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_51_in_relOp816( FOLLOW_51_in_relOp816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMPLEMENT_in_operatorsBB873_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMPLEMENT_in_operatorsBB873( FOLLOW_T_COMPLEMENT_in_operatorsBB873_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB875( FOLLOW_T_LPAREN_in_operatorsBB875_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB879_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB879( FOLLOW_ID_in_operatorsBB879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB881_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB881( FOLLOW_T_RPAREN_in_operatorsBB881_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_UNION_in_operatorsBB888_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_UNION_in_operatorsBB888( FOLLOW_T_UNION_in_operatorsBB888_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB890( FOLLOW_T_LPAREN_in_operatorsBB890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB894_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB894( FOLLOW_ID_in_operatorsBB894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB896( FOLLOW_T_COMMA_in_operatorsBB896_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB900_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB900( FOLLOW_ID_in_operatorsBB900_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB902( FOLLOW_T_RPAREN_in_operatorsBB902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERSECTION_in_operatorsBB909_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERSECTION_in_operatorsBB909( FOLLOW_T_INTERSECTION_in_operatorsBB909_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB911( FOLLOW_T_LPAREN_in_operatorsBB911_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB915_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB915( FOLLOW_ID_in_operatorsBB915_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB917_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB917( FOLLOW_T_COMMA_in_operatorsBB917_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB921_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB921( FOLLOW_ID_in_operatorsBB921_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB923( FOLLOW_T_RPAREN_in_operatorsBB923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WITHOUT_in_operatorsBB930_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WITHOUT_in_operatorsBB930( FOLLOW_T_WITHOUT_in_operatorsBB930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB932( FOLLOW_T_LPAREN_in_operatorsBB932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB936( FOLLOW_ID_in_operatorsBB936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB938( FOLLOW_T_COMMA_in_operatorsBB938_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB942_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB942( FOLLOW_ID_in_operatorsBB942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB944( FOLLOW_T_RPAREN_in_operatorsBB944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_HITMISS_in_operatorsBB951_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_HITMISS_in_operatorsBB951( FOLLOW_T_HITMISS_in_operatorsBB951_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB953_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB953( FOLLOW_T_LPAREN_in_operatorsBB953_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB957_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB957( FOLLOW_ID_in_operatorsBB957_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB959( FOLLOW_T_COMMA_in_operatorsBB959_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB963_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB963( FOLLOW_ID_in_operatorsBB963_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB965( FOLLOW_T_RPAREN_in_operatorsBB965_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOUNDARY_in_operatorsBB972_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOUNDARY_in_operatorsBB972( FOLLOW_T_BOUNDARY_in_operatorsBB972_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB974( FOLLOW_T_LPAREN_in_operatorsBB974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB978_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB978( FOLLOW_ID_in_operatorsBB978_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB980( FOLLOW_T_RPAREN_in_operatorsBB980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NEGATE_in_operatorsGG998_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NEGATE_in_operatorsGG998( FOLLOW_T_NEGATE_in_operatorsGG998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1000( FOLLOW_T_LPAREN_in_operatorsGG1000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1004_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1004( FOLLOW_ID_in_operatorsGG1004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1006( FOLLOW_T_RPAREN_in_operatorsGG1006_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorsGG1013_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorsGG1013( FOLLOW_T_NORMALIZE_in_operatorsGG1013_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1020_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1020( FOLLOW_T_MULTIPLY_in_operatorsGG1020_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1022_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1022( FOLLOW_T_LPAREN_in_operatorsGG1022_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1026( FOLLOW_ID_in_operatorsGG1026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1028( FOLLOW_T_COMMA_in_operatorsGG1028_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG1032_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG1032( FOLLOW_DOUBLENUMBER_in_operatorsGG1032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1034( FOLLOW_T_RPAREN_in_operatorsGG1034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1041_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1041( FOLLOW_T_MULTIPLY_in_operatorsGG1041_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1043( FOLLOW_T_LPAREN_in_operatorsGG1043_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG1047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG1047( FOLLOW_DOUBLENUMBER_in_operatorsGG1047_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1049( FOLLOW_T_COMMA_in_operatorsGG1049_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1053_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1053( FOLLOW_ID_in_operatorsGG1053_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1055_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1055( FOLLOW_T_RPAREN_in_operatorsGG1055_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1062_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1062( FOLLOW_T_MULTIPLY_in_operatorsGG1062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1064( FOLLOW_T_LPAREN_in_operatorsGG1064_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1068_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1068( FOLLOW_ID_in_operatorsGG1068_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1070( FOLLOW_T_COMMA_in_operatorsGG1070_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1074_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1074( FOLLOW_ID_in_operatorsGG1074_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1076( FOLLOW_T_RPAREN_in_operatorsGG1076_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CROP_in_operatorsGG1084_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CROP_in_operatorsGG1084( FOLLOW_T_CROP_in_operatorsGG1084_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1086_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1086( FOLLOW_T_LPAREN_in_operatorsGG1086_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1090_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1090( FOLLOW_ID_in_operatorsGG1090_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1092( FOLLOW_T_COMMA_in_operatorsGG1092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_interval_in_operatorsGG1094_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_interval_in_operatorsGG1094( FOLLOW_interval_in_operatorsGG1094_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1096_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1096( FOLLOW_T_RPAREN_in_operatorsGG1096_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SUBTRACT_in_operatorsGG1104_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SUBTRACT_in_operatorsGG1104( FOLLOW_T_SUBTRACT_in_operatorsGG1104_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1106_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1106( FOLLOW_T_LPAREN_in_operatorsGG1106_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1110( FOLLOW_ID_in_operatorsGG1110_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1112( FOLLOW_T_COMMA_in_operatorsGG1112_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1116_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1116( FOLLOW_ID_in_operatorsGG1116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1118( FOLLOW_T_RPAREN_in_operatorsGG1118_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG1126_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG1126( FOLLOW_T_GRADIENT_in_operatorsGG1126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1128_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1128( FOLLOW_T_LPAREN_in_operatorsGG1128_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_in_operatorsGG1130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_in_operatorsGG1130( FOLLOW_T_INTERNAL_in_operatorsGG1130_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1132( FOLLOW_T_COMMA_in_operatorsGG1132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1136_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1136( FOLLOW_ID_in_operatorsGG1136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1138( FOLLOW_T_RPAREN_in_operatorsGG1138_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG1146_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG1146( FOLLOW_T_GRADIENT_in_operatorsGG1146_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1148_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1148( FOLLOW_T_LPAREN_in_operatorsGG1148_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_in_operatorsGG1150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_in_operatorsGG1150( FOLLOW_T_EXTERNAL_in_operatorsGG1150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1152( FOLLOW_T_COMMA_in_operatorsGG1152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1156_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1156( FOLLOW_ID_in_operatorsGG1156_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1158( FOLLOW_T_RPAREN_in_operatorsGG1158_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1166( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1168_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1168( FOLLOW_T_LPAREN_in_operatorsGG1168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1170( FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1170_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1172( FOLLOW_T_COMMA_in_operatorsGG1172_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1176( FOLLOW_ID_in_operatorsGG1176_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1178( FOLLOW_T_COMMA_in_operatorsGG1178_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1182_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1182( FOLLOW_ID_in_operatorsGG1182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1184( FOLLOW_T_RPAREN_in_operatorsGG1184_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1192_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1192( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1194( FOLLOW_T_LPAREN_in_operatorsGG1194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_in_operatorsGG1196_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_in_operatorsGG1196( FOLLOW_T_ATTRIBUTE_in_operatorsGG1196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1198( FOLLOW_T_COMMA_in_operatorsGG1198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1202( FOLLOW_ID_in_operatorsGG1202_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1204( FOLLOW_T_COMMA_in_operatorsGG1204_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1208_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1208( FOLLOW_ID_in_operatorsGG1208_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1210( FOLLOW_T_RPAREN_in_operatorsGG1210_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1218_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1218( FOLLOW_T_MAPPING_in_operatorsGG1218_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1220_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1220( FOLLOW_T_LPAREN_in_operatorsGG1220_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DMP_in_operatorsGG1222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DMP_in_operatorsGG1222( FOLLOW_T_DMP_in_operatorsGG1222_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1224_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1224( FOLLOW_T_COMMA_in_operatorsGG1224_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1228( FOLLOW_ID_in_operatorsGG1228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1230( FOLLOW_T_COMMA_in_operatorsGG1230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1234_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1234( FOLLOW_ID_in_operatorsGG1234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1238( FOLLOW_T_RPAREN_in_operatorsGG1238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1246_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1246( FOLLOW_T_MAPPING_in_operatorsGG1246_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1248_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1248( FOLLOW_T_LPAREN_in_operatorsGG1248_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DAP_in_operatorsGG1250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DAP_in_operatorsGG1250( FOLLOW_T_DAP_in_operatorsGG1250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1252_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1252( FOLLOW_T_COMMA_in_operatorsGG1252_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1256( FOLLOW_ID_in_operatorsGG1256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1258( FOLLOW_T_COMMA_in_operatorsGG1258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1262_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1262( FOLLOW_ID_in_operatorsGG1262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1266( FOLLOW_T_RPAREN_in_operatorsGG1266_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1274_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1274( FOLLOW_T_SEGMENTATION_in_operatorsGG1274_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1276_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1276( FOLLOW_T_LPAREN_in_operatorsGG1276_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1278( FOLLOW_T_MSLS_in_operatorsGG1278_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1280( FOLLOW_T_COMMA_in_operatorsGG1280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1284( FOLLOW_ID_in_operatorsGG1284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1286( FOLLOW_T_COMMA_in_operatorsGG1286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1290_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1290( FOLLOW_ID_in_operatorsGG1290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1292( FOLLOW_T_RPAREN_in_operatorsGG1292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1300_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1300( FOLLOW_T_SEGMENTATION_in_operatorsGG1300_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1302_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1302( FOLLOW_T_LPAREN_in_operatorsGG1302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1304( FOLLOW_T_MSLS_in_operatorsGG1304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1306_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1306( FOLLOW_T_COMMA_in_operatorsGG1306_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1310( FOLLOW_ID_in_operatorsGG1310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1312( FOLLOW_T_COMMA_in_operatorsGG1312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1316_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1316( FOLLOW_ID_in_operatorsGG1316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1318( FOLLOW_T_RPAREN_in_operatorsGG1318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1326_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1326( FOLLOW_T_SEGMENTATION_in_operatorsGG1326_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1328_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1328( FOLLOW_T_LPAREN_in_operatorsGG1328_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1330( FOLLOW_T_WATHERSHADE_in_operatorsGG1330_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1332( FOLLOW_T_COMMA_in_operatorsGG1332_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1336_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1336( FOLLOW_ID_in_operatorsGG1336_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1338( FOLLOW_T_RPAREN_in_operatorsGG1338_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1350_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1350( FOLLOW_T_SEGMENTATION_in_operatorsGG1350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1352_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1352( FOLLOW_T_LPAREN_in_operatorsGG1352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1354( FOLLOW_T_WATHERSHADE_in_operatorsGG1354_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1356( FOLLOW_T_COMMA_in_operatorsGG1356_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1360( FOLLOW_ID_in_operatorsGG1360_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1362_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1362( FOLLOW_T_COMMA_in_operatorsGG1362_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1366_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1366( FOLLOW_ID_in_operatorsGG1366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1368( FOLLOW_T_RPAREN_in_operatorsGG1368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1390( FOLLOW_DOUBLENUMBER_in_interval1390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_interval1392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_interval1392( FOLLOW_T_COMMA_in_interval1392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1396( FOLLOW_DOUBLENUMBER_in_interval1396_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBOX_in_operatorsBBGG1411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBOX_in_operatorsBBGG1411( FOLLOW_operatorsBOX_in_operatorsBBGG1411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1417( FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1417_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_operatorsBBGG1423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_operatorsBBGG1423( FOLLOW_operatorsAREA_in_operatorsBBGG1423_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1429( FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsBOX1446_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsBOX1446( FOLLOW_T_ERODE_in_operatorsBOX1446_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1448( FOLLOW_T_LPAREN_in_operatorsBOX1448_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1450_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1450( FOLLOW_T_BOX_in_operatorsBOX1450_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1452( FOLLOW_T_LPAREN_in_operatorsBOX1452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1456_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1456( FOLLOW_DOUBLENUMBER_in_operatorsBOX1456_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1458( FOLLOW_T_RPAREN_in_operatorsBOX1458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1460( FOLLOW_T_COMMA_in_operatorsBOX1460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1464_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1464( FOLLOW_ID_in_operatorsBOX1464_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1466( FOLLOW_T_RPAREN_in_operatorsBOX1466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsBOX1474_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsBOX1474( FOLLOW_T_DILATE_in_operatorsBOX1474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1476( FOLLOW_T_LPAREN_in_operatorsBOX1476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1478_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1478( FOLLOW_T_BOX_in_operatorsBOX1478_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1480( FOLLOW_T_LPAREN_in_operatorsBOX1480_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1484_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1484( FOLLOW_DOUBLENUMBER_in_operatorsBOX1484_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1486_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1486( FOLLOW_T_RPAREN_in_operatorsBOX1486_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1488_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1488( FOLLOW_T_COMMA_in_operatorsBOX1488_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1492_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1492( FOLLOW_ID_in_operatorsBOX1492_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1494( FOLLOW_T_RPAREN_in_operatorsBOX1494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsBOX1501_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsBOX1501( FOLLOW_T_OPEN_in_operatorsBOX1501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1503( FOLLOW_T_LPAREN_in_operatorsBOX1503_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1505_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1505( FOLLOW_T_BOX_in_operatorsBOX1505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1507( FOLLOW_T_LPAREN_in_operatorsBOX1507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1511_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1511( FOLLOW_DOUBLENUMBER_in_operatorsBOX1511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1513( FOLLOW_T_RPAREN_in_operatorsBOX1513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1515( FOLLOW_T_COMMA_in_operatorsBOX1515_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1519_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1519( FOLLOW_ID_in_operatorsBOX1519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1521_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1521( FOLLOW_T_RPAREN_in_operatorsBOX1521_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsBOX1530_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsBOX1530( FOLLOW_T_CLOSE_in_operatorsBOX1530_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1532( FOLLOW_T_LPAREN_in_operatorsBOX1532_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1534_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1534( FOLLOW_T_BOX_in_operatorsBOX1534_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1536( FOLLOW_T_LPAREN_in_operatorsBOX1536_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1540_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1540( FOLLOW_DOUBLENUMBER_in_operatorsBOX1540_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1542( FOLLOW_T_RPAREN_in_operatorsBOX1542_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1544_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1544( FOLLOW_T_COMMA_in_operatorsBOX1544_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1548_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1548( FOLLOW_ID_in_operatorsBOX1548_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1550_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1550( FOLLOW_T_RPAREN_in_operatorsBOX1550_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1577_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1577( FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1577_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1579_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1579( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1581_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1581( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1581_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1583( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1583_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1587( FOLLOW_ID_in_operatorsRECONSTRUCTION1587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1589( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1593_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1593( FOLLOW_ID_in_operatorsRECONSTRUCTION1593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1595( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1605_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1605( FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1605_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1607_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1607( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1607_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1609_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1609( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1611( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1611_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1615( FOLLOW_ID_in_operatorsRECONSTRUCTION1615_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1617( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1621_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1621( FOLLOW_ID_in_operatorsRECONSTRUCTION1621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1623( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1630_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1630( FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1632_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1632( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1634( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1636( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1638_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1638( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1640( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1640_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1644_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1644( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1644_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1646_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1646( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1646_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1648( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1652_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1652( FOLLOW_ID_in_operatorsRECONSTRUCTION1652_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1654_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1654( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1654_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1662_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1662( FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1664_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1664( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1666( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1668( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1670_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1670( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1670_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1672( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1676_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1676( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1678( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1678_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1680( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1684_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1684( FOLLOW_ID_in_operatorsRECONSTRUCTION1684_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1686( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsAREA1704_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsAREA1704( FOLLOW_T_OPEN_in_operatorsAREA1704_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1706( FOLLOW_T_LPAREN_in_operatorsAREA1706_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1708( FOLLOW_T_AREA_in_operatorsAREA1708_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1710( FOLLOW_T_COMMA_in_operatorsAREA1710_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1714( FOLLOW_DOUBLENUMBER_in_operatorsAREA1714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1716( FOLLOW_T_COMMA_in_operatorsAREA1716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1720_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1720( FOLLOW_ID_in_operatorsAREA1720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1722( FOLLOW_T_RPAREN_in_operatorsAREA1722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsAREA1729_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsAREA1729( FOLLOW_T_CLOSE_in_operatorsAREA1729_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1731( FOLLOW_T_LPAREN_in_operatorsAREA1731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1733( FOLLOW_T_AREA_in_operatorsAREA1733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1735( FOLLOW_T_COMMA_in_operatorsAREA1735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1739( FOLLOW_DOUBLENUMBER_in_operatorsAREA1739_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1741( FOLLOW_T_COMMA_in_operatorsAREA1741_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1745_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1745( FOLLOW_ID_in_operatorsAREA1745_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1747( FOLLOW_T_RPAREN_in_operatorsAREA1747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsATTRIBUTE1764_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsATTRIBUTE1764( FOLLOW_T_OPEN_in_operatorsATTRIBUTE1764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1766( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1770( FOLLOW_ID_in_operatorsATTRIBUTE1770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1772_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1772( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1776( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1778( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1782_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1782( FOLLOW_ID_in_operatorsATTRIBUTE1782_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1784( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1791_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1791( FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1791_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1793( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1797( FOLLOW_ID_in_operatorsATTRIBUTE1797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1799( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1803( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1803_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1805_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1805( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1809_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1809( FOLLOW_ID_in_operatorsATTRIBUTE1809_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1811_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1811( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1811_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1825_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1825( FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBG1827_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBG1827( FOLLOW_T_LPAREN_in_operatorsBG1827_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBG1829_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBG1829( FOLLOW_ID_in_operatorsBG1829_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBG1831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBG1831( FOLLOW_T_RPAREN_in_operatorsBG1831_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_TRESHOLD_in_operatorsGB1841_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_TRESHOLD_in_operatorsGB1841( FOLLOW_T_TRESHOLD_in_operatorsGB1841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGB1843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGB1843( FOLLOW_T_LPAREN_in_operatorsGB1843_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGB1845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGB1845( FOLLOW_DOUBLENUMBER_in_operatorsGB1845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGB1847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGB1847( FOLLOW_T_COMMA_in_operatorsGB1847_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGB1849_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGB1849( FOLLOW_ID_in_operatorsGB1849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGB1851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGB1851( FOLLOW_T_RPAREN_in_operatorsGB1851_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1902( FOLLOW_DOUBLENUMBER_in_vector1902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_vector1906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_vector1906( FOLLOW_T_COMMA_in_vector1906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1919_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1919( FOLLOW_DOUBLENUMBER_in_vector1919_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred48_MorphDSL1274_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred48_MorphDSL1274( FOLLOW_T_SEGMENTATION_in_synpred48_MorphDSL1274_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred48_MorphDSL1276_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred48_MorphDSL1276( FOLLOW_T_LPAREN_in_synpred48_MorphDSL1276_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred48_MorphDSL1278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred48_MorphDSL1278( FOLLOW_T_MSLS_in_synpred48_MorphDSL1278_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred48_MorphDSL1280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred48_MorphDSL1280( FOLLOW_T_COMMA_in_synpred48_MorphDSL1280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred48_MorphDSL1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred48_MorphDSL1284( FOLLOW_ID_in_synpred48_MorphDSL1284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred48_MorphDSL1286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred48_MorphDSL1286( FOLLOW_T_COMMA_in_synpred48_MorphDSL1286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred48_MorphDSL1290_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred48_MorphDSL1290( FOLLOW_ID_in_synpred48_MorphDSL1290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred48_MorphDSL1292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred48_MorphDSL1292( FOLLOW_T_RPAREN_in_synpred48_MorphDSL1292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1300_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1300( FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1300_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred49_MorphDSL1302_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred49_MorphDSL1302( FOLLOW_T_LPAREN_in_synpred49_MorphDSL1302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred49_MorphDSL1304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred49_MorphDSL1304( FOLLOW_T_MSLS_in_synpred49_MorphDSL1304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred49_MorphDSL1306_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred49_MorphDSL1306( FOLLOW_T_COMMA_in_synpred49_MorphDSL1306_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred49_MorphDSL1310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred49_MorphDSL1310( FOLLOW_ID_in_synpred49_MorphDSL1310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred49_MorphDSL1312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred49_MorphDSL1312( FOLLOW_T_COMMA_in_synpred49_MorphDSL1312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred49_MorphDSL1316_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred49_MorphDSL1316( FOLLOW_ID_in_synpred49_MorphDSL1316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred49_MorphDSL1318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred49_MorphDSL1318( FOLLOW_T_RPAREN_in_synpred49_MorphDSL1318_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * Grammar/MorphDSL.g:177:1: program : load ( assignment )+ ;
 */
void
MorphDSLParser::program()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */

     
    		//zadnjaSpremenljivka = NULL;
    		/*
    		interval2 = NULL;
    		marker1 = NULL;
    		marker2 = NULL;
    		*/
    		imeIzhodneSlike = "";
    		imageCounter = 0;
    	

 
    {
        // Grammar/MorphDSL.g:187:3: ( load ( assignment )+ )
        // Grammar/MorphDSL.g:188:3: load ( assignment )+
        {
            this->followPush(FOLLOW_load_in_program453);
            load();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:188:8: ( assignment )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // Grammar/MorphDSL.g:188:8: assignment
            	        {
            	            this->followPush(FOLLOW_assignment_in_program455);
            	            assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MorphDSLParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start load
 * Grammar/MorphDSL.g:190:1: load : imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')' ;
 */
void
MorphDSLParser::load()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    imeSpremenljivke;
    const CommonTokenType*    imeSlike;

    /* Initialize rule variables
     */

    imeSpremenljivke       = NULL;
    imeSlike       = NULL;


 
    {
        // Grammar/MorphDSL.g:191:2: (imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')' )
        // Grammar/MorphDSL.g:191:4: imeSpremenljivke= ID '=' 'load' '(' '\\\"' imeSlike= ID '\\\"' ')'
        {
            imeSpremenljivke =  this->matchToken(ID, &FOLLOW_ID_in_load467);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_load469);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LOAD, &FOLLOW_T_LOAD_in_load471);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_load473);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load475);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            imeSlike =  this->matchToken(ID, &FOLLOW_ID_in_load479);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load481);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_load483);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                		this->zadnjaSpremenljivka = (imeSpremenljivke->getText());
                		loadImpl((imeSlike->getText()), (imeSpremenljivke->getText()));
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloadEx; /* Prevent compiler warnings */
    ruleloadEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end load */

/**
 * $ANTLR start assignment
 * Grammar/MorphDSL.g:198:1: assignment : figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql ) ;
 */
void
MorphDSLParser::assignment()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:198:12: ( figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql ) )
        // Grammar/MorphDSL.g:199:2: figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql )
        {
            this->followPush(FOLLOW_figurevector_in_assignment499);
            figurevector();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_assignment501);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:200:2: ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql )
            {
                int alt2=7;
                switch ( this->LA(1) )
                {
                case T_BOUNDARY:
                case T_COMPLEMENT:
                case T_HITMISS:
                case T_INTERSECTION:
                case T_UNION:
                case T_WITHOUT:
                	{
                		alt2=1;
                	}
                    break;
                case T_CROP:
                case T_DIFERENTIALPROFILES:
                case T_GRADIENT:
                case T_MAPPING:
                case T_MULTIPLY:
                case T_NEGATE:
                case T_NORMALIZE:
                case T_SEGMENTATION:
                case T_SUBTRACT:
                	{
                		alt2=2;
                	}
                    break;
                case T_CLOSE:
                case T_DILATE:
                case T_ERODE:
                case T_OPEN:
                	{
                		alt2=3;
                	}
                    break;
                case T_DISTANCETRANSFORM:
                	{
                		alt2=4;
                	}
                    break;
                case T_TRESHOLD:
                	{
                		alt2=5;
                	}
                    break;
                case DOUBLENUMBER:
                	{
                		alt2=6;
                	}
                    break;
                case 55:
                	{
                		alt2=7;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleassignmentEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:200:4: operatorsBB
            	    {
            	        this->followPush(FOLLOW_operatorsBB_in_assignment507);
            	        operatorsBB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:201:4: operatorsGG
            	    {
            	        this->followPush(FOLLOW_operatorsGG_in_assignment513);
            	        operatorsGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:202:4: operatorsBBGG
            	    {
            	        this->followPush(FOLLOW_operatorsBBGG_in_assignment518);
            	        operatorsBBGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:203:4: operatorsBG
            	    {
            	        this->followPush(FOLLOW_operatorsBG_in_assignment523);
            	        operatorsBG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:204:4: operatorsGB
            	    {
            	        this->followPush(FOLLOW_operatorsGB_in_assignment528);
            	        operatorsGB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:205:4: vector
            	    {
            	        this->followPush(FOLLOW_vector_in_assignment533);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:206:4: sql
            	    {
            	        this->followPush(FOLLOW_sql_in_assignment538);
            	        sql();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start figurevector
 * Grammar/MorphDSL.g:209:1: figurevector : ID ;
 */
void
MorphDSLParser::figurevector()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID1;

    /* Initialize rule variables
     */

    ID1       = NULL;


 
    {
        // Grammar/MorphDSL.g:209:14: ( ID )
        // Grammar/MorphDSL.g:209:16: ID
        {
            ID1 =  this->matchToken(ID, &FOLLOW_ID_in_figurevector549);
            if  (this->hasException())
            {
                goto rulefigurevectorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 zadnjaSpremenljivka = (ID1->getText()); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefigurevectorEx; /* Prevent compiler warnings */
    rulefigurevectorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end figurevector */

/**
 * $ANTLR start sql
 * Grammar/MorphDSL.g:211:1: sql returns [Sql* sql] : 'SELECT' ( operatorSql | '*' ) 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )* ;
 */
Sql*
MorphDSLParser::sql()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Sql* sql;


    MorphDSLParser_sqlWhere_return w1;
    typedef	MorphDSLParser_sqlWhere_return RETURN_TYPE_w1;

    MorphDSLParser_sqlWhere_return w2;
    typedef	MorphDSLParser_sqlWhere_return RETURN_TYPE_w2;

    /* Initialize rule variables
     */

     sql= new Sql();
     

 
    {
        // Grammar/MorphDSL.g:232:2: ( 'SELECT' ( operatorSql | '*' ) 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )* )
        // Grammar/MorphDSL.g:232:4: 'SELECT' ( operatorSql | '*' ) 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )*
        {
             this->matchToken(55, &FOLLOW_55_in_sql576);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            // Grammar/MorphDSL.g:232:13: ( operatorSql | '*' )
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case T_NORMALIZE:
                case 59:
                case 61:
                case 62:
                case 63:
                case 64:
                case 66:
                case 67:
                	{
                		alt3=1;
                	}
                    break;
                case T_STAR:
                	{
                		alt3=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return sql;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 3 );
                    ex->set_state( 0 );


                    goto rulesqlEx;

                }

                switch (alt3)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:232:14: operatorSql
            	    {
            	        this->followPush(FOLLOW_operatorSql_in_sql579);
            	        operatorSql();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:232:28: '*'
            	    {
            	         this->matchToken(T_STAR, &FOLLOW_T_STAR_in_sql583);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(54, &FOLLOW_54_in_sql587);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


             this->matchToken(ID, &FOLLOW_ID_in_sql589);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


             this->matchToken(56, &FOLLOW_56_in_sql591);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            this->followPush(FOLLOW_sqlWhere_in_sql595);
            w1=sqlWhere();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            if ( this->get_backtracking()==0 )
            {
                 sql->dodajOmejitev(w1.keyword
                , w1.stavek
                ); 
            }


            // Grammar/MorphDSL.g:233:4: ( 'AND' w2= sqlWhere )*

            for (;;)
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case 53:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:233:5: 'AND' w2= sqlWhere
            	    {
            	         this->matchToken(53, &FOLLOW_53_in_sql603);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	        this->followPush(FOLLOW_sqlWhere_in_sql607);
            	        w2=sqlWhere();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             sql
            	            ->dodajOmejitev(w2.keyword
            	            , w2.stavek
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlEx; /* Prevent compiler warnings */
    rulesqlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		auto keywords = sql
                ->getUporabljeneKeyworde();
                		for(auto i = 0; i < keywords.size(); i++){
                			std::cout << "keyword: " << keywords[i] << std::endl;

                			auto omejitveNaKeyword = sql
                ->getOmejtiveZaKeyword(keywords[i]);

                			for(auto j = 0; j < omejitveNaKeyword.size(); j++){
                				if(omejitveNaKeyword[j]->isNestedSql()){
                					std::cout << "\tnested" << std::endl;
                				}
                				else{
                					std::cout << "\t" << omejitveNaKeyword[j]->getVrednost() << std::endl;
                				}
                			}

                			std::cout << std::endl;
                		}
                	
            }
        }

    return sql;
}
/* $ANTLR end sql */

/**
 * $ANTLR start operatorSql
 * Grammar/MorphDSL.g:238:1: operatorSql : ( operatorName '(' selectKeyword ')' | selectKeyword );
 */
void
MorphDSLParser::operatorSql()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  Grammar/MorphDSL.g:239:2: ( operatorName '(' selectKeyword ')' | selectKeyword )

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case T_NORMALIZE:
            	{
            		alt5=1;
            	}
                break;
            case 59:
            case 61:
            case 62:
            case 63:
            case 64:
            case 66:
            case 67:
            	{
            		alt5=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruleoperatorSqlEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:239:4: operatorName '(' selectKeyword ')'
        	    {
        	        this->followPush(FOLLOW_operatorName_in_operatorSql630);
        	        operatorName();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorSql632);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_selectKeyword_in_operatorSql634);
        	        selectKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorSql636);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:240:4: selectKeyword
        	    {
        	        this->followPush(FOLLOW_selectKeyword_in_operatorSql641);
        	        selectKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorSqlEx; /* Prevent compiler warnings */
    ruleoperatorSqlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorSql */

/**
 * $ANTLR start selectKeyword
 * Grammar/MorphDSL.g:243:1: selectKeyword : ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' | 'internal_gradient' | 'external_greadient' );
 */
void
MorphDSLParser::selectKeyword()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:244:2: ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' | 'internal_gradient' | 'external_greadient' )
        // Grammar/MorphDSL.g:
        {
            if ( this->LA(1) == 59 || ((this->LA(1) >= 61) && (this->LA(1) <= 64)) || ((this->LA(1) >= 66) && (this->LA(1) <= 67)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleselectKeywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleselectKeywordEx; /* Prevent compiler warnings */
    ruleselectKeywordEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end selectKeyword */

/**
 * $ANTLR start operatorName
 * Grammar/MorphDSL.g:253:1: operatorName : 'normalize' ;
 */
void
MorphDSLParser::operatorName()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:253:13: ( 'normalize' )
        // Grammar/MorphDSL.g:253:15: 'normalize'
        {
             this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorName692);
            if  (this->hasException())
            {
                goto ruleoperatorNameEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorNameEx; /* Prevent compiler warnings */
    ruleoperatorNameEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorName */

/**
 * $ANTLR start sqlWhere
 * Grammar/MorphDSL.g:255:1: sqlWhere returns [std::string keyword, SqlWhere* stavek] : (val1= DOUBLENUMBER op1= relOp kv1= sqlWhereKeyword |kv2= sqlWhereKeyword op2= relOp val2= DOUBLENUMBER |kv3= sqlWhereKeyword '=' '(' sql ')' );
 */
MorphDSLParser_sqlWhere_return
MorphDSLParser::sqlWhere()
{
    MorphDSLParser_sqlWhere_return retval(this);


    const CommonTokenType*    val1;
    const CommonTokenType*    val2;
    RelOp::RelacijskiOperatorji op1;
    typedef	RelOp::RelacijskiOperatorji RETURN_TYPE_op1;

    MorphDSLParser_sqlWhereKeyword_return kv1;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv1;

    MorphDSLParser_sqlWhereKeyword_return kv2;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv2;

    RelOp::RelacijskiOperatorji op2;
    typedef	RelOp::RelacijskiOperatorji RETURN_TYPE_op2;

    MorphDSLParser_sqlWhereKeyword_return kv3;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv3;

    Sql* sql2;
    typedef	Sql* RETURN_TYPE_sql2;

    /* Initialize rule variables
     */

    val1       = NULL;
    val2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        {
            //  Grammar/MorphDSL.g:256:2: (val1= DOUBLENUMBER op1= relOp kv1= sqlWhereKeyword |kv2= sqlWhereKeyword op2= relOp val2= DOUBLENUMBER |kv3= sqlWhereKeyword '=' '(' sql ')' )

            ANTLR_UINT32 alt6;

            alt6=3;

            switch ( this->LA(1) )
            {
            case DOUBLENUMBER:
            	{
            		alt6=1;
            	}
                break;
            case 57:
            case 58:
            case 60:
            case 62:
            case 64:
            case 65:
            case 67:
            	{
            		switch ( this->LA(2) )
            		{
            		case T_LESS_THAN:
            		case T_MORE_THAN:
            		case T_NOT_EQUAL:
            		case 51:
            		case 52:
            			{
            				alt6=2;
            			}
            		    break;
            		case T_EQUALS:
            			{
            				switch ( this->LA(3) )
            				{
            				case T_LPAREN:
            					{
            						alt6=3;
            					}
            				    break;
            				case DOUBLENUMBER:
            					{
            						alt6=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return retval;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 6 );
            				    ex->set_state( 4 );


            				    goto rulesqlWhereEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 2 );


            		    goto rulesqlWhereEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto rulesqlWhereEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:256:4: val1= DOUBLENUMBER op1= relOp kv1= sqlWhereKeyword
        	    {
        	        val1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere707);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere711);
        	        op1=relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere715);
        	        kv1=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             
        	            		retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv1.start, kv1.stop))
        	            ;

        	            		retval.stavek= new SqlWhere(op1, toDouble(val1));

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:261:4: kv2= sqlWhereKeyword op2= relOp val2= DOUBLENUMBER
        	    {
        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere726);
        	        kv2=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere730);
        	        op2=relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        val2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere734);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             
                        retval.keyword= (this->get_strstream()->toStringTT(kv2.start, kv2.stop));

                        retval.stavek= new SqlWhere(op2, toDouble(val2));

        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:266:4: kv3= sqlWhereKeyword '=' '(' sql ')'
        	    {
        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere744);
        	        kv3=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_sqlWhere746);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_sqlWhere748);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_sql_in_sqlWhere750);
        	        sql2=sql();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_sqlWhere752);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

                        retval.keyword= (this->get_strstream()->toStringTT(kv3.start, kv3.stop));

                        retval.stavek= new SqlWhere(sql2);

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereEx; /* Prevent compiler warnings */
    rulesqlWhereEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end sqlWhere */

/**
 * $ANTLR start relOp
 * Grammar/MorphDSL.g:273:1: relOp returns [RelOp::RelacijskiOperatorji relOperator] : ( '>' | '<' | '=' | '!=' | '>=' | '<=' );
 */
RelOp::RelacijskiOperatorji
MorphDSLParser::relOp()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    RelOp::RelacijskiOperatorji relOperator;


    /* Initialize rule variables
     */

     relOperator= RelOp::ERR;


 
    {
        {
            //  Grammar/MorphDSL.g:275:2: ( '>' | '<' | '=' | '!=' | '>=' | '<=' )

            ANTLR_UINT32 alt7;

            alt7=6;

            switch ( this->LA(1) )
            {
            case T_MORE_THAN:
            	{
            		alt7=1;
            	}
                break;
            case T_LESS_THAN:
            	{
            		alt7=2;
            	}
                break;
            case T_EQUALS:
            	{
            		alt7=3;
            	}
                break;
            case T_NOT_EQUAL:
            	{
            		alt7=4;
            	}
                break;
            case 52:
            	{
            		alt7=5;
            	}
                break;
            case 51:
            	{
            		alt7=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return relOperator;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto rulerelOpEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:275:4: '>'
        	    {
        	         this->matchToken(T_MORE_THAN, &FOLLOW_T_MORE_THAN_in_relOp778);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::GT;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:276:4: '<'
        	    {
        	         this->matchToken(T_LESS_THAN, &FOLLOW_T_LESS_THAN_in_relOp786);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::LT;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:277:4: '='
        	    {
        	         this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_relOp794);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::EQ;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:278:4: '!='
        	    {
        	         this->matchToken(T_NOT_EQUAL, &FOLLOW_T_NOT_EQUAL_in_relOp802);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::NE;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // Grammar/MorphDSL.g:279:4: '>='
        	    {
        	         this->matchToken(52, &FOLLOW_52_in_relOp809);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::GE;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // Grammar/MorphDSL.g:280:4: '<='
        	    {
        	         this->matchToken(51, &FOLLOW_51_in_relOp816);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::LE;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulerelOpEx; /* Prevent compiler warnings */
    rulerelOpEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return relOperator;
}
/* $ANTLR end relOp */

/**
 * $ANTLR start sqlWhereKeyword
 * Grammar/MorphDSL.g:283:1: sqlWhereKeyword : ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' );
 */
MorphDSLParser_sqlWhereKeyword_return
MorphDSLParser::sqlWhereKeyword()
{
    MorphDSLParser_sqlWhereKeyword_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:284:2: ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= 57) && (this->LA(1) <= 58)) || this->LA(1) == 60 || this->LA(1) == 62 || ((this->LA(1) >= 64) && (this->LA(1) <= 65)) || this->LA(1) == 67 )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulesqlWhereKeywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereKeywordEx; /* Prevent compiler warnings */
    rulesqlWhereKeywordEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end sqlWhereKeyword */

/**
 * $ANTLR start operatorsBB
 * Grammar/MorphDSL.g:293:1: operatorsBB : ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    cId;
    const CommonTokenType*    uId1;
    const CommonTokenType*    uId2;
    const CommonTokenType*    iId1;
    const CommonTokenType*    iId2;
    const CommonTokenType*    wId1;
    const CommonTokenType*    wId2;
    const CommonTokenType*    hId1;
    const CommonTokenType*    hId2;
    const CommonTokenType*    bId;

    /* Initialize rule variables
     */

    cId       = NULL;
    uId1       = NULL;
    uId2       = NULL;
    iId1       = NULL;
    iId2       = NULL;
    wId1       = NULL;
    wId2       = NULL;
    hId1       = NULL;
    hId2       = NULL;
    bId       = NULL;


 
    {
        // Grammar/MorphDSL.g:293:13: ( ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) )
        // Grammar/MorphDSL.g:294:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
        {
            // Grammar/MorphDSL.g:294:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
            {
                int alt8=6;
                switch ( this->LA(1) )
                {
                case T_COMPLEMENT:
                	{
                		alt8=1;
                	}
                    break;
                case T_UNION:
                	{
                		alt8=2;
                	}
                    break;
                case T_INTERSECTION:
                	{
                		alt8=3;
                	}
                    break;
                case T_WITHOUT:
                	{
                		alt8=4;
                	}
                    break;
                case T_HITMISS:
                	{
                		alt8=5;
                	}
                    break;
                case T_BOUNDARY:
                	{
                		alt8=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 8 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBEx;

                }

                switch (alt8)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:294:4: 'complement' '(' cId= ID ')'
            	    {
            	         this->matchToken(T_COMPLEMENT, &FOLLOW_T_COMPLEMENT_in_operatorsBB873);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB875);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB879);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB881);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            	complementImpl((cId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:295:4: 'union' '(' uId1= ID ',' uId2= ID ')'
            	    {
            	         this->matchToken(T_UNION, &FOLLOW_T_UNION_in_operatorsBB888);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB890);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB894);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB896);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB900);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB902);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             unionImpl((uId1->getText()), (uId2->getText())); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:296:4: 'intersection' '(' iId1= ID ',' iId2= ID ')'
            	    {
            	         this->matchToken(T_INTERSECTION, &FOLLOW_T_INTERSECTION_in_operatorsBB909);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB911);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB915);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB917);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB921);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB923);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             intersectionImpl((iId1->getText()), (iId2->getText())); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:297:4: 'without' '(' wId1= ID ',' wId2= ID ')'
            	    {
            	         this->matchToken(T_WITHOUT, &FOLLOW_T_WITHOUT_in_operatorsBB930);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB932);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB936);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB938);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB942);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB944);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             withoutImpl((wId1->getText()), (wId2->getText())); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:298:4: 'hitmiss' '(' hId1= ID ',' hId2= ID ')'
            	    {
            	         this->matchToken(T_HITMISS, &FOLLOW_T_HITMISS_in_operatorsBB951);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB953);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB957);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB959);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB963);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB965);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             hitMissImpl((hId1->getText()), (hId2->getText())); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:299:4: 'boundary' '(' bId= ID ')'
            	    {
            	         this->matchToken(T_BOUNDARY, &FOLLOW_T_BOUNDARY_in_operatorsBB972);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB974);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        bId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB978);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB980);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             boundaryImpl((bId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBEx; /* Prevent compiler warnings */
    ruleoperatorsBBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBB */

/**
 * $ANTLR start operatorsGG
 * Grammar/MorphDSL.g:302:1: operatorsGG : ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ) ;
 */
void
MorphDSLParser::operatorsGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    nId;
    const CommonTokenType*    mId;
    const CommonTokenType*    mDbl;
    const CommonTokenType*    mDbl2;
    const CommonTokenType*    mId2;
    const CommonTokenType*    mId3;
    const CommonTokenType*    mId4;
    const CommonTokenType*    cId;
    const CommonTokenType*    sId1;
    const CommonTokenType*    sId2;
    const CommonTokenType*    giId;
    const CommonTokenType*    geId;
    const CommonTokenType*    dpmId1;
    const CommonTokenType*    dpmId2;
    const CommonTokenType*    dpaId1;
    const CommonTokenType*    dpaId2;
    const CommonTokenType*    dmpId1;
    const CommonTokenType*    dmpId2;
    const CommonTokenType*    dapId1;
    const CommonTokenType*    dapId2;
    const CommonTokenType*    msls_1_Id1;
    const CommonTokenType*    msls_1_Id2;
    const CommonTokenType*    msls_2_Id1;
    const CommonTokenType*    msls_2_Id2;
    const CommonTokenType*    watershadeId;
    const CommonTokenType*    watershadeMarkerId2;
    const CommonTokenType*    watershadeMarkerId1;
    MorphDSLParser_interval_return interval3;
    typedef	MorphDSLParser_interval_return RETURN_TYPE_interval3;

    /* Initialize rule variables
     */

    nId       = NULL;
    mId       = NULL;
    mDbl       = NULL;
    mDbl2       = NULL;
    mId2       = NULL;
    mId3       = NULL;
    mId4       = NULL;
    cId       = NULL;
    sId1       = NULL;
    sId2       = NULL;
    giId       = NULL;
    geId       = NULL;
    dpmId1       = NULL;
    dpmId2       = NULL;
    dpaId1       = NULL;
    dpaId2       = NULL;
    dmpId1       = NULL;
    dmpId2       = NULL;
    dapId1       = NULL;
    dapId2       = NULL;
    msls_1_Id1       = NULL;
    msls_1_Id2       = NULL;
    msls_2_Id1       = NULL;
    msls_2_Id2       = NULL;
    watershadeId       = NULL;
    watershadeMarkerId2       = NULL;
    watershadeMarkerId1       = NULL;


 
    {
        // Grammar/MorphDSL.g:302:13: ( ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ) )
        // Grammar/MorphDSL.g:303:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
        {
            // Grammar/MorphDSL.g:303:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
            {
                int alt9=17;
                switch ( this->LA(1) )
                {
                case T_NEGATE:
                	{
                		alt9=1;
                	}
                    break;
                case T_NORMALIZE:
                	{
                		alt9=2;
                	}
                    break;
                case T_MULTIPLY:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case DOUBLENUMBER:
                									{
                										alt9=3;
                									}
                								    break;
                								case ID:
                									{
                										alt9=5;
                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 9 );
                								    ex->set_state( 25 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 9 );
                						    ex->set_state( 15 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case DOUBLENUMBER:
                					{
                						alt9=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 10 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_CROP:
                	{
                		alt9=6;
                	}
                    break;
                case T_SUBTRACT:
                	{
                		alt9=7;
                	}
                    break;
                case T_GRADIENT:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_INTERNAL:
                					{
                						alt9=8;
                					}
                				    break;
                				case T_EXTERNAL:
                					{
                						alt9=9;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 11 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 6 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_DIFERENTIALPROFILES:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MORPHOLOGICAL:
                					{
                						alt9=10;
                					}
                				    break;
                				case T_ATTRIBUTE:
                					{
                						alt9=11;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 12 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 7 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_MAPPING:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_DMP:
                					{
                						alt9=12;
                					}
                				    break;
                				case T_DAP:
                					{
                						alt9=13;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 13 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 8 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_SEGMENTATION:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MSLS:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																{
                																    int LA9_36 = this->LA(9);
                																    if ( (this->msynpred( antlr3::ClassForwarder<synpred48_MorphDSL>() )))
                																    {
                																        alt9=14;
                																    }
                																    else if ( (this->msynpred( antlr3::ClassForwarder<synpred49_MorphDSL>() )))
                																    {
                																        alt9=15;
                																    }
                																    else
                																    {
                																        if (this->get_backtracking()>0)
                																        {
                																            this->set_failedflag( true );
                																            return ;
                																        }


                																        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																        ex->set_decisionNum( 9 );
                																        ex->set_state( 36 );


                																        goto ruleoperatorsGGEx;

                																    }
                																}
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 9 );
                														    ex->set_state( 35 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 9 );
                												    ex->set_state( 32 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 9 );
                										    ex->set_state( 30 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 9 );
                								    ex->set_state( 26 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 9 );
                						    ex->set_state( 23 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case T_WATHERSHADE:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_RPAREN:
                											{
                												alt9=16;
                											}
                										    break;
                										case T_COMMA:
                											{
                												alt9=17;
                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 9 );
                										    ex->set_state( 31 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 9 );
                								    ex->set_state( 27 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 9 );
                						    ex->set_state( 24 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 9 );
                				    ex->set_state( 14 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 9 );
                		    ex->set_state( 9 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleoperatorsGGEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:303:4: 'negate' '(' nId= ID ')'
            	    {
            	         this->matchToken(T_NEGATE, &FOLLOW_T_NEGATE_in_operatorsGG998);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1000);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        nId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1004);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1006);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             negateImpl((nId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:304:4: 'normalize'
            	    {
            	         this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorsGG1013);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             normalizeImpl(); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:305:4: 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1020);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1022);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1026);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1028);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG1032);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1034);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl((mId->getText()), toDouble(mDbl)); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:306:4: 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1041);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1043);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG1047);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1049);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1053);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1055);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl(toDouble(mDbl2), (mId2->getText())); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:307:4: 'multiply' '(' mId3= ID ',' mId4= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1062);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1064);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId3 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1068);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1070);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId4 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1074);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1076);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl((mId3->getText()), (mId4->getText())); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:308:4: 'crop' '(' cId= ID ',' interval ')'
            	    {
            	         this->matchToken(T_CROP, &FOLLOW_T_CROP_in_operatorsGG1084);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1086);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1090);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1092);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_interval_in_operatorsGG1094);
            	        interval3=interval();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1096);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             cropImpl((cId->getText()), 
            	            interval3.start
            	            , interval3.stop
            	            ); 
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:309:4: 'subtract' '(' sId1= ID ',' sId2= ID ')'
            	    {
            	         this->matchToken(T_SUBTRACT, &FOLLOW_T_SUBTRACT_in_operatorsGG1104);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1106);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1110);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1112);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1116);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1118);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             subtractImpl((sId1->getText()), (sId2->getText())); 
            	        }


            	    }
            	    break;
            	case 8:
            	    // Grammar/MorphDSL.g:310:4: 'gradient' '(' 'INTERNAL' ',' giId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG1126);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1128);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_INTERNAL, &FOLLOW_T_INTERNAL_in_operatorsGG1130);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1132);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        giId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1136);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1138);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientInternalImpl((giId->getText())); 
            	        }


            	    }
            	    break;
            	case 9:
            	    // Grammar/MorphDSL.g:311:4: 'gradient' '(' 'EXTERNAL' ',' geId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG1146);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1148);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_EXTERNAL, &FOLLOW_T_EXTERNAL_in_operatorsGG1150);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1152);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        geId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1156);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1158);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientExternalImpl((geId->getText())); 
            	        }


            	    }
            	    break;
            	case 10:
            	    // Grammar/MorphDSL.g:312:4: 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1166);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1168);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MORPHOLOGICAL, &FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1170);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1172);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1176);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1178);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1182);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1184);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesMorphologicalImpl((dpmId1->getText()), (dpmId2->getText())); 
            	        }


            	    }
            	    break;
            	case 11:
            	    // Grammar/MorphDSL.g:313:4: 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1192);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1194);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_ATTRIBUTE, &FOLLOW_T_ATTRIBUTE_in_operatorsGG1196);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1198);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1202);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1204);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1208);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1210);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesAttributeImpl((dpaId1->getText()), (dpaId2->getText())); 
            	        }


            	    }
            	    break;
            	case 12:
            	    // Grammar/MorphDSL.g:314:4: 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1218);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1220);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DMP, &FOLLOW_T_DMP_in_operatorsGG1222);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1224);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1228);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1230);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1234);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1238);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 13:
            	    // Grammar/MorphDSL.g:315:4: 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1246);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1248);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DAP, &FOLLOW_T_DAP_in_operatorsGG1250);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1252);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1256);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1258);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1262);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1266);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 14:
            	    // Grammar/MorphDSL.g:316:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1274);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1276);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1278);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1280);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1284);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1286);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1290);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1292);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls1Impl((msls_1_Id1->getText()), (msls_1_Id2->getText())); 
            	        }


            	    }
            	    break;
            	case 15:
            	    // Grammar/MorphDSL.g:317:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1300);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1302);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1304);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1306);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1310);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1312);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1316);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1318);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls2Impl((msls_2_Id1->getText()), (msls_2_Id2->getText())); 
            	        }


            	    }
            	    break;
            	case 16:
            	    // Grammar/MorphDSL.g:318:4: 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1326);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1328);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1330);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1332);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        watershadeId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1336);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1338);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeImpl((watershadeId->getText())); 
            	        }


            	    }
            	    break;
            	case 17:
            	    // Grammar/MorphDSL.g:322:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            	    {
            	        // Grammar/MorphDSL.g:322:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            	        // Grammar/MorphDSL.g:322:5: 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')'
            	        {
            	             this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1350);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1352);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1354);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1356);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            watershadeMarkerId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1360);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1362);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            watershadeMarkerId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1366);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1368);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeMarkerImpl((watershadeMarkerId1->getText()), (watershadeMarkerId2->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGGEx; /* Prevent compiler warnings */
    ruleoperatorsGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGG */

/**
 * $ANTLR start interval
 * Grammar/MorphDSL.g:325:1: interval returns [double start, double stop] : dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER ;
 */
MorphDSLParser_interval_return
MorphDSLParser::interval()
{
    MorphDSLParser_interval_return retval(this);


    const CommonTokenType*    dbl1;
    const CommonTokenType*    dbl2;

    /* Initialize rule variables
     */

    dbl1       = NULL;
    dbl2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:325:44: (dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER )
        // Grammar/MorphDSL.g:326:2: dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER
        {
            dbl1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1390);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_interval1392);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            dbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1396);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {

                		istringstream((dbl1->getText())) >> 
                retval.start
                ;
                		istringstream((dbl2->getText())) >> 
                retval.stop
                ;
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end interval */

/**
 * $ANTLR start operatorsBBGG
 * Grammar/MorphDSL.g:332:1: operatorsBBGG : ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) ;
 */
void
MorphDSLParser::operatorsBBGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:332:15: ( ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) )
        // Grammar/MorphDSL.g:333:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
        {
            // Grammar/MorphDSL.g:333:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
            {
                int alt10=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 5 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 1 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_DILATE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 6 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 2 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_OPEN:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt10=3;
                					}
                				    break;
                				case ID:
                					{
                						alt10=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 7 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_CLOSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt10=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt10=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt10=3;
                					}
                				    break;
                				case ID:
                					{
                						alt10=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 10 );
                				    ex->set_state( 8 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 10 );
                		    ex->set_state( 4 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 10 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBGGEx;

                }

                switch (alt10)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:333:4: operatorsBOX
            	    {
            	        this->followPush(FOLLOW_operatorsBOX_in_operatorsBBGG1411);
            	        operatorsBOX();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:334:4: operatorsRECONSTRUCTION
            	    {
            	        this->followPush(FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1417);
            	        operatorsRECONSTRUCTION();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:335:4: operatorsAREA
            	    {
            	        this->followPush(FOLLOW_operatorsAREA_in_operatorsBBGG1423);
            	        operatorsAREA();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:336:4: operatorsATTRIBUTE
            	    {
            	        this->followPush(FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1429);
            	        operatorsATTRIBUTE();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBGGEx; /* Prevent compiler warnings */
    ruleoperatorsBBGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBBGG */

/**
 * $ANTLR start operatorsBOX
 * Grammar/MorphDSL.g:339:1: operatorsBOX : ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBOX()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eNum;
    const CommonTokenType*    eId;
    const CommonTokenType*    dNum;
    const CommonTokenType*    dId;
    const CommonTokenType*    oNum;
    const CommonTokenType*    oId;
    const CommonTokenType*    cNum;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eNum       = NULL;
    eId       = NULL;
    dNum       = NULL;
    dId       = NULL;
    oNum       = NULL;
    oId       = NULL;
    cNum       = NULL;
    cId       = NULL;


 
    {
        // Grammar/MorphDSL.g:339:14: ( ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:340:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:340:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
            {
                int alt11=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		alt11=1;
                	}
                    break;
                case T_DILATE:
                	{
                		alt11=2;
                	}
                    break;
                case T_OPEN:
                	{
                		alt11=3;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt11=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBOXEx;

                }

                switch (alt11)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:340:4: 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')'
            	    {
            	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsBOX1446);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1448);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1450);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1452);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1456);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1458);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1460);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1464);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1466);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             erodeBoxImpl(toDouble(eNum), (eId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:341:4: 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')'
            	    {
            	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsBOX1474);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1476);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1478);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1480);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1484);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1486);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1488);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1492);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1494);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             dilateBoxImpl(toDouble(dNum), (dId->getText())); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:342:4: 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsBOX1501);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1503);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1505);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1507);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1511);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1513);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1515);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1519);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1521);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openBoxImpl(toDouble(oNum), (oId->getText())); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:343:4: 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsBOX1530);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1532);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1534);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1536);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1540);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1542);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1544);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1548);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1550);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeBoxImpl(toDouble(cNum), (cId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBOXEx; /* Prevent compiler warnings */
    ruleoperatorsBOXEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBOX */

/**
 * $ANTLR start operatorsRECONSTRUCTION
 * Grammar/MorphDSL.g:346:1: operatorsRECONSTRUCTION : ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' );
 */
void
MorphDSLParser::operatorsRECONSTRUCTION()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eId2;
    const CommonTokenType*    eId1;
    const CommonTokenType*    dId2;
    const CommonTokenType*    dId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eId2       = NULL;
    eId1       = NULL;
    dId2       = NULL;
    dId1       = NULL;
    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


 
    {
        {
            //  Grammar/MorphDSL.g:346:25: ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' )

            ANTLR_UINT32 alt12;

            alt12=4;

            switch ( this->LA(1) )
            {
            case T_ERODE:
            	{
            		alt12=1;
            	}
                break;
            case T_DILATE:
            	{
            		alt12=2;
            	}
                break;
            case T_OPEN:
            	{
            		alt12=3;
            	}
                break;
            case T_CLOSE:
            	{
            		alt12=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 12 );
                ex->set_state( 0 );


                goto ruleoperatorsRECONSTRUCTIONEx;

            }

            switch (alt12)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:348:4: 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')'
        	    {
        	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1577);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1579);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1581);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1583);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1587);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1589);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1593);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1595);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             erodeImpl((eId1->getText()), (eId2->getText())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:350:4: 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')'
        	    {
        	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1605);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1607);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1609);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1611);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1615);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1617);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1621);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1623);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             dilateImpl((dId1->getText()), (dId2->getText())); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:351:4: 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')'
        	    {
        	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1630);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1632);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1634);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1636);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1638);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1640);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1644);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1646);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1648);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1652);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1654);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             openImpl(toDouble(oDbl), (oId->getText())); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:352:4: 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')'
        	    {
        	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1662);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1664);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1666);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1668);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1670);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1672);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1676);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1678);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1680);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1684);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1686);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             closeImpl(toDouble(cDbl), (cId->getText())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsRECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleoperatorsRECONSTRUCTIONEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsRECONSTRUCTION */

/**
 * $ANTLR start operatorsAREA
 * Grammar/MorphDSL.g:355:1: operatorsAREA : ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsAREA()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


 
    {
        // Grammar/MorphDSL.g:355:15: ( ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:356:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:356:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt13=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt13=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto ruleoperatorsAREAEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:356:4: 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsAREA1704);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1706);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1708);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1710);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1714);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1716);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1720);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1722);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openArea(toDouble(oDbl), (oId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:357:4: 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsAREA1729);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1731);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1733);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1735);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1739);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1741);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1745);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1747);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeArea(toDouble(cDbl), (cId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsAREAEx; /* Prevent compiler warnings */
    ruleoperatorsAREAEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsAREA */

/**
 * $ANTLR start operatorsATTRIBUTE
 * Grammar/MorphDSL.g:360:1: operatorsATTRIBUTE : ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) ;
 */
void
MorphDSLParser::operatorsATTRIBUTE()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId2;
    const CommonTokenType*    cId1;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId2;

    /* Initialize rule variables
     */

    oId1       = NULL;
    oDbl       = NULL;
    oId2       = NULL;
    cId1       = NULL;
    cDbl       = NULL;
    cId2       = NULL;


 
    {
        // Grammar/MorphDSL.g:360:20: ( ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) )
        // Grammar/MorphDSL.g:361:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
        {
            // Grammar/MorphDSL.g:361:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt14=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt14=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto ruleoperatorsATTRIBUTEEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:361:4: 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsATTRIBUTE1764);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1766);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1770);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1772);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1776);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1778);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1782);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1784);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openAttribute((oId1->getText()), toDouble(oDbl), (oId2->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:362:4: 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1791);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1793);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1797);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1799);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1803);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1805);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1809);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1811);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeAttribute((cId1->getText()), toDouble(cDbl), (cId2->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsATTRIBUTEEx; /* Prevent compiler warnings */
    ruleoperatorsATTRIBUTEEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsATTRIBUTE */

/**
 * $ANTLR start operatorsBG
 * Grammar/MorphDSL.g:365:1: operatorsBG : 'distanceTransform' '(' ID ')' ;
 */
void
MorphDSLParser::operatorsBG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID4;

    /* Initialize rule variables
     */

    ID4       = NULL;


 
    {
        // Grammar/MorphDSL.g:365:13: ( 'distanceTransform' '(' ID ')' )
        // Grammar/MorphDSL.g:365:15: 'distanceTransform' '(' ID ')'
        {
             this->matchToken(T_DISTANCETRANSFORM, &FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1825);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBG1827);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID4 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBG1829);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBG1831);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 distanceTransformImpl((ID4->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBGEx; /* Prevent compiler warnings */
    ruleoperatorsBGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBG */

/**
 * $ANTLR start operatorsGB
 * Grammar/MorphDSL.g:367:1: operatorsGB : 'treshold' '(' DOUBLENUMBER ',' ID ')' ;
 */
void
MorphDSLParser::operatorsGB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    DOUBLENUMBER5;
    const CommonTokenType*    ID6;

    /* Initialize rule variables
     */

    DOUBLENUMBER5       = NULL;
    ID6       = NULL;


 
    {
        // Grammar/MorphDSL.g:367:13: ( 'treshold' '(' DOUBLENUMBER ',' ID ')' )
        // Grammar/MorphDSL.g:367:15: 'treshold' '(' DOUBLENUMBER ',' ID ')'
        {
             this->matchToken(T_TRESHOLD, &FOLLOW_T_TRESHOLD_in_operatorsGB1841);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGB1843);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            DOUBLENUMBER5 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGB1845);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGB1847);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID6 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGB1849);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGB1851);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 tresholdImpl(toDouble(DOUBLENUMBER5), (ID6->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGBEx; /* Prevent compiler warnings */
    ruleoperatorsGBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGB */

/**
 * $ANTLR start marker
 * Grammar/MorphDSL.g:369:1: marker : ( ID | DOUBLENUMBER ) ;
 */
void
MorphDSLParser::marker()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:369:8: ( ( ID | DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= DOUBLENUMBER) && (this->LA(1) <= ID)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemarkerEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemarkerEx; /* Prevent compiler warnings */
    rulemarkerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end marker */

/**
 * $ANTLR start vector
 * Grammar/MorphDSL.g:374:1: vector : (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) ;
 */
MorphDSLParser_vector_return
MorphDSLParser::vector()
{
    MorphDSLParser_vector_return retval(this);


    const CommonTokenType*    st;
    const CommonTokenType*    kncSt;

    /* Initialize rule variables
     */

     std::vector<double> tmp; 
    st       = NULL;
    kncSt       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:391:2: ( (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:392:2: (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER )
        {
            // Grammar/MorphDSL.g:392:2: (st= DOUBLENUMBER ( ',' ) )*

            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case DOUBLENUMBER:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_COMMA:
                			{
                				alt15=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:392:3: st= DOUBLENUMBER ( ',' )
            	    {
            	        st =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1902);
            	        if  (this->hasException())
            	        {
            	            goto rulevectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        // Grammar/MorphDSL.g:392:19: ( ',' )
            	        // Grammar/MorphDSL.g:392:21: ','
            	        {
            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_vector1906);
            	            if  (this->hasException())
            	            {
            	                goto rulevectorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             tmp.push_back(toDouble(st)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


            // Grammar/MorphDSL.g:392:65: (kncSt= DOUBLENUMBER )
            // Grammar/MorphDSL.g:392:66: kncSt= DOUBLENUMBER
            {
                kncSt =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1919);
                if  (this->hasException())
                {
                    goto rulevectorEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                     tmp.push_back(toDouble(kncSt)); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		stringstream fNew;//create a stringstream
                	//	cout<< "VECTOR: ";
                		
                		//fNew << currentFigure->getText()[0]-96;
                		fNew << zadnjaSpremenljivka[0] - 96;


                	//	cout<< currentFigure->getText();
                	//	cout<< " ";
                	//	cout<< fNew.str();
                	//	cout<< endl;
                		std::map<string, std::vector<double>>::iterator it = vect.begin();
                		vect.insert (it, std::pair<string, std::vector<double>>(fNew.str(), tmp));
                	
            }
        }

    return retval;
}
/* $ANTLR end vector */

// $ANTLR start synpred48_MorphDSL
void MorphDSLParser::msynpred48_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_1_Id1;
	const CommonTokenType*    msls_1_Id2;

	msls_1_Id1       = NULL;
	msls_1_Id2       = NULL;

    // Grammar/MorphDSL.g:316:4: ( 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' )
    // Grammar/MorphDSL.g:316:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred48_MorphDSL1274);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred48_MorphDSL1276);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred48_MorphDSL1278);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred48_MorphDSL1280);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred48_MorphDSL1284);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred48_MorphDSL1286);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred48_MorphDSL1290);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred48_MorphDSL1292);
        if  (this->hasException())
        {
            goto rulesynpred48_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred48_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred48_MorphDSLEx: ;

}
// $ANTLR end synpred48_MorphDSL

// $ANTLR start synpred49_MorphDSL
void MorphDSLParser::msynpred49_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_2_Id1;
	const CommonTokenType*    msls_2_Id2;

	msls_2_Id1       = NULL;
	msls_2_Id2       = NULL;

    // Grammar/MorphDSL.g:317:4: ( 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' )
    // Grammar/MorphDSL.g:317:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred49_MorphDSL1300);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred49_MorphDSL1302);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred49_MorphDSL1304);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred49_MorphDSL1306);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred49_MorphDSL1310);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred49_MorphDSL1312);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred49_MorphDSL1316);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred49_MorphDSL1318);
        if  (this->hasException())
        {
            goto rulesynpred49_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred49_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred49_MorphDSLEx: ;

}
// $ANTLR end synpred49_MorphDSL
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred48_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred48_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred49_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred49_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
