/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Grammar/MorphDSL.g
 *     -                            On : 2015-02-28 18:58:09
 *     -                for the parser : MorphDSLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */
using namespace std;
/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "stdafx.h"
#include    "MorphDSLParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 	LPM_MorphDSL  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MorphDSLParserTokenNames[43+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DOUBLENUMBER",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "T_AREA",
        (ANTLR_UINT8*) "T_ATTRIBUTE",
        (ANTLR_UINT8*) "T_BOUNDARY",
        (ANTLR_UINT8*) "T_BOX",
        (ANTLR_UINT8*) "T_CLOSE",
        (ANTLR_UINT8*) "T_COMMA",
        (ANTLR_UINT8*) "T_COMPLEMENT",
        (ANTLR_UINT8*) "T_CROP",
        (ANTLR_UINT8*) "T_DAP",
        (ANTLR_UINT8*) "T_DIFERENTIALPROFILES",
        (ANTLR_UINT8*) "T_DILATE",
        (ANTLR_UINT8*) "T_DISTANCETRANSFORM",
        (ANTLR_UINT8*) "T_DMP",
        (ANTLR_UINT8*) "T_DOUBLE_QUOTE",
        (ANTLR_UINT8*) "T_EQUALS",
        (ANTLR_UINT8*) "T_ERODE",
        (ANTLR_UINT8*) "T_EXTERNAL",
        (ANTLR_UINT8*) "T_GRADIENT",
        (ANTLR_UINT8*) "T_HITMISS",
        (ANTLR_UINT8*) "T_INTERNAL",
        (ANTLR_UINT8*) "T_INTERSECTION",
        (ANTLR_UINT8*) "T_LOAD",
        (ANTLR_UINT8*) "T_LPAREN",
        (ANTLR_UINT8*) "T_MAPPING",
        (ANTLR_UINT8*) "T_MORPHOLOGICAL",
        (ANTLR_UINT8*) "T_MSLS",
        (ANTLR_UINT8*) "T_MULTIPLY",
        (ANTLR_UINT8*) "T_NEGATE",
        (ANTLR_UINT8*) "T_NORMALIZE",
        (ANTLR_UINT8*) "T_OPEN",
        (ANTLR_UINT8*) "T_RECONSTRUCTION",
        (ANTLR_UINT8*) "T_RPAREN",
        (ANTLR_UINT8*) "T_SEGMENTATION",
        (ANTLR_UINT8*) "T_SUBTRACT",
        (ANTLR_UINT8*) "T_TRESHOLD",
        (ANTLR_UINT8*) "T_UNION",
        (ANTLR_UINT8*) "T_WATHERSHADE",
        (ANTLR_UINT8*) "T_WITHOUT",
        (ANTLR_UINT8*) "WS"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Grammar/MorphDSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSLParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MorphDSLParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MorphDSLParserTokenNames );


}

void
MorphDSLParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MorphDSLParser::~MorphDSLParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MorphDSLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_load_in_program422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_load_in_program422( FOLLOW_load_in_program422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_program424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000042) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_assignment_in_program424( FOLLOW_assignment_in_program424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load436( FOLLOW_ID_in_load436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_load438_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_load438( FOLLOW_T_EQUALS_in_load438_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LOAD_in_load440_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LOAD_in_load440( FOLLOW_T_LOAD_in_load440_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_load442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_load442( FOLLOW_T_LPAREN_in_load442_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load444_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load444( FOLLOW_T_DOUBLE_QUOTE_in_load444_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load448( FOLLOW_ID_in_load448_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DOUBLE_QUOTE_in_load450_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DOUBLE_QUOTE_in_load450( FOLLOW_T_DOUBLE_QUOTE_in_load450_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_load452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_load452( FOLLOW_T_RPAREN_in_load452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_figurevector_in_assignment466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_figurevector_in_assignment466( FOLLOW_figurevector_in_assignment466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_assignment468_bits[]	= { ANTLR_UINT64_LIT(0x00002F3C968ED420) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_assignment468( FOLLOW_T_EQUALS_in_assignment468_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBB_in_assignment474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBB_in_assignment474( FOLLOW_operatorsBB_in_assignment474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGG_in_assignment480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGG_in_assignment480( FOLLOW_operatorsGG_in_assignment480_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBBGG_in_assignment485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBBGG_in_assignment485( FOLLOW_operatorsBBGG_in_assignment485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBG_in_assignment490_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBG_in_assignment490( FOLLOW_operatorsBG_in_assignment490_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGB_in_assignment495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGB_in_assignment495( FOLLOW_operatorsGB_in_assignment495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_vector_in_assignment500_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_vector_in_assignment500( FOLLOW_vector_in_assignment500_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_figurevector511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_figurevector511( FOLLOW_ID_in_figurevector511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMPLEMENT_in_operatorsBB525_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMPLEMENT_in_operatorsBB525( FOLLOW_T_COMPLEMENT_in_operatorsBB525_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB527_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB527( FOLLOW_T_LPAREN_in_operatorsBB527_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB531_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB531( FOLLOW_ID_in_operatorsBB531_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB533( FOLLOW_T_RPAREN_in_operatorsBB533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_UNION_in_operatorsBB540_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_UNION_in_operatorsBB540( FOLLOW_T_UNION_in_operatorsBB540_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB542( FOLLOW_T_LPAREN_in_operatorsBB542_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB546( FOLLOW_ID_in_operatorsBB546_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB548( FOLLOW_T_COMMA_in_operatorsBB548_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB552_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB552( FOLLOW_ID_in_operatorsBB552_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB554( FOLLOW_T_RPAREN_in_operatorsBB554_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERSECTION_in_operatorsBB561_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERSECTION_in_operatorsBB561( FOLLOW_T_INTERSECTION_in_operatorsBB561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB563( FOLLOW_T_LPAREN_in_operatorsBB563_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB567( FOLLOW_ID_in_operatorsBB567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB569( FOLLOW_T_COMMA_in_operatorsBB569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB573_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB573( FOLLOW_ID_in_operatorsBB573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB575( FOLLOW_T_RPAREN_in_operatorsBB575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WITHOUT_in_operatorsBB582_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WITHOUT_in_operatorsBB582( FOLLOW_T_WITHOUT_in_operatorsBB582_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB584( FOLLOW_T_LPAREN_in_operatorsBB584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB588_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB588( FOLLOW_ID_in_operatorsBB588_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB590( FOLLOW_T_COMMA_in_operatorsBB590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB594_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB594( FOLLOW_ID_in_operatorsBB594_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB596_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB596( FOLLOW_T_RPAREN_in_operatorsBB596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_HITMISS_in_operatorsBB603_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_HITMISS_in_operatorsBB603( FOLLOW_T_HITMISS_in_operatorsBB603_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB605_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB605( FOLLOW_T_LPAREN_in_operatorsBB605_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB609_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB609( FOLLOW_ID_in_operatorsBB609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB611( FOLLOW_T_COMMA_in_operatorsBB611_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB615_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB615( FOLLOW_ID_in_operatorsBB615_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB617( FOLLOW_T_RPAREN_in_operatorsBB617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOUNDARY_in_operatorsBB624_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOUNDARY_in_operatorsBB624( FOLLOW_T_BOUNDARY_in_operatorsBB624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB626( FOLLOW_T_LPAREN_in_operatorsBB626_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB630_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB630( FOLLOW_ID_in_operatorsBB630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB632( FOLLOW_T_RPAREN_in_operatorsBB632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NEGATE_in_operatorsGG650_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NEGATE_in_operatorsGG650( FOLLOW_T_NEGATE_in_operatorsGG650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG652_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG652( FOLLOW_T_LPAREN_in_operatorsGG652_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG656_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG656( FOLLOW_ID_in_operatorsGG656_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG658( FOLLOW_T_RPAREN_in_operatorsGG658_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorsGG665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorsGG665( FOLLOW_T_NORMALIZE_in_operatorsGG665_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG672_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG672( FOLLOW_T_MULTIPLY_in_operatorsGG672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG674_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG674( FOLLOW_T_LPAREN_in_operatorsGG674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG678( FOLLOW_ID_in_operatorsGG678_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG680( FOLLOW_T_COMMA_in_operatorsGG680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG684_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG684( FOLLOW_DOUBLENUMBER_in_operatorsGG684_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG686( FOLLOW_T_RPAREN_in_operatorsGG686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG693_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG693( FOLLOW_T_MULTIPLY_in_operatorsGG693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG695( FOLLOW_T_LPAREN_in_operatorsGG695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG699_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG699( FOLLOW_DOUBLENUMBER_in_operatorsGG699_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG701_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG701( FOLLOW_T_COMMA_in_operatorsGG701_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG705_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG705( FOLLOW_ID_in_operatorsGG705_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG707( FOLLOW_T_RPAREN_in_operatorsGG707_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG714_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG714( FOLLOW_T_MULTIPLY_in_operatorsGG714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG716( FOLLOW_T_LPAREN_in_operatorsGG716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG720( FOLLOW_ID_in_operatorsGG720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG722( FOLLOW_T_COMMA_in_operatorsGG722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG726_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG726( FOLLOW_ID_in_operatorsGG726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG728( FOLLOW_T_RPAREN_in_operatorsGG728_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CROP_in_operatorsGG736_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CROP_in_operatorsGG736( FOLLOW_T_CROP_in_operatorsGG736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG738( FOLLOW_T_LPAREN_in_operatorsGG738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG742( FOLLOW_ID_in_operatorsGG742_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG744( FOLLOW_T_COMMA_in_operatorsGG744_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_interval_in_operatorsGG746_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_interval_in_operatorsGG746( FOLLOW_interval_in_operatorsGG746_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG748( FOLLOW_T_RPAREN_in_operatorsGG748_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SUBTRACT_in_operatorsGG756_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SUBTRACT_in_operatorsGG756( FOLLOW_T_SUBTRACT_in_operatorsGG756_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG758_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG758( FOLLOW_T_LPAREN_in_operatorsGG758_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG762( FOLLOW_ID_in_operatorsGG762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG764( FOLLOW_T_COMMA_in_operatorsGG764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG768_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG768( FOLLOW_ID_in_operatorsGG768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG770( FOLLOW_T_RPAREN_in_operatorsGG770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG778_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG778( FOLLOW_T_GRADIENT_in_operatorsGG778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG780_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG780( FOLLOW_T_LPAREN_in_operatorsGG780_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_in_operatorsGG782_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_in_operatorsGG782( FOLLOW_T_INTERNAL_in_operatorsGG782_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG784( FOLLOW_T_COMMA_in_operatorsGG784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG788_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG788( FOLLOW_ID_in_operatorsGG788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG790_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG790( FOLLOW_T_RPAREN_in_operatorsGG790_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG798_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG798( FOLLOW_T_GRADIENT_in_operatorsGG798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG800_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG800( FOLLOW_T_LPAREN_in_operatorsGG800_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_in_operatorsGG802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_in_operatorsGG802( FOLLOW_T_EXTERNAL_in_operatorsGG802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG804( FOLLOW_T_COMMA_in_operatorsGG804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG808_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG808( FOLLOW_ID_in_operatorsGG808_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG810( FOLLOW_T_RPAREN_in_operatorsGG810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG818_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG818( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG818_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG820_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG820( FOLLOW_T_LPAREN_in_operatorsGG820_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORPHOLOGICAL_in_operatorsGG822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORPHOLOGICAL_in_operatorsGG822( FOLLOW_T_MORPHOLOGICAL_in_operatorsGG822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG824( FOLLOW_T_COMMA_in_operatorsGG824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG828( FOLLOW_ID_in_operatorsGG828_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG830( FOLLOW_T_COMMA_in_operatorsGG830_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG834_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG834( FOLLOW_ID_in_operatorsGG834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG836( FOLLOW_T_RPAREN_in_operatorsGG836_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG844_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG844( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG844_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG846_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG846( FOLLOW_T_LPAREN_in_operatorsGG846_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_in_operatorsGG848_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_in_operatorsGG848( FOLLOW_T_ATTRIBUTE_in_operatorsGG848_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG850_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG850( FOLLOW_T_COMMA_in_operatorsGG850_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG854( FOLLOW_ID_in_operatorsGG854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG856( FOLLOW_T_COMMA_in_operatorsGG856_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG860_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG860( FOLLOW_ID_in_operatorsGG860_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG862( FOLLOW_T_RPAREN_in_operatorsGG862_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG870_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG870( FOLLOW_T_MAPPING_in_operatorsGG870_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG872( FOLLOW_T_LPAREN_in_operatorsGG872_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DMP_in_operatorsGG874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DMP_in_operatorsGG874( FOLLOW_T_DMP_in_operatorsGG874_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG876( FOLLOW_T_COMMA_in_operatorsGG876_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG880( FOLLOW_ID_in_operatorsGG880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG882( FOLLOW_T_COMMA_in_operatorsGG882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG886_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG886( FOLLOW_ID_in_operatorsGG886_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG890( FOLLOW_T_RPAREN_in_operatorsGG890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG898_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG898( FOLLOW_T_MAPPING_in_operatorsGG898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG900( FOLLOW_T_LPAREN_in_operatorsGG900_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DAP_in_operatorsGG902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DAP_in_operatorsGG902( FOLLOW_T_DAP_in_operatorsGG902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG904( FOLLOW_T_COMMA_in_operatorsGG904_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG908( FOLLOW_ID_in_operatorsGG908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG910( FOLLOW_T_COMMA_in_operatorsGG910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG914_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG914( FOLLOW_ID_in_operatorsGG914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG918_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG918( FOLLOW_T_RPAREN_in_operatorsGG918_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG926_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG926( FOLLOW_T_SEGMENTATION_in_operatorsGG926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG928_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG928( FOLLOW_T_LPAREN_in_operatorsGG928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG930( FOLLOW_T_MSLS_in_operatorsGG930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG932( FOLLOW_T_COMMA_in_operatorsGG932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG936( FOLLOW_ID_in_operatorsGG936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG938( FOLLOW_T_COMMA_in_operatorsGG938_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG942_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG942( FOLLOW_ID_in_operatorsGG942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG944( FOLLOW_T_RPAREN_in_operatorsGG944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG952_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG952( FOLLOW_T_SEGMENTATION_in_operatorsGG952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG954_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG954( FOLLOW_T_LPAREN_in_operatorsGG954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG956( FOLLOW_T_MSLS_in_operatorsGG956_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG958( FOLLOW_T_COMMA_in_operatorsGG958_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG962( FOLLOW_ID_in_operatorsGG962_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG964( FOLLOW_T_COMMA_in_operatorsGG964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG968_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG968( FOLLOW_ID_in_operatorsGG968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG970( FOLLOW_T_RPAREN_in_operatorsGG970_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG978_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG978( FOLLOW_T_SEGMENTATION_in_operatorsGG978_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG980_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG980( FOLLOW_T_LPAREN_in_operatorsGG980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG982( FOLLOW_T_WATHERSHADE_in_operatorsGG982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG984( FOLLOW_T_COMMA_in_operatorsGG984_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG988_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG988( FOLLOW_ID_in_operatorsGG988_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG990( FOLLOW_T_RPAREN_in_operatorsGG990_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1001_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1001( FOLLOW_T_SEGMENTATION_in_operatorsGG1001_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1003_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1003( FOLLOW_T_LPAREN_in_operatorsGG1003_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1005( FOLLOW_T_WATHERSHADE_in_operatorsGG1005_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1007( FOLLOW_T_COMMA_in_operatorsGG1007_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1011( FOLLOW_ID_in_operatorsGG1011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1013_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1013( FOLLOW_T_COMMA_in_operatorsGG1013_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG1017_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG1017( FOLLOW_ID_in_operatorsGG1017_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1019( FOLLOW_T_RPAREN_in_operatorsGG1019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1040( FOLLOW_DOUBLENUMBER_in_interval1040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_interval1042_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_interval1042( FOLLOW_T_COMMA_in_interval1042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1046( FOLLOW_DOUBLENUMBER_in_interval1046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBOX_in_operatorsBBGG1061_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBOX_in_operatorsBBGG1061( FOLLOW_operatorsBOX_in_operatorsBBGG1061_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1067( FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1067_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_operatorsBBGG1073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_operatorsBBGG1073( FOLLOW_operatorsAREA_in_operatorsBBGG1073_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1079( FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsBOX1096_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsBOX1096( FOLLOW_T_ERODE_in_operatorsBOX1096_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1098( FOLLOW_T_LPAREN_in_operatorsBOX1098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1100_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1100( FOLLOW_T_BOX_in_operatorsBOX1100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1102( FOLLOW_T_LPAREN_in_operatorsBOX1102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1106_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1106( FOLLOW_DOUBLENUMBER_in_operatorsBOX1106_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1108_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1108( FOLLOW_T_RPAREN_in_operatorsBOX1108_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1110( FOLLOW_T_COMMA_in_operatorsBOX1110_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1114_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1114( FOLLOW_ID_in_operatorsBOX1114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1116( FOLLOW_T_RPAREN_in_operatorsBOX1116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsBOX1124_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsBOX1124( FOLLOW_T_DILATE_in_operatorsBOX1124_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1126( FOLLOW_T_LPAREN_in_operatorsBOX1126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1128_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1128( FOLLOW_T_BOX_in_operatorsBOX1128_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1130( FOLLOW_T_LPAREN_in_operatorsBOX1130_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1134_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1134( FOLLOW_DOUBLENUMBER_in_operatorsBOX1134_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1136( FOLLOW_T_RPAREN_in_operatorsBOX1136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1138( FOLLOW_T_COMMA_in_operatorsBOX1138_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1142_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1142( FOLLOW_ID_in_operatorsBOX1142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1144( FOLLOW_T_RPAREN_in_operatorsBOX1144_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsBOX1151_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsBOX1151( FOLLOW_T_OPEN_in_operatorsBOX1151_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1153( FOLLOW_T_LPAREN_in_operatorsBOX1153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1155_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1155( FOLLOW_T_BOX_in_operatorsBOX1155_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1157( FOLLOW_T_LPAREN_in_operatorsBOX1157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1161_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1161( FOLLOW_DOUBLENUMBER_in_operatorsBOX1161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1163( FOLLOW_T_RPAREN_in_operatorsBOX1163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1165_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1165( FOLLOW_T_COMMA_in_operatorsBOX1165_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1169_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1169( FOLLOW_ID_in_operatorsBOX1169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1171( FOLLOW_T_RPAREN_in_operatorsBOX1171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsBOX1180_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsBOX1180( FOLLOW_T_CLOSE_in_operatorsBOX1180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1182( FOLLOW_T_LPAREN_in_operatorsBOX1182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1184_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1184( FOLLOW_T_BOX_in_operatorsBOX1184_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1186( FOLLOW_T_LPAREN_in_operatorsBOX1186_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1190_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1190( FOLLOW_DOUBLENUMBER_in_operatorsBOX1190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1192( FOLLOW_T_RPAREN_in_operatorsBOX1192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1194( FOLLOW_T_COMMA_in_operatorsBOX1194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX1198_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX1198( FOLLOW_ID_in_operatorsBOX1198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1200_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1200( FOLLOW_T_RPAREN_in_operatorsBOX1200_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1227_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1227( FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1227_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1229_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1229( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1229_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1231( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1231_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1233( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1233_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1237_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1237( FOLLOW_ID_in_operatorsRECONSTRUCTION1237_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1239_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1239( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1239_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1243_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1243( FOLLOW_ID_in_operatorsRECONSTRUCTION1243_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1245( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1245_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1255_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1255( FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1255_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1257_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1257( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1257_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1259( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1261( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1261_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1265( FOLLOW_ID_in_operatorsRECONSTRUCTION1265_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1267( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1267_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1271_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1271( FOLLOW_ID_in_operatorsRECONSTRUCTION1271_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1273( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1280_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1280( FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1282_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1282( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1284( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1286( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1288_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1288( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1288_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1290( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1294_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1294( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1296( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1298( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1298_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1302_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1302( FOLLOW_ID_in_operatorsRECONSTRUCTION1302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1304( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1312_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1312( FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1314_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1314( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1314_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1316( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1318( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1320_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1320( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1320_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1322( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1322_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1326_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1326( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1326_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1328( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1328_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1330( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1330_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1334_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1334( FOLLOW_ID_in_operatorsRECONSTRUCTION1334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1336_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1336( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1336_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsAREA1354_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsAREA1354( FOLLOW_T_OPEN_in_operatorsAREA1354_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1356( FOLLOW_T_LPAREN_in_operatorsAREA1356_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1358_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1358( FOLLOW_T_AREA_in_operatorsAREA1358_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1360( FOLLOW_T_COMMA_in_operatorsAREA1360_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1364_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1364( FOLLOW_DOUBLENUMBER_in_operatorsAREA1364_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1366( FOLLOW_T_COMMA_in_operatorsAREA1366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1370_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1370( FOLLOW_ID_in_operatorsAREA1370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1372( FOLLOW_T_RPAREN_in_operatorsAREA1372_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsAREA1379_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsAREA1379( FOLLOW_T_CLOSE_in_operatorsAREA1379_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA1381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA1381( FOLLOW_T_LPAREN_in_operatorsAREA1381_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA1383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA1383( FOLLOW_T_AREA_in_operatorsAREA1383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1385( FOLLOW_T_COMMA_in_operatorsAREA1385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1389( FOLLOW_DOUBLENUMBER_in_operatorsAREA1389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA1391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA1391( FOLLOW_T_COMMA_in_operatorsAREA1391_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1395_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1395( FOLLOW_ID_in_operatorsAREA1395_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA1397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA1397( FOLLOW_T_RPAREN_in_operatorsAREA1397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsATTRIBUTE1414_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsATTRIBUTE1414( FOLLOW_T_OPEN_in_operatorsATTRIBUTE1414_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1416_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1416( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1416_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1420( FOLLOW_ID_in_operatorsATTRIBUTE1420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1422( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1426( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1428_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1428( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1428_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1432_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1432( FOLLOW_ID_in_operatorsATTRIBUTE1432_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1434( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1434_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1441_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1441( FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1441_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1443_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1443( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1447( FOLLOW_ID_in_operatorsATTRIBUTE1447_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1449( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1453( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1453_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE1455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE1455( FOLLOW_T_COMMA_in_operatorsATTRIBUTE1455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1459_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1459( FOLLOW_ID_in_operatorsATTRIBUTE1459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1461( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1475_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1475( FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBG1477_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBG1477( FOLLOW_T_LPAREN_in_operatorsBG1477_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBG1479_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBG1479( FOLLOW_ID_in_operatorsBG1479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBG1481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBG1481( FOLLOW_T_RPAREN_in_operatorsBG1481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_TRESHOLD_in_operatorsGB1491_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_TRESHOLD_in_operatorsGB1491( FOLLOW_T_TRESHOLD_in_operatorsGB1491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGB1493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGB1493( FOLLOW_T_LPAREN_in_operatorsGB1493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGB1495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGB1495( FOLLOW_DOUBLENUMBER_in_operatorsGB1495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGB1497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGB1497( FOLLOW_T_COMMA_in_operatorsGB1497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGB1499_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGB1499( FOLLOW_ID_in_operatorsGB1499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGB1501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGB1501( FOLLOW_T_RPAREN_in_operatorsGB1501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1552( FOLLOW_DOUBLENUMBER_in_vector1552_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_vector1556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_vector1556( FOLLOW_T_COMMA_in_vector1556_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1569( FOLLOW_DOUBLENUMBER_in_vector1569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred25_MorphDSL926_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred25_MorphDSL926( FOLLOW_T_SEGMENTATION_in_synpred25_MorphDSL926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred25_MorphDSL928_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred25_MorphDSL928( FOLLOW_T_LPAREN_in_synpred25_MorphDSL928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred25_MorphDSL930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred25_MorphDSL930( FOLLOW_T_MSLS_in_synpred25_MorphDSL930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred25_MorphDSL932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred25_MorphDSL932( FOLLOW_T_COMMA_in_synpred25_MorphDSL932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred25_MorphDSL936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred25_MorphDSL936( FOLLOW_ID_in_synpred25_MorphDSL936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred25_MorphDSL938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred25_MorphDSL938( FOLLOW_T_COMMA_in_synpred25_MorphDSL938_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred25_MorphDSL942_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred25_MorphDSL942( FOLLOW_ID_in_synpred25_MorphDSL942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred25_MorphDSL944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred25_MorphDSL944( FOLLOW_T_RPAREN_in_synpred25_MorphDSL944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred26_MorphDSL952_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred26_MorphDSL952( FOLLOW_T_SEGMENTATION_in_synpred26_MorphDSL952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred26_MorphDSL954_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred26_MorphDSL954( FOLLOW_T_LPAREN_in_synpred26_MorphDSL954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred26_MorphDSL956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred26_MorphDSL956( FOLLOW_T_MSLS_in_synpred26_MorphDSL956_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred26_MorphDSL958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred26_MorphDSL958( FOLLOW_T_COMMA_in_synpred26_MorphDSL958_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred26_MorphDSL962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred26_MorphDSL962( FOLLOW_ID_in_synpred26_MorphDSL962_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred26_MorphDSL964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred26_MorphDSL964( FOLLOW_T_COMMA_in_synpred26_MorphDSL964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred26_MorphDSL968_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_synpred26_MorphDSL968( FOLLOW_ID_in_synpred26_MorphDSL968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred26_MorphDSL970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred26_MorphDSL970( FOLLOW_T_RPAREN_in_synpred26_MorphDSL970_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * Grammar/MorphDSL.g:167:1: program : load ( assignment )+ ;
 */
void
MorphDSLParser::program()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */

     
    		currentFigure = NULL;
    		interval1 = NULL;
    		interval2 = NULL;
    		marker1 = NULL;
    		marker2 = NULL;
    		outputFigureName = "";	
    	

 
    {
        // Grammar/MorphDSL.g:175:3: ( load ( assignment )+ )
        // Grammar/MorphDSL.g:176:3: load ( assignment )+
        {
            this->followPush(FOLLOW_load_in_program422);
            load();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:176:8: ( assignment )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // Grammar/MorphDSL.g:176:8: assignment
            	        {
            	            this->followPush(FOLLOW_assignment_in_program424);
            	            assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MorphDSLParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start load
 * Grammar/MorphDSL.g:178:1: load : currentFigure= ID '=' 'load' '(' '\\\"' id2= ID '\\\"' ')' ;
 */
void
MorphDSLParser::load()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    currentFigure;
    const CommonTokenType*    id2;

    /* Initialize rule variables
     */

    currentFigure       = NULL;
    id2       = NULL;


 
    {
        // Grammar/MorphDSL.g:179:2: (currentFigure= ID '=' 'load' '(' '\\\"' id2= ID '\\\"' ')' )
        // Grammar/MorphDSL.g:179:4: currentFigure= ID '=' 'load' '(' '\\\"' id2= ID '\\\"' ')'
        {
            currentFigure =  this->matchToken(ID, &FOLLOW_ID_in_load436);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_load438);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LOAD, &FOLLOW_T_LOAD_in_load440);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_load442);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load444);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            id2 =  this->matchToken(ID, &FOLLOW_ID_in_load448);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_DOUBLE_QUOTE, &FOLLOW_T_DOUBLE_QUOTE_in_load450);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_load452);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 loadImpl((id2->getText()), (currentFigure->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloadEx; /* Prevent compiler warnings */
    ruleloadEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end load */

/**
 * $ANTLR start assignment
 * Grammar/MorphDSL.g:182:1: assignment : figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector ) ;
 */
void
MorphDSLParser::assignment()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:182:12: ( figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector ) )
        // Grammar/MorphDSL.g:183:2: figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector )
        {
            this->followPush(FOLLOW_figurevector_in_assignment466);
            figurevector();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_assignment468);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:184:2: ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector )
            {
                int alt2=6;
                switch ( this->LA(1) )
                {
                case T_BOUNDARY:
                case T_COMPLEMENT:
                case T_HITMISS:
                case T_INTERSECTION:
                case T_UNION:
                case T_WITHOUT:
                	{
                		alt2=1;
                	}
                    break;
                case T_CROP:
                case T_DIFERENTIALPROFILES:
                case T_GRADIENT:
                case T_MAPPING:
                case T_MULTIPLY:
                case T_NEGATE:
                case T_NORMALIZE:
                case T_SEGMENTATION:
                case T_SUBTRACT:
                	{
                		alt2=2;
                	}
                    break;
                case T_CLOSE:
                case T_DILATE:
                case T_ERODE:
                case T_OPEN:
                	{
                		alt2=3;
                	}
                    break;
                case T_DISTANCETRANSFORM:
                	{
                		alt2=4;
                	}
                    break;
                case T_TRESHOLD:
                	{
                		alt2=5;
                	}
                    break;
                case DOUBLENUMBER:
                	{
                		alt2=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleassignmentEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:184:4: operatorsBB
            	    {
            	        this->followPush(FOLLOW_operatorsBB_in_assignment474);
            	        operatorsBB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:185:4: operatorsGG
            	    {
            	        this->followPush(FOLLOW_operatorsGG_in_assignment480);
            	        operatorsGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:186:4: operatorsBBGG
            	    {
            	        this->followPush(FOLLOW_operatorsBBGG_in_assignment485);
            	        operatorsBBGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:187:4: operatorsBG
            	    {
            	        this->followPush(FOLLOW_operatorsBG_in_assignment490);
            	        operatorsBG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:188:4: operatorsGB
            	    {
            	        this->followPush(FOLLOW_operatorsGB_in_assignment495);
            	        operatorsGB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:189:4: vector
            	    {
            	        this->followPush(FOLLOW_vector_in_assignment500);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start figurevector
 * Grammar/MorphDSL.g:192:1: figurevector : ID ;
 */
void
MorphDSLParser::figurevector()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID1;

    /* Initialize rule variables
     */

    ID1       = NULL;


 
    {
        // Grammar/MorphDSL.g:192:14: ( ID )
        // Grammar/MorphDSL.g:192:16: ID
        {
            ID1 =  this->matchToken(ID, &FOLLOW_ID_in_figurevector511);
            if  (this->hasException())
            {
                goto rulefigurevectorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 currentFigure = ID1; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefigurevectorEx; /* Prevent compiler warnings */
    rulefigurevectorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end figurevector */

/**
 * $ANTLR start operatorsBB
 * Grammar/MorphDSL.g:194:1: operatorsBB : ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    cId;
    const CommonTokenType*    uId1;
    const CommonTokenType*    uId2;
    const CommonTokenType*    iId1;
    const CommonTokenType*    iId2;
    const CommonTokenType*    wId1;
    const CommonTokenType*    wId2;
    const CommonTokenType*    hId1;
    const CommonTokenType*    hId2;
    const CommonTokenType*    bId;

    /* Initialize rule variables
     */

    cId       = NULL;
    uId1       = NULL;
    uId2       = NULL;
    iId1       = NULL;
    iId2       = NULL;
    wId1       = NULL;
    wId2       = NULL;
    hId1       = NULL;
    hId2       = NULL;
    bId       = NULL;


 
    {
        // Grammar/MorphDSL.g:194:13: ( ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' ) )
        // Grammar/MorphDSL.g:195:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
        {
            // Grammar/MorphDSL.g:195:2: ( 'complement' '(' cId= ID ')' | 'union' '(' uId1= ID ',' uId2= ID ')' | 'intersection' '(' iId1= ID ',' iId2= ID ')' | 'without' '(' wId1= ID ',' wId2= ID ')' | 'hitmiss' '(' hId1= ID ',' hId2= ID ')' | 'boundary' '(' bId= ID ')' )
            {
                int alt3=6;
                switch ( this->LA(1) )
                {
                case T_COMPLEMENT:
                	{
                		alt3=1;
                	}
                    break;
                case T_UNION:
                	{
                		alt3=2;
                	}
                    break;
                case T_INTERSECTION:
                	{
                		alt3=3;
                	}
                    break;
                case T_WITHOUT:
                	{
                		alt3=4;
                	}
                    break;
                case T_HITMISS:
                	{
                		alt3=5;
                	}
                    break;
                case T_BOUNDARY:
                	{
                		alt3=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 3 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBEx;

                }

                switch (alt3)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:195:4: 'complement' '(' cId= ID ')'
            	    {
            	         this->matchToken(T_COMPLEMENT, &FOLLOW_T_COMPLEMENT_in_operatorsBB525);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB527);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB531);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB533);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            	complementImpl((cId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:196:4: 'union' '(' uId1= ID ',' uId2= ID ')'
            	    {
            	         this->matchToken(T_UNION, &FOLLOW_T_UNION_in_operatorsBB540);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB542);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB546);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB548);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        uId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB552);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB554);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             unionImpl((uId1->getText()), (uId2->getText())); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:197:4: 'intersection' '(' iId1= ID ',' iId2= ID ')'
            	    {
            	         this->matchToken(T_INTERSECTION, &FOLLOW_T_INTERSECTION_in_operatorsBB561);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB563);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB567);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB569);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        iId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB573);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB575);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             intersectionImpl((iId1->getText()), (iId2->getText())); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:198:4: 'without' '(' wId1= ID ',' wId2= ID ')'
            	    {
            	         this->matchToken(T_WITHOUT, &FOLLOW_T_WITHOUT_in_operatorsBB582);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB584);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB588);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB590);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        wId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB594);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB596);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             withoutImpl((wId1->getText()), (wId2->getText())); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:199:4: 'hitmiss' '(' hId1= ID ',' hId2= ID ')'
            	    {
            	         this->matchToken(T_HITMISS, &FOLLOW_T_HITMISS_in_operatorsBB603);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB605);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB609);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB611);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        hId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB615);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB617);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             hitMissImpl((hId1->getText()), (hId2->getText())); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:200:4: 'boundary' '(' bId= ID ')'
            	    {
            	         this->matchToken(T_BOUNDARY, &FOLLOW_T_BOUNDARY_in_operatorsBB624);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB626);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        bId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBB630);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB632);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             boundaryImpl((bId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBEx; /* Prevent compiler warnings */
    ruleoperatorsBBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBB */

/**
 * $ANTLR start operatorsGG
 * Grammar/MorphDSL.g:203:1: operatorsGG : ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) ;
 */
void
MorphDSLParser::operatorsGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    nId;
    const CommonTokenType*    mId;
    const CommonTokenType*    mDbl;
    const CommonTokenType*    mDbl2;
    const CommonTokenType*    mId2;
    const CommonTokenType*    mId3;
    const CommonTokenType*    mId4;
    const CommonTokenType*    cId;
    const CommonTokenType*    sId1;
    const CommonTokenType*    sId2;
    const CommonTokenType*    giId;
    const CommonTokenType*    geId;
    const CommonTokenType*    dpmId1;
    const CommonTokenType*    dpmId2;
    const CommonTokenType*    dpaId1;
    const CommonTokenType*    dpaId2;
    const CommonTokenType*    dmpId1;
    const CommonTokenType*    dmpId2;
    const CommonTokenType*    dapId1;
    const CommonTokenType*    dapId2;
    const CommonTokenType*    msls_1_Id1;
    const CommonTokenType*    msls_1_Id2;
    const CommonTokenType*    msls_2_Id1;
    const CommonTokenType*    msls_2_Id2;
    const CommonTokenType*    watershadeId;
    const CommonTokenType*    watershadeMarkerId2;
    const CommonTokenType*    watershadeMarkerId1;
    MorphDSLParser_interval_return interval2;
    typedef	MorphDSLParser_interval_return RETURN_TYPE_interval2;

    /* Initialize rule variables
     */

    nId       = NULL;
    mId       = NULL;
    mDbl       = NULL;
    mDbl2       = NULL;
    mId2       = NULL;
    mId3       = NULL;
    mId4       = NULL;
    cId       = NULL;
    sId1       = NULL;
    sId2       = NULL;
    giId       = NULL;
    geId       = NULL;
    dpmId1       = NULL;
    dpmId2       = NULL;
    dpaId1       = NULL;
    dpaId2       = NULL;
    dmpId1       = NULL;
    dmpId2       = NULL;
    dapId1       = NULL;
    dapId2       = NULL;
    msls_1_Id1       = NULL;
    msls_1_Id2       = NULL;
    msls_2_Id1       = NULL;
    msls_2_Id2       = NULL;
    watershadeId       = NULL;
    watershadeMarkerId2       = NULL;
    watershadeMarkerId1       = NULL;


 
    {
        // Grammar/MorphDSL.g:203:13: ( ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' ) )
        // Grammar/MorphDSL.g:204:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
        {
            // Grammar/MorphDSL.g:204:2: ( 'negate' '(' nId= ID ')' | 'normalize' | 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')' | 'multiply' '(' mId3= ID ',' mId4= ID ')' | 'crop' '(' cId= ID ',' interval ')' | 'subtract' '(' sId1= ID ',' sId2= ID ')' | 'gradient' '(' 'INTERNAL' ',' giId= ID ')' | 'gradient' '(' 'EXTERNAL' ',' geId= ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')' | 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')' | 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')' )
            {
                int alt4=17;
                switch ( this->LA(1) )
                {
                case T_NEGATE:
                	{
                		alt4=1;
                	}
                    break;
                case T_NORMALIZE:
                	{
                		alt4=2;
                	}
                    break;
                case T_MULTIPLY:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case DOUBLENUMBER:
                									{
                										alt4=3;
                									}
                								    break;
                								case ID:
                									{
                										alt4=5;
                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 4 );
                								    ex->set_state( 25 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 4 );
                						    ex->set_state( 15 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case DOUBLENUMBER:
                					{
                						alt4=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 4 );
                				    ex->set_state( 10 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 4 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_CROP:
                	{
                		alt4=6;
                	}
                    break;
                case T_SUBTRACT:
                	{
                		alt4=7;
                	}
                    break;
                case T_GRADIENT:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_INTERNAL:
                					{
                						alt4=8;
                					}
                				    break;
                				case T_EXTERNAL:
                					{
                						alt4=9;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 4 );
                				    ex->set_state( 11 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 4 );
                		    ex->set_state( 6 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_DIFERENTIALPROFILES:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MORPHOLOGICAL:
                					{
                						alt4=10;
                					}
                				    break;
                				case T_ATTRIBUTE:
                					{
                						alt4=11;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 4 );
                				    ex->set_state( 12 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 4 );
                		    ex->set_state( 7 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_MAPPING:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_DMP:
                					{
                						alt4=12;
                					}
                				    break;
                				case T_DAP:
                					{
                						alt4=13;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 4 );
                				    ex->set_state( 13 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 4 );
                		    ex->set_state( 8 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_SEGMENTATION:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MSLS:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																{
                																    int LA4_36 = this->LA(9);
                																    if ( (this->msynpred( antlr3::ClassForwarder<synpred25_MorphDSL>() )))
                																    {
                																        alt4=14;
                																    }
                																    else if ( (this->msynpred( antlr3::ClassForwarder<synpred26_MorphDSL>() )))
                																    {
                																        alt4=15;
                																    }
                																    else
                																    {
                																        if (this->get_backtracking()>0)
                																        {
                																            this->set_failedflag( true );
                																            return ;
                																        }


                																        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																        ex->set_decisionNum( 4 );
                																        ex->set_state( 36 );


                																        goto ruleoperatorsGGEx;

                																    }
                																}
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 4 );
                														    ex->set_state( 35 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 4 );
                												    ex->set_state( 32 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 4 );
                										    ex->set_state( 30 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 4 );
                								    ex->set_state( 26 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 4 );
                						    ex->set_state( 23 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case T_WATHERSHADE:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_RPAREN:
                											{
                												alt4=16;
                											}
                										    break;
                										case T_COMMA:
                											{
                												alt4=17;
                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 4 );
                										    ex->set_state( 31 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 4 );
                								    ex->set_state( 27 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 4 );
                						    ex->set_state( 24 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 4 );
                				    ex->set_state( 14 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 4 );
                		    ex->set_state( 9 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto ruleoperatorsGGEx;

                }

                switch (alt4)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:204:4: 'negate' '(' nId= ID ')'
            	    {
            	         this->matchToken(T_NEGATE, &FOLLOW_T_NEGATE_in_operatorsGG650);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG652);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        nId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG656);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG658);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             negateImpl((nId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:205:4: 'normalize'
            	    {
            	         this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorsGG665);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             normalizeImpl(); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:206:4: 'multiply' '(' mId= ID ',' mDbl= DOUBLENUMBER ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG672);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG674);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG678);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG680);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG684);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG686);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl((mId->getText()), toDouble(mDbl)); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:207:4: 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG693);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG695);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG699);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG701);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG705);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG707);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl(toDouble(mDbl2), (mId2->getText())); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:208:4: 'multiply' '(' mId3= ID ',' mId4= ID ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG714);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG716);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId3 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG720);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG722);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mId4 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG726);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG728);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             multiplyImpl((mId3->getText()), (mId4->getText())); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:209:4: 'crop' '(' cId= ID ',' interval ')'
            	    {
            	         this->matchToken(T_CROP, &FOLLOW_T_CROP_in_operatorsGG736);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG738);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG742);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG744);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_interval_in_operatorsGG746);
            	        interval2=interval();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG748);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             cropImpl((cId->getText()), 
            	            interval2.start
            	            , interval2.stop
            	            ); 
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:210:4: 'subtract' '(' sId1= ID ',' sId2= ID ')'
            	    {
            	         this->matchToken(T_SUBTRACT, &FOLLOW_T_SUBTRACT_in_operatorsGG756);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG758);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG762);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG764);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        sId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG768);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG770);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             subtractImpl((sId1->getText()), (sId2->getText())); 
            	        }


            	    }
            	    break;
            	case 8:
            	    // Grammar/MorphDSL.g:211:4: 'gradient' '(' 'INTERNAL' ',' giId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG778);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG780);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_INTERNAL, &FOLLOW_T_INTERNAL_in_operatorsGG782);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG784);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        giId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG788);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG790);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientInternalImpl((giId->getText())); 
            	        }


            	    }
            	    break;
            	case 9:
            	    // Grammar/MorphDSL.g:212:4: 'gradient' '(' 'EXTERNAL' ',' geId= ID ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG798);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG800);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_EXTERNAL, &FOLLOW_T_EXTERNAL_in_operatorsGG802);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG804);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        geId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG808);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG810);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             gradientExternalImpl((geId->getText())); 
            	        }


            	    }
            	    break;
            	case 10:
            	    // Grammar/MorphDSL.g:213:4: 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= ID ',' dpmId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG818);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG820);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MORPHOLOGICAL, &FOLLOW_T_MORPHOLOGICAL_in_operatorsGG822);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG824);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG828);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG830);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpmId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG834);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG836);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesMorphologicalImpl((dpmId1->getText()), (dpmId2->getText())); 
            	        }


            	    }
            	    break;
            	case 11:
            	    // Grammar/MorphDSL.g:214:4: 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= ID ',' dpaId2= ID ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG844);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG846);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_ATTRIBUTE, &FOLLOW_T_ATTRIBUTE_in_operatorsGG848);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG850);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG854);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG856);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dpaId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG860);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG862);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             diferentialProfilesAttributeImpl((dpaId1->getText()), (dpaId2->getText())); 
            	        }


            	    }
            	    break;
            	case 12:
            	    // Grammar/MorphDSL.g:215:4: 'mapping' '(' 'DMP' ',' dmpId1= ID ',' dmpId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG870);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG872);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DMP, &FOLLOW_T_DMP_in_operatorsGG874);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG876);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG880);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG882);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dmpId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG886);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG890);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 13:
            	    // Grammar/MorphDSL.g:216:4: 'mapping' '(' 'DAP' ',' dapId1= ID ',' dapId2= ID ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG898);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG900);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DAP, &FOLLOW_T_DAP_in_operatorsGG902);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG904);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG908);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG910);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dapId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG914);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG918);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 14:
            	    // Grammar/MorphDSL.g:217:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG926);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG928);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG930);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG932);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG936);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG938);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG942);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG944);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls1Impl((msls_1_Id1->getText()), (msls_1_Id2->getText())); 
            	        }


            	    }
            	    break;
            	case 15:
            	    // Grammar/MorphDSL.g:218:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG952);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG954);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG956);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG958);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG962);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG964);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG968);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG970);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationMsls2Impl((msls_2_Id1->getText()), (msls_2_Id2->getText())); 
            	        }


            	    }
            	    break;
            	case 16:
            	    // Grammar/MorphDSL.g:219:4: 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG978);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG980);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG982);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG984);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        watershadeId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG988);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG990);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             segmentationWatershadeImpl((watershadeId->getText())); 
            	        }


            	    }
            	    break;
            	case 17:
            	    // Grammar/MorphDSL.g:223:4: 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= ID ',' watershadeMarkerId1= ID ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1001);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1003);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1005);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1007);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        watershadeMarkerId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1011);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1013);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        watershadeMarkerId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGG1017);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1019);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            if ( this->get_backtracking()==0 )
            {
                 segmentationWatershadeMarkerImpl((watershadeMarkerId1->getText()), (watershadeMarkerId2->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGGEx; /* Prevent compiler warnings */
    ruleoperatorsGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGG */

/**
 * $ANTLR start interval
 * Grammar/MorphDSL.g:226:1: interval returns [double start, double stop] : dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER ;
 */
MorphDSLParser_interval_return
MorphDSLParser::interval()
{
    MorphDSLParser_interval_return retval(this);


    const CommonTokenType*    dbl1;
    const CommonTokenType*    dbl2;

    /* Initialize rule variables
     */

    dbl1       = NULL;
    dbl2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:226:44: (dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER )
        // Grammar/MorphDSL.g:227:2: dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER
        {
            dbl1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1040);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_interval1042);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            dbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1046);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {

                		istringstream((dbl1->getText())) >> 
                retval.start
                ;
                		istringstream((dbl2->getText())) >> 
                retval.stop
                ;
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end interval */

/**
 * $ANTLR start operatorsBBGG
 * Grammar/MorphDSL.g:233:1: operatorsBBGG : ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) ;
 */
void
MorphDSLParser::operatorsBBGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:233:15: ( ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) )
        // Grammar/MorphDSL.g:234:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
        {
            // Grammar/MorphDSL.g:234:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
            {
                int alt5=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt5=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt5=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 5 );
                				    ex->set_state( 5 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 5 );
                		    ex->set_state( 1 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_DILATE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt5=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt5=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 5 );
                				    ex->set_state( 6 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 5 );
                		    ex->set_state( 2 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_OPEN:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt5=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt5=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt5=3;
                					}
                				    break;
                				case ID:
                					{
                						alt5=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 5 );
                				    ex->set_state( 7 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 5 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_CLOSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt5=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt5=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt5=3;
                					}
                				    break;
                				case ID:
                					{
                						alt5=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 5 );
                				    ex->set_state( 8 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 5 );
                		    ex->set_state( 4 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBGGEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:234:4: operatorsBOX
            	    {
            	        this->followPush(FOLLOW_operatorsBOX_in_operatorsBBGG1061);
            	        operatorsBOX();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:235:4: operatorsRECONSTRUCTION
            	    {
            	        this->followPush(FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1067);
            	        operatorsRECONSTRUCTION();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:236:4: operatorsAREA
            	    {
            	        this->followPush(FOLLOW_operatorsAREA_in_operatorsBBGG1073);
            	        operatorsAREA();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:237:4: operatorsATTRIBUTE
            	    {
            	        this->followPush(FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1079);
            	        operatorsATTRIBUTE();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBGGEx; /* Prevent compiler warnings */
    ruleoperatorsBBGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBBGG */

/**
 * $ANTLR start operatorsBOX
 * Grammar/MorphDSL.g:240:1: operatorsBOX : ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsBOX()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eNum;
    const CommonTokenType*    eId;
    const CommonTokenType*    dNum;
    const CommonTokenType*    dId;
    const CommonTokenType*    oNum;
    const CommonTokenType*    oId;
    const CommonTokenType*    cNum;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eNum       = NULL;
    eId       = NULL;
    dNum       = NULL;
    dId       = NULL;
    oNum       = NULL;
    oId       = NULL;
    cNum       = NULL;
    cId       = NULL;


 
    {
        // Grammar/MorphDSL.g:240:14: ( ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:241:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:241:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')' )
            {
                int alt6=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		alt6=1;
                	}
                    break;
                case T_DILATE:
                	{
                		alt6=2;
                	}
                    break;
                case T_OPEN:
                	{
                		alt6=3;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt6=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBOXEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:241:4: 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= ID ')'
            	    {
            	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsBOX1096);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1098);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1100);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1102);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1106);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1108);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1110);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1114);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1116);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             erodeBoxImpl(toDouble(eNum), (eId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:242:4: 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= ID ')'
            	    {
            	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsBOX1124);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1126);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1128);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1130);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1134);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1136);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1138);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1142);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1144);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             dilateBoxImpl(toDouble(dNum), (dId->getText())); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:243:4: 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsBOX1151);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1153);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1155);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1157);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1161);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1163);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1165);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1169);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1171);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openBoxImpl(toDouble(oNum), (oId->getText())); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:244:4: 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsBOX1180);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1182);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1184);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1186);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1190);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1192);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1194);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX1198);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1200);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeBoxImpl(toDouble(cNum), (cId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBOXEx; /* Prevent compiler warnings */
    ruleoperatorsBOXEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBOX */

/**
 * $ANTLR start operatorsRECONSTRUCTION
 * Grammar/MorphDSL.g:247:1: operatorsRECONSTRUCTION : ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' );
 */
void
MorphDSLParser::operatorsRECONSTRUCTION()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eId2;
    const CommonTokenType*    eId1;
    const CommonTokenType*    dId2;
    const CommonTokenType*    dId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    eId2       = NULL;
    eId1       = NULL;
    dId2       = NULL;
    dId1       = NULL;
    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


 
    {
        {
            //  Grammar/MorphDSL.g:247:25: ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')' )

            ANTLR_UINT32 alt7;

            alt7=4;

            switch ( this->LA(1) )
            {
            case T_ERODE:
            	{
            		alt7=1;
            	}
                break;
            case T_DILATE:
            	{
            		alt7=2;
            	}
                break;
            case T_OPEN:
            	{
            		alt7=3;
            	}
                break;
            case T_CLOSE:
            	{
            		alt7=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleoperatorsRECONSTRUCTIONEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:249:4: 'erode' '(' 'RECONSTRUCTION' ',' eId2= ID ',' eId1= ID ')'
        	    {
        	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1227);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1229);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1231);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1233);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1237);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1239);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        eId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1243);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1245);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             erodeImpl((eId1->getText()), (eId2->getText())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:251:4: 'dilate' '(' 'RECONSTRUCTION' ',' dId2= ID ',' dId1= ID ')'
        	    {
        	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1255);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1257);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1259);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1261);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1265);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1267);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        dId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1271);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1273);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             dilateImpl((dId1->getText()), (dId2->getText())); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:252:4: 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= ID ')'
        	    {
        	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1280);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1282);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1284);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1286);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1288);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1290);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1294);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1296);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1298);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1302);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1304);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             openImpl(toDouble(oDbl), (oId->getText())); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:253:4: 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= ID ')'
        	    {
        	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1312);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1314);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1316);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1318);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1320);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1322);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1326);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1328);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1330);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1334);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1336);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             closeImpl(toDouble(cDbl), (cId->getText())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsRECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleoperatorsRECONSTRUCTIONEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsRECONSTRUCTION */

/**
 * $ANTLR start operatorsAREA
 * Grammar/MorphDSL.g:256:1: operatorsAREA : ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) ;
 */
void
MorphDSLParser::operatorsAREA()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId;

    /* Initialize rule variables
     */

    oDbl       = NULL;
    oId       = NULL;
    cDbl       = NULL;
    cId       = NULL;


 
    {
        // Grammar/MorphDSL.g:256:15: ( ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' ) )
        // Grammar/MorphDSL.g:257:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
        {
            // Grammar/MorphDSL.g:257:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')' )
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt8=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt8=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 8 );
                    ex->set_state( 0 );


                    goto ruleoperatorsAREAEx;

                }

                switch (alt8)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:257:4: 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsAREA1354);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1356);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1358);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1360);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1364);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1366);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1370);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1372);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openArea(toDouble(oDbl), (oId->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:258:4: 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsAREA1379);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA1381);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA1383);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1385);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1389);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA1391);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId =  this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1395);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA1397);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeArea(toDouble(cDbl), (cId->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsAREAEx; /* Prevent compiler warnings */
    ruleoperatorsAREAEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsAREA */

/**
 * $ANTLR start operatorsATTRIBUTE
 * Grammar/MorphDSL.g:261:1: operatorsATTRIBUTE : ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) ;
 */
void
MorphDSLParser::operatorsATTRIBUTE()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oId1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    oId2;
    const CommonTokenType*    cId1;
    const CommonTokenType*    cDbl;
    const CommonTokenType*    cId2;

    /* Initialize rule variables
     */

    oId1       = NULL;
    oDbl       = NULL;
    oId2       = NULL;
    cId1       = NULL;
    cDbl       = NULL;
    cId2       = NULL;


 
    {
        // Grammar/MorphDSL.g:261:20: ( ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' ) )
        // Grammar/MorphDSL.g:262:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
        {
            // Grammar/MorphDSL.g:262:2: ( 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')' | 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')' )
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt9=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt9=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleoperatorsATTRIBUTEEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:262:4: 'open' '(' oId1= ID ',' oDbl= DOUBLENUMBER ',' oId2= ID ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsATTRIBUTE1414);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1416);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1420);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1422);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1426);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1428);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1432);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1434);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             openAttribute((oId1->getText()), toDouble(oDbl), (oId2->getText())); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:263:4: 'close' '(' cId1= ID ',' cDbl= DOUBLENUMBER ',' cId2= ID ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsATTRIBUTE1441);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE1443);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1447);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1449);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1453);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE1455);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cId2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1459);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE1461);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             closeAttribute((cId1->getText()), toDouble(cDbl), (cId2->getText())); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsATTRIBUTEEx; /* Prevent compiler warnings */
    ruleoperatorsATTRIBUTEEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsATTRIBUTE */

/**
 * $ANTLR start operatorsBG
 * Grammar/MorphDSL.g:266:1: operatorsBG : 'distanceTransform' '(' ID ')' ;
 */
void
MorphDSLParser::operatorsBG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    ID3;

    /* Initialize rule variables
     */

    ID3       = NULL;


 
    {
        // Grammar/MorphDSL.g:266:13: ( 'distanceTransform' '(' ID ')' )
        // Grammar/MorphDSL.g:266:15: 'distanceTransform' '(' ID ')'
        {
             this->matchToken(T_DISTANCETRANSFORM, &FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG1475);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBG1477);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID3 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsBG1479);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBG1481);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 distanceTransformImpl((ID3->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBGEx; /* Prevent compiler warnings */
    ruleoperatorsBGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBG */

/**
 * $ANTLR start operatorsGB
 * Grammar/MorphDSL.g:268:1: operatorsGB : 'treshold' '(' DOUBLENUMBER ',' ID ')' ;
 */
void
MorphDSLParser::operatorsGB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    DOUBLENUMBER4;
    const CommonTokenType*    ID5;

    /* Initialize rule variables
     */

    DOUBLENUMBER4       = NULL;
    ID5       = NULL;


 
    {
        // Grammar/MorphDSL.g:268:13: ( 'treshold' '(' DOUBLENUMBER ',' ID ')' )
        // Grammar/MorphDSL.g:268:15: 'treshold' '(' DOUBLENUMBER ',' ID ')'
        {
             this->matchToken(T_TRESHOLD, &FOLLOW_T_TRESHOLD_in_operatorsGB1491);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGB1493);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            DOUBLENUMBER4 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGB1495);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGB1497);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID5 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGB1499);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGB1501);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 tresholdImpl(toDouble(DOUBLENUMBER4), (ID5->getText())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGBEx; /* Prevent compiler warnings */
    ruleoperatorsGBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGB */

/**
 * $ANTLR start marker
 * Grammar/MorphDSL.g:270:1: marker : ( ID | DOUBLENUMBER ) ;
 */
void
MorphDSLParser::marker()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:270:8: ( ( ID | DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= DOUBLENUMBER) && (this->LA(1) <= ID)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemarkerEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemarkerEx; /* Prevent compiler warnings */
    rulemarkerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end marker */

/**
 * $ANTLR start vector
 * Grammar/MorphDSL.g:275:1: vector : (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) ;
 */
MorphDSLParser_vector_return
MorphDSLParser::vector()
{
    MorphDSLParser_vector_return retval(this);


    const CommonTokenType*    st;
    const CommonTokenType*    kncSt;

    /* Initialize rule variables
     */

     std::vector<double> tmp; 
    st       = NULL;
    kncSt       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:288:2: ( (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:289:2: (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER )
        {
            // Grammar/MorphDSL.g:289:2: (st= DOUBLENUMBER ( ',' ) )*

            for (;;)
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case DOUBLENUMBER:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_COMMA:
                			{
                				alt10=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:289:3: st= DOUBLENUMBER ( ',' )
            	    {
            	        st =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1552);
            	        if  (this->hasException())
            	        {
            	            goto rulevectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        // Grammar/MorphDSL.g:289:19: ( ',' )
            	        // Grammar/MorphDSL.g:289:21: ','
            	        {
            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_vector1556);
            	            if  (this->hasException())
            	            {
            	                goto rulevectorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             tmp.push_back(toDouble(st)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


            // Grammar/MorphDSL.g:289:65: (kncSt= DOUBLENUMBER )
            // Grammar/MorphDSL.g:289:66: kncSt= DOUBLENUMBER
            {
                kncSt =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1569);
                if  (this->hasException())
                {
                    goto rulevectorEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                     tmp.push_back(toDouble(kncSt)); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		stringstream fNew;//create a stringstream
                	//	cout<< "VECTOR: ";
                		fNew << currentFigure->getText()[0]-96;
                	//	cout<< currentFigure->getText();
                	//	cout<< " ";
                	//	cout<< fNew.str();
                	//	cout<< endl;
                		std::map<string, std::vector<double>>::iterator it = vect.begin();
                		vect.insert (it, std::pair<string, std::vector<double>>(fNew.str(), tmp));
                	
            }
        }

    return retval;
}
/* $ANTLR end vector */

// $ANTLR start synpred25_MorphDSL
void MorphDSLParser::msynpred25_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_1_Id1;
	const CommonTokenType*    msls_1_Id2;

	msls_1_Id1       = NULL;
	msls_1_Id2       = NULL;

    // Grammar/MorphDSL.g:217:4: ( 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')' )
    // Grammar/MorphDSL.g:217:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= ID ',' msls_1_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred25_MorphDSL926);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred25_MorphDSL928);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred25_MorphDSL930);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred25_MorphDSL932);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred25_MorphDSL936);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred25_MorphDSL938);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_1_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred25_MorphDSL942);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred25_MorphDSL944);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred25_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred25_MorphDSLEx: ;

}
// $ANTLR end synpred25_MorphDSL

// $ANTLR start synpred26_MorphDSL
void MorphDSLParser::msynpred26_MorphDSL_fragment(  )
{
	const CommonTokenType*    msls_2_Id1;
	const CommonTokenType*    msls_2_Id2;

	msls_2_Id1       = NULL;
	msls_2_Id2       = NULL;

    // Grammar/MorphDSL.g:218:4: ( 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')' )
    // Grammar/MorphDSL.g:218:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= ID ',' msls_2_Id2= ID ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred26_MorphDSL952);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred26_MorphDSL954);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred26_MorphDSL956);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred26_MorphDSL958);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id1 =  this->matchToken(ID, &FOLLOW_ID_in_synpred26_MorphDSL962);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred26_MorphDSL964);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        msls_2_Id2 =  this->matchToken(ID, &FOLLOW_ID_in_synpred26_MorphDSL968);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred26_MorphDSL970);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred26_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred26_MorphDSLEx: ;

}
// $ANTLR end synpred26_MorphDSL
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred26_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred26_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred25_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred25_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
