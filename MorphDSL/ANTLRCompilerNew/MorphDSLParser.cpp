/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Grammar/MorphDSL.g
 *     -                            On : 2015-06-30 11:48:23
 *     -                for the parser : MorphDSLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */
using namespace std;
/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "stdafx.h"
#include    "MorphDSLParser.hpp"
/* Stdafx.h mora vedno biti na vrhu (prvi definiran) */
#include	"Razredi/SqlWhere.h"
#include "Semantika/MorphDSLSemantics.h"

/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 	LPM_MorphDSL  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MorphDSLParserTokenNames[69+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DOUBLENUMBER",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "T_AND",
        (ANTLR_UINT8*) "T_AREA",
        (ANTLR_UINT8*) "T_AREA_SQL",
        (ANTLR_UINT8*) "T_ATRIBUTE",
        (ANTLR_UINT8*) "T_ATTRIBUTE",
        (ANTLR_UINT8*) "T_ATTRIBUTE_SQL",
        (ANTLR_UINT8*) "T_BOUNDARY",
        (ANTLR_UINT8*) "T_BOX",
        (ANTLR_UINT8*) "T_CLOSE",
        (ANTLR_UINT8*) "T_COMMA",
        (ANTLR_UINT8*) "T_COMPLEMENT",
        (ANTLR_UINT8*) "T_CROP",
        (ANTLR_UINT8*) "T_DAP",
        (ANTLR_UINT8*) "T_DIFERENTIALPROFILES",
        (ANTLR_UINT8*) "T_DILATE",
        (ANTLR_UINT8*) "T_DISTANCETRANSFORM",
        (ANTLR_UINT8*) "T_DMP",
        (ANTLR_UINT8*) "T_DOUBLE_QUOTE",
        (ANTLR_UINT8*) "T_EQUALS",
        (ANTLR_UINT8*) "T_ERODE",
        (ANTLR_UINT8*) "T_EXTERNAL",
        (ANTLR_UINT8*) "T_EXTERNAL_GRADIENT",
        (ANTLR_UINT8*) "T_FROM",
        (ANTLR_UINT8*) "T_GRADIENT",
        (ANTLR_UINT8*) "T_HITMISS",
        (ANTLR_UINT8*) "T_INTERNAL",
        (ANTLR_UINT8*) "T_INTERNAL_GRADIENT",
        (ANTLR_UINT8*) "T_INTERSECTION",
        (ANTLR_UINT8*) "T_LESS_THAN",
        (ANTLR_UINT8*) "T_LESS_THAN_OR_EQ",
        (ANTLR_UINT8*) "T_LOAD",
        (ANTLR_UINT8*) "T_LPAREN",
        (ANTLR_UINT8*) "T_MAPPING",
        (ANTLR_UINT8*) "T_MASK",
        (ANTLR_UINT8*) "T_MORE_THAN",
        (ANTLR_UINT8*) "T_MORE_THAN_OR_EQ",
        (ANTLR_UINT8*) "T_MORPHOLOGICAL",
        (ANTLR_UINT8*) "T_MSLS",
        (ANTLR_UINT8*) "T_MULTIPLY",
        (ANTLR_UINT8*) "T_NEGATE",
        (ANTLR_UINT8*) "T_NORMALIZE",
        (ANTLR_UINT8*) "T_NOT_EQUAL",
        (ANTLR_UINT8*) "T_OKROGLOST",
        (ANTLR_UINT8*) "T_OPEN",
        (ANTLR_UINT8*) "T_RECONSTRUCTION",
        (ANTLR_UINT8*) "T_RESPONSE",
        (ANTLR_UINT8*) "T_RPAREN",
        (ANTLR_UINT8*) "T_SEGMENTATION",
        (ANTLR_UINT8*) "T_SELECT",
        (ANTLR_UINT8*) "T_SET",
        (ANTLR_UINT8*) "T_STAR",
        (ANTLR_UINT8*) "T_SUBTRACT",
        (ANTLR_UINT8*) "T_TRESHOLD",
        (ANTLR_UINT8*) "T_UNION",
        (ANTLR_UINT8*) "T_VOLUMENT",
        (ANTLR_UINT8*) "T_WATHERSHADE",
        (ANTLR_UINT8*) "T_WHERE",
        (ANTLR_UINT8*) "T_WITHOUT",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'.'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Grammar/MorphDSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSLParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MorphDSLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSLParser::MorphDSLParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MorphDSLParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MorphDSLParserTokenNames );


}

void
MorphDSLParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MorphDSLParser::~MorphDSLParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MorphDSLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_load_in_program588_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000110) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_load_in_program588( FOLLOW_load_in_program588_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_program591_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000112) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_assignment_in_program591( FOLLOW_assignment_in_program591_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_COMMENT_in_program595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000112) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_COMMENT_in_program595( FOLLOW_COMMENT_in_program595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load610_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_load610( FOLLOW_ID_in_load610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_load612_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_load612( FOLLOW_T_EQUALS_in_load612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LOAD_in_load614_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LOAD_in_load614( FOLLOW_T_LOAD_in_load614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_load616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_load616( FOLLOW_T_LPAREN_in_load616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_load620_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_STRING_in_load620( FOLLOW_STRING_in_load620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_load622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_load622( FOLLOW_T_RPAREN_in_load622_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_figurevector_in_assignment638_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_figurevector_in_assignment638( FOLLOW_figurevector_in_assignment638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_assignment640_bits[]	= { ANTLR_UINT64_LIT(0x989C10988ED40020), ANTLR_UINT64_LIT(0x0000000000000023) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_assignment640( FOLLOW_T_EQUALS_in_assignment640_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBB_in_assignment646_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBB_in_assignment646( FOLLOW_operatorsBB_in_assignment646_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGG_in_assignment652_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGG_in_assignment652( FOLLOW_operatorsGG_in_assignment652_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBBGG_in_assignment657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBBGG_in_assignment657( FOLLOW_operatorsBBGG_in_assignment657_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBG_in_assignment662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBG_in_assignment662( FOLLOW_operatorsBG_in_assignment662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsGB_in_assignment667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsGB_in_assignment667( FOLLOW_operatorsGB_in_assignment667_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_vector_in_assignment672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_vector_in_assignment672( FOLLOW_vector_in_assignment672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_assignment677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_assignment677( FOLLOW_sql_in_assignment677_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_figurevector691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_figurevector691( FOLLOW_ID_in_figurevector691_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_var716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_var716( FOLLOW_ID_in_var716_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_72_in_var723_bits[]	= { ANTLR_UINT64_LIT(0x2040200000020000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_72_in_var723( FOLLOW_72_in_var723_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_subId_in_var725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_subId_in_var725( FOLLOW_subId_in_var725_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MASK_in_subId749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MASK_in_subId749( FOLLOW_T_MASK_in_subId749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SET_in_subId756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SET_in_subId756( FOLLOW_T_SET_in_subId756_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_SQL_in_subId763_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_SQL_in_subId763( FOLLOW_T_ATTRIBUTE_SQL_in_subId763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OKROGLOST_in_subId770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OKROGLOST_in_subId770( FOLLOW_T_OKROGLOST_in_subId770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_VOLUMENT_in_subId777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_VOLUMENT_in_subId777( FOLLOW_T_VOLUMENT_in_subId777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SELECT_in_sql812_bits[]	= { ANTLR_UINT64_LIT(0x6050204200020000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SELECT_in_sql812( FOLLOW_T_SELECT_in_sql812_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorSql_in_sql814_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorSql_in_sql814( FOLLOW_operatorSql_in_sql814_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_FROM_in_sql816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_FROM_in_sql816( FOLLOW_T_FROM_in_sql816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_sql818_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_sql818( FOLLOW_ID_in_sql818_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WHERE_in_sql820_bits[]	= { ANTLR_UINT64_LIT(0x024000420000C120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WHERE_in_sql820( FOLLOW_T_WHERE_in_sql820_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql824( FOLLOW_sqlWhere_in_sql824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AND_in_sql831_bits[]	= { ANTLR_UINT64_LIT(0x024000420000C120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AND_in_sql831( FOLLOW_T_AND_in_sql831_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhere_in_sql835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhere_in_sql835( FOLLOW_sqlWhere_in_sql835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorName_in_operatorSql863_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorName_in_operatorSql863( FOLLOW_operatorName_in_operatorSql863_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorSql865_bits[]	= { ANTLR_UINT64_LIT(0x2040204200020000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorSql865( FOLLOW_T_LPAREN_in_operatorSql865_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_selectKeyword_in_operatorSql869_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_selectKeyword_in_operatorSql869( FOLLOW_selectKeyword_in_operatorSql869_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorSql873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorSql873( FOLLOW_T_RPAREN_in_operatorSql873_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_selectKeyword_in_operatorSql880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_selectKeyword_in_operatorSql880( FOLLOW_selectKeyword_in_operatorSql880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_STAR_in_operatorSql887_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_STAR_in_operatorSql887( FOLLOW_T_STAR_in_operatorSql887_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MASK_in_selectKeyword910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MASK_in_selectKeyword910( FOLLOW_T_MASK_in_selectKeyword910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SET_in_selectKeyword917_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SET_in_selectKeyword917( FOLLOW_T_SET_in_selectKeyword917_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword925( FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword925_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OKROGLOST_in_selectKeyword932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OKROGLOST_in_selectKeyword932( FOLLOW_T_OKROGLOST_in_selectKeyword932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_VOLUMENT_in_selectKeyword939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_VOLUMENT_in_selectKeyword939( FOLLOW_T_VOLUMENT_in_selectKeyword939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword947( FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword947_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword955( FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorName966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorName966( FOLLOW_T_NORMALIZE_in_operatorName966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere987_bits[]	= { ANTLR_UINT64_LIT(0x0020C30040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere987( FOLLOW_DOUBLENUMBER_in_sqlWhere987_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere991_bits[]	= { ANTLR_UINT64_LIT(0x024000420000C100), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere991( FOLLOW_relOp_in_sqlWhere991_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere1000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere1000( FOLLOW_sqlWhereKeyword_in_sqlWhere1000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_sqlWhere1006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_sqlWhere1006( FOLLOW_var_in_sqlWhere1006_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere1025_bits[]	= { ANTLR_UINT64_LIT(0x0020C30040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere1025( FOLLOW_sqlWhereKeyword_in_sqlWhere1025_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_sqlWhere1031_bits[]	= { ANTLR_UINT64_LIT(0x0020C30040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_sqlWhere1031( FOLLOW_var_in_sqlWhere1031_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_relOp_in_sqlWhere1038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_relOp_in_sqlWhere1038( FOLLOW_relOp_in_sqlWhere1038_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_sqlWhere1042_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_sqlWhere1042( FOLLOW_DOUBLENUMBER_in_sqlWhere1042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sqlWhereKeyword_in_sqlWhere1054_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sqlWhereKeyword_in_sqlWhere1054( FOLLOW_sqlWhereKeyword_in_sqlWhere1054_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_sqlWhere1056_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_sqlWhere1056( FOLLOW_T_EQUALS_in_sqlWhere1056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_sqlWhere1058_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_sqlWhere1058( FOLLOW_T_LPAREN_in_sqlWhere1058_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_sql_in_sqlWhere1060_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_sql_in_sqlWhere1060( FOLLOW_sql_in_sqlWhere1060_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_sqlWhere1063_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_sqlWhere1063( FOLLOW_T_RPAREN_in_sqlWhere1063_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORE_THAN_in_relOp1136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORE_THAN_in_relOp1136( FOLLOW_T_MORE_THAN_in_relOp1136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LESS_THAN_in_relOp1144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LESS_THAN_in_relOp1144( FOLLOW_T_LESS_THAN_in_relOp1144_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EQUALS_in_relOp1152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EQUALS_in_relOp1152( FOLLOW_T_EQUALS_in_relOp1152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NOT_EQUAL_in_relOp1160_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NOT_EQUAL_in_relOp1160( FOLLOW_T_NOT_EQUAL_in_relOp1160_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1167( FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1167_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1174( FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1174_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMPLEMENT_in_operatorsBB1190_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMPLEMENT_in_operatorsBB1190( FOLLOW_T_COMPLEMENT_in_operatorsBB1190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1192( FOLLOW_T_LPAREN_in_operatorsBB1192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1196_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1196( FOLLOW_var_in_operatorsBB1196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1198( FOLLOW_T_RPAREN_in_operatorsBB1198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_UNION_in_operatorsBB1205_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_UNION_in_operatorsBB1205( FOLLOW_T_UNION_in_operatorsBB1205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1207( FOLLOW_T_LPAREN_in_operatorsBB1207_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1211( FOLLOW_var_in_operatorsBB1211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1213( FOLLOW_T_COMMA_in_operatorsBB1213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1217_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1217( FOLLOW_var_in_operatorsBB1217_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1219( FOLLOW_T_RPAREN_in_operatorsBB1219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERSECTION_in_operatorsBB1226_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERSECTION_in_operatorsBB1226( FOLLOW_T_INTERSECTION_in_operatorsBB1226_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1228( FOLLOW_T_LPAREN_in_operatorsBB1228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1232( FOLLOW_var_in_operatorsBB1232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1234( FOLLOW_T_COMMA_in_operatorsBB1234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1238_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1238( FOLLOW_var_in_operatorsBB1238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1240( FOLLOW_T_RPAREN_in_operatorsBB1240_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WITHOUT_in_operatorsBB1247_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WITHOUT_in_operatorsBB1247( FOLLOW_T_WITHOUT_in_operatorsBB1247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1249( FOLLOW_T_LPAREN_in_operatorsBB1249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1253( FOLLOW_var_in_operatorsBB1253_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1255( FOLLOW_T_COMMA_in_operatorsBB1255_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1259_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1259( FOLLOW_var_in_operatorsBB1259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1261( FOLLOW_T_RPAREN_in_operatorsBB1261_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_HITMISS_in_operatorsBB1268_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_HITMISS_in_operatorsBB1268( FOLLOW_T_HITMISS_in_operatorsBB1268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1270( FOLLOW_T_LPAREN_in_operatorsBB1270_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1274_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1274( FOLLOW_var_in_operatorsBB1274_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBB1276_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBB1276( FOLLOW_T_COMMA_in_operatorsBB1276_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1280_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1280( FOLLOW_var_in_operatorsBB1280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1282( FOLLOW_T_RPAREN_in_operatorsBB1282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOUNDARY_in_operatorsBB1289_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOUNDARY_in_operatorsBB1289( FOLLOW_T_BOUNDARY_in_operatorsBB1289_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBB1291_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBB1291( FOLLOW_T_LPAREN_in_operatorsBB1291_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBB1295_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBB1295( FOLLOW_var_in_operatorsBB1295_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBB1297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBB1297( FOLLOW_T_RPAREN_in_operatorsBB1297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NEGATE_in_operatorsGG1315_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NEGATE_in_operatorsGG1315( FOLLOW_T_NEGATE_in_operatorsGG1315_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1317( FOLLOW_T_LPAREN_in_operatorsGG1317_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1321_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1321( FOLLOW_var_in_operatorsGG1321_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1323( FOLLOW_T_RPAREN_in_operatorsGG1323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_NORMALIZE_in_operatorsGG1330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_NORMALIZE_in_operatorsGG1330( FOLLOW_T_NORMALIZE_in_operatorsGG1330_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1337_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1337( FOLLOW_T_MULTIPLY_in_operatorsGG1337_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1339_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1339( FOLLOW_T_LPAREN_in_operatorsGG1339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1343( FOLLOW_var_in_operatorsGG1343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1345( FOLLOW_T_COMMA_in_operatorsGG1345_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG1349_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG1349( FOLLOW_DOUBLENUMBER_in_operatorsGG1349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1351( FOLLOW_T_RPAREN_in_operatorsGG1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1358_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1358( FOLLOW_T_MULTIPLY_in_operatorsGG1358_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1360( FOLLOW_T_LPAREN_in_operatorsGG1360_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG1364_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG1364( FOLLOW_DOUBLENUMBER_in_operatorsGG1364_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1366( FOLLOW_T_COMMA_in_operatorsGG1366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1370_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1370( FOLLOW_var_in_operatorsGG1370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1372( FOLLOW_T_RPAREN_in_operatorsGG1372_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MULTIPLY_in_operatorsGG1378_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MULTIPLY_in_operatorsGG1378( FOLLOW_T_MULTIPLY_in_operatorsGG1378_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1380_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1380( FOLLOW_T_LPAREN_in_operatorsGG1380_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1384_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1384( FOLLOW_var_in_operatorsGG1384_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1386( FOLLOW_T_COMMA_in_operatorsGG1386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1390_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1390( FOLLOW_var_in_operatorsGG1390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1392( FOLLOW_T_RPAREN_in_operatorsGG1392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CROP_in_operatorsGG1399_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CROP_in_operatorsGG1399( FOLLOW_T_CROP_in_operatorsGG1399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1401_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1401( FOLLOW_T_LPAREN_in_operatorsGG1401_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1405( FOLLOW_var_in_operatorsGG1405_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1407( FOLLOW_T_COMMA_in_operatorsGG1407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_interval_in_operatorsGG1409_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_interval_in_operatorsGG1409( FOLLOW_interval_in_operatorsGG1409_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1411( FOLLOW_T_RPAREN_in_operatorsGG1411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SUBTRACT_in_operatorsGG1418_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SUBTRACT_in_operatorsGG1418( FOLLOW_T_SUBTRACT_in_operatorsGG1418_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1420( FOLLOW_T_LPAREN_in_operatorsGG1420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1424( FOLLOW_var_in_operatorsGG1424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1426( FOLLOW_T_COMMA_in_operatorsGG1426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1430_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1430( FOLLOW_var_in_operatorsGG1430_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1432( FOLLOW_T_RPAREN_in_operatorsGG1432_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG1439_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG1439( FOLLOW_T_GRADIENT_in_operatorsGG1439_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1441_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1441( FOLLOW_T_LPAREN_in_operatorsGG1441_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_INTERNAL_in_operatorsGG1443_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_INTERNAL_in_operatorsGG1443( FOLLOW_T_INTERNAL_in_operatorsGG1443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1445( FOLLOW_T_COMMA_in_operatorsGG1445_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1449_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1449( FOLLOW_var_in_operatorsGG1449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1451_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1451( FOLLOW_T_RPAREN_in_operatorsGG1451_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_GRADIENT_in_operatorsGG1458_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_GRADIENT_in_operatorsGG1458( FOLLOW_T_GRADIENT_in_operatorsGG1458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1460_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1460( FOLLOW_T_LPAREN_in_operatorsGG1460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_EXTERNAL_in_operatorsGG1462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_EXTERNAL_in_operatorsGG1462( FOLLOW_T_EXTERNAL_in_operatorsGG1462_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1464( FOLLOW_T_COMMA_in_operatorsGG1464_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1468_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1468( FOLLOW_var_in_operatorsGG1468_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1470_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1470( FOLLOW_T_RPAREN_in_operatorsGG1470_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1477_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1477( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1477_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1479_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1479( FOLLOW_T_LPAREN_in_operatorsGG1479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1481( FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1483( FOLLOW_T_COMMA_in_operatorsGG1483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1487( FOLLOW_var_in_operatorsGG1487_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1489( FOLLOW_T_COMMA_in_operatorsGG1489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1493_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1493( FOLLOW_var_in_operatorsGG1493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1495( FOLLOW_T_RPAREN_in_operatorsGG1495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1502_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1502( FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1502_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1504( FOLLOW_T_LPAREN_in_operatorsGG1504_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ATTRIBUTE_in_operatorsGG1506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ATTRIBUTE_in_operatorsGG1506( FOLLOW_T_ATTRIBUTE_in_operatorsGG1506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1508( FOLLOW_T_COMMA_in_operatorsGG1508_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1512_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1512( FOLLOW_var_in_operatorsGG1512_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1514_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1514( FOLLOW_T_COMMA_in_operatorsGG1514_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1518_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1518( FOLLOW_var_in_operatorsGG1518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1520( FOLLOW_T_RPAREN_in_operatorsGG1520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1527_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1527( FOLLOW_T_MAPPING_in_operatorsGG1527_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1529_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1529( FOLLOW_T_LPAREN_in_operatorsGG1529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DMP_in_operatorsGG1531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DMP_in_operatorsGG1531( FOLLOW_T_DMP_in_operatorsGG1531_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1533( FOLLOW_T_COMMA_in_operatorsGG1533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1537( FOLLOW_var_in_operatorsGG1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1539( FOLLOW_T_COMMA_in_operatorsGG1539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1543_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1543( FOLLOW_var_in_operatorsGG1543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1547( FOLLOW_T_RPAREN_in_operatorsGG1547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MAPPING_in_operatorsGG1555_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MAPPING_in_operatorsGG1555( FOLLOW_T_MAPPING_in_operatorsGG1555_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1557_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1557( FOLLOW_T_LPAREN_in_operatorsGG1557_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DAP_in_operatorsGG1559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DAP_in_operatorsGG1559( FOLLOW_T_DAP_in_operatorsGG1559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1561( FOLLOW_T_COMMA_in_operatorsGG1561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1565( FOLLOW_var_in_operatorsGG1565_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1567( FOLLOW_T_COMMA_in_operatorsGG1567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1571_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1571( FOLLOW_var_in_operatorsGG1571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1575( FOLLOW_T_RPAREN_in_operatorsGG1575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1583_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1583( FOLLOW_T_SEGMENTATION_in_operatorsGG1583_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1585_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1585( FOLLOW_T_LPAREN_in_operatorsGG1585_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1587( FOLLOW_T_MSLS_in_operatorsGG1587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1589( FOLLOW_T_COMMA_in_operatorsGG1589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1593( FOLLOW_var_in_operatorsGG1593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1595( FOLLOW_T_COMMA_in_operatorsGG1595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1599_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1599( FOLLOW_var_in_operatorsGG1599_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1601( FOLLOW_T_RPAREN_in_operatorsGG1601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1608_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1608( FOLLOW_T_SEGMENTATION_in_operatorsGG1608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1610_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1610( FOLLOW_T_LPAREN_in_operatorsGG1610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_operatorsGG1612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_operatorsGG1612( FOLLOW_T_MSLS_in_operatorsGG1612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1614( FOLLOW_T_COMMA_in_operatorsGG1614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1618( FOLLOW_var_in_operatorsGG1618_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1620( FOLLOW_T_COMMA_in_operatorsGG1620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1624_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1624( FOLLOW_var_in_operatorsGG1624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1626( FOLLOW_T_RPAREN_in_operatorsGG1626_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1633_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1633( FOLLOW_T_SEGMENTATION_in_operatorsGG1633_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1635( FOLLOW_T_LPAREN_in_operatorsGG1635_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1637_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1637( FOLLOW_T_WATHERSHADE_in_operatorsGG1637_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1639( FOLLOW_T_COMMA_in_operatorsGG1639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1643_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1643( FOLLOW_var_in_operatorsGG1643_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1645( FOLLOW_T_RPAREN_in_operatorsGG1645_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_operatorsGG1656_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_operatorsGG1656( FOLLOW_T_SEGMENTATION_in_operatorsGG1656_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGG1658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGG1658( FOLLOW_T_LPAREN_in_operatorsGG1658_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_WATHERSHADE_in_operatorsGG1660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_WATHERSHADE_in_operatorsGG1660( FOLLOW_T_WATHERSHADE_in_operatorsGG1660_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1662( FOLLOW_T_COMMA_in_operatorsGG1662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1666( FOLLOW_var_in_operatorsGG1666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGG1668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGG1668( FOLLOW_T_COMMA_in_operatorsGG1668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGG1672_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGG1672( FOLLOW_var_in_operatorsGG1672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGG1674_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGG1674( FOLLOW_T_RPAREN_in_operatorsGG1674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1699_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1699( FOLLOW_DOUBLENUMBER_in_interval1699_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_interval1701_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_interval1701( FOLLOW_T_COMMA_in_interval1701_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval1705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval1705( FOLLOW_DOUBLENUMBER_in_interval1705_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsBOX_in_operatorsBBGG1722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsBOX_in_operatorsBBGG1722( FOLLOW_operatorsBOX_in_operatorsBBGG1722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1728( FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1728_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_operatorsBBGG1734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_operatorsBBGG1734( FOLLOW_operatorsAREA_in_operatorsBBGG1734_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1740( FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1740_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsBOX1759_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsBOX1759( FOLLOW_T_ERODE_in_operatorsBOX1759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1761_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1761( FOLLOW_T_LPAREN_in_operatorsBOX1761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1763_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1763( FOLLOW_T_BOX_in_operatorsBOX1763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1765_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1765( FOLLOW_T_LPAREN_in_operatorsBOX1765_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1769_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1769( FOLLOW_DOUBLENUMBER_in_operatorsBOX1769_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1771( FOLLOW_T_RPAREN_in_operatorsBOX1771_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1773( FOLLOW_T_COMMA_in_operatorsBOX1773_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBOX1777_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBOX1777( FOLLOW_var_in_operatorsBOX1777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1779( FOLLOW_T_RPAREN_in_operatorsBOX1779_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsBOX1787_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsBOX1787( FOLLOW_T_DILATE_in_operatorsBOX1787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1789( FOLLOW_T_LPAREN_in_operatorsBOX1789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1791_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1791( FOLLOW_T_BOX_in_operatorsBOX1791_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1793( FOLLOW_T_LPAREN_in_operatorsBOX1793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1797_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1797( FOLLOW_DOUBLENUMBER_in_operatorsBOX1797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1799( FOLLOW_T_RPAREN_in_operatorsBOX1799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1801( FOLLOW_T_COMMA_in_operatorsBOX1801_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBOX1805_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBOX1805( FOLLOW_var_in_operatorsBOX1805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1807_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1807( FOLLOW_T_RPAREN_in_operatorsBOX1807_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsBOX1814_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsBOX1814( FOLLOW_T_OPEN_in_operatorsBOX1814_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1816( FOLLOW_T_LPAREN_in_operatorsBOX1816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1818_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1818( FOLLOW_T_BOX_in_operatorsBOX1818_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1820( FOLLOW_T_LPAREN_in_operatorsBOX1820_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1824_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1824( FOLLOW_DOUBLENUMBER_in_operatorsBOX1824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1826( FOLLOW_T_RPAREN_in_operatorsBOX1826_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1828( FOLLOW_T_COMMA_in_operatorsBOX1828_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBOX1832_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBOX1832( FOLLOW_var_in_operatorsBOX1832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1834( FOLLOW_T_RPAREN_in_operatorsBOX1834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsBOX1843_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsBOX1843( FOLLOW_T_CLOSE_in_operatorsBOX1843_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1845( FOLLOW_T_LPAREN_in_operatorsBOX1845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsBOX1847_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsBOX1847( FOLLOW_T_BOX_in_operatorsBOX1847_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBOX1849_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBOX1849( FOLLOW_T_LPAREN_in_operatorsBOX1849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX1853_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX1853( FOLLOW_DOUBLENUMBER_in_operatorsBOX1853_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1855( FOLLOW_T_RPAREN_in_operatorsBOX1855_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsBOX1857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsBOX1857( FOLLOW_T_COMMA_in_operatorsBOX1857_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBOX1861_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBOX1861( FOLLOW_var_in_operatorsBOX1861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBOX1863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBOX1863( FOLLOW_T_RPAREN_in_operatorsBOX1863_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1890_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1890( FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1892_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1892( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1892_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1894_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1894( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1896( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1896_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsRECONSTRUCTION1900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsRECONSTRUCTION1900( FOLLOW_var_in_operatorsRECONSTRUCTION1900_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1902( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsRECONSTRUCTION1906_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsRECONSTRUCTION1906( FOLLOW_var_in_operatorsRECONSTRUCTION1906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1908( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1917_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1917( FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1917_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1919_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1919( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1919_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1921( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1921_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1923( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsRECONSTRUCTION1927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsRECONSTRUCTION1927( FOLLOW_var_in_operatorsRECONSTRUCTION1927_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1929_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1929( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1929_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsRECONSTRUCTION1933_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsRECONSTRUCTION1933( FOLLOW_var_in_operatorsRECONSTRUCTION1933_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1935( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1942_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1942( FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1944_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1944( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1946_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1946( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1946_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1948( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1948_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1950_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1950( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1950_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1952( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1956_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1956( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1956_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1958( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1958_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1960( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1960_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsRECONSTRUCTION1964_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsRECONSTRUCTION1964( FOLLOW_var_in_operatorsRECONSTRUCTION1964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1966( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1974_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1974( FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1976_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1976( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1978( FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1978_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1980( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1982_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1982( FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1984( FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1984_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1988_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1988( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1988_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1990( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1990_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1992( FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsRECONSTRUCTION1996_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsRECONSTRUCTION1996( FOLLOW_var_in_operatorsRECONSTRUCTION1996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1998( FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsAREA2016_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsAREA2016( FOLLOW_T_OPEN_in_operatorsAREA2016_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA2018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA2018( FOLLOW_T_LPAREN_in_operatorsAREA2018_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA2020_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA2020( FOLLOW_T_AREA_in_operatorsAREA2020_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA2022_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA2022( FOLLOW_T_COMMA_in_operatorsAREA2022_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA2026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA2026( FOLLOW_DOUBLENUMBER_in_operatorsAREA2026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA2028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA2028( FOLLOW_T_COMMA_in_operatorsAREA2028_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsAREA2032_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsAREA2032( FOLLOW_var_in_operatorsAREA2032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA2034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA2034( FOLLOW_T_RPAREN_in_operatorsAREA2034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsAREA2042_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsAREA2042( FOLLOW_T_CLOSE_in_operatorsAREA2042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsAREA2044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsAREA2044( FOLLOW_T_LPAREN_in_operatorsAREA2044_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_AREA_in_operatorsAREA2046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_AREA_in_operatorsAREA2046( FOLLOW_T_AREA_in_operatorsAREA2046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA2048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA2048( FOLLOW_T_COMMA_in_operatorsAREA2048_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA2052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA2052( FOLLOW_DOUBLENUMBER_in_operatorsAREA2052_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsAREA2054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsAREA2054( FOLLOW_T_COMMA_in_operatorsAREA2054_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsAREA2058_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsAREA2058( FOLLOW_var_in_operatorsAREA2058_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsAREA2060_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsAREA2060( FOLLOW_T_RPAREN_in_operatorsAREA2060_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_OPEN_in_operatorsATTRIBUTE2079_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_OPEN_in_operatorsATTRIBUTE2079( FOLLOW_T_OPEN_in_operatorsATTRIBUTE2079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2081( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2081_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE2085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE2085( FOLLOW_ID_in_operatorsATTRIBUTE2085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE2087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE2087( FOLLOW_T_COMMA_in_operatorsATTRIBUTE2087_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2091_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2091( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2091_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE2093_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE2093( FOLLOW_T_COMMA_in_operatorsATTRIBUTE2093_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsATTRIBUTE2097_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsATTRIBUTE2097( FOLLOW_var_in_operatorsATTRIBUTE2097_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2099( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2099_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_CLOSE_in_operatorsATTRIBUTE2107_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_CLOSE_in_operatorsATTRIBUTE2107( FOLLOW_T_CLOSE_in_operatorsATTRIBUTE2107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2109( FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE2113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE2113( FOLLOW_ID_in_operatorsATTRIBUTE2113_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE2115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE2115( FOLLOW_T_COMMA_in_operatorsATTRIBUTE2115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2119( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsATTRIBUTE2121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsATTRIBUTE2121( FOLLOW_T_COMMA_in_operatorsATTRIBUTE2121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsATTRIBUTE2125_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsATTRIBUTE2125( FOLLOW_var_in_operatorsATTRIBUTE2125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2127( FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2143_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2143( FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2143_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsBG2145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsBG2145( FOLLOW_T_LPAREN_in_operatorsBG2145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsBG2147_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsBG2147( FOLLOW_var_in_operatorsBG2147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsBG2149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsBG2149( FOLLOW_T_RPAREN_in_operatorsBG2149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_TRESHOLD_in_operatorsGB2159_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_TRESHOLD_in_operatorsGB2159( FOLLOW_T_TRESHOLD_in_operatorsGB2159_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_operatorsGB2161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_operatorsGB2161( FOLLOW_T_LPAREN_in_operatorsGB2161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGB2163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGB2163( FOLLOW_DOUBLENUMBER_in_operatorsGB2163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_operatorsGB2165_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_operatorsGB2165( FOLLOW_T_COMMA_in_operatorsGB2165_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_operatorsGB2167_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_operatorsGB2167( FOLLOW_var_in_operatorsGB2167_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_operatorsGB2169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_operatorsGB2169( FOLLOW_T_RPAREN_in_operatorsGB2169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector2221_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector2221( FOLLOW_DOUBLENUMBER_in_vector2221_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_vector2225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_vector2225( FOLLOW_T_COMMA_in_vector2225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector2237_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector2237( FOLLOW_DOUBLENUMBER_in_vector2237_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred56_MorphDSL1583_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred56_MorphDSL1583( FOLLOW_T_SEGMENTATION_in_synpred56_MorphDSL1583_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred56_MorphDSL1585_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred56_MorphDSL1585( FOLLOW_T_LPAREN_in_synpred56_MorphDSL1585_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred56_MorphDSL1587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred56_MorphDSL1587( FOLLOW_T_MSLS_in_synpred56_MorphDSL1587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred56_MorphDSL1589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred56_MorphDSL1589( FOLLOW_T_COMMA_in_synpred56_MorphDSL1589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_synpred56_MorphDSL1593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_synpred56_MorphDSL1593( FOLLOW_var_in_synpred56_MorphDSL1593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred56_MorphDSL1595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred56_MorphDSL1595( FOLLOW_T_COMMA_in_synpred56_MorphDSL1595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_synpred56_MorphDSL1599_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_synpred56_MorphDSL1599( FOLLOW_var_in_synpred56_MorphDSL1599_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred56_MorphDSL1601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred56_MorphDSL1601( FOLLOW_T_RPAREN_in_synpred56_MorphDSL1601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_SEGMENTATION_in_synpred57_MorphDSL1608_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_SEGMENTATION_in_synpred57_MorphDSL1608( FOLLOW_T_SEGMENTATION_in_synpred57_MorphDSL1608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_LPAREN_in_synpred57_MorphDSL1610_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_LPAREN_in_synpred57_MorphDSL1610( FOLLOW_T_LPAREN_in_synpred57_MorphDSL1610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_MSLS_in_synpred57_MorphDSL1612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_MSLS_in_synpred57_MorphDSL1612( FOLLOW_T_MSLS_in_synpred57_MorphDSL1612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred57_MorphDSL1614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred57_MorphDSL1614( FOLLOW_T_COMMA_in_synpred57_MorphDSL1614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_synpred57_MorphDSL1618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_synpred57_MorphDSL1618( FOLLOW_var_in_synpred57_MorphDSL1618_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_COMMA_in_synpred57_MorphDSL1620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_COMMA_in_synpred57_MorphDSL1620( FOLLOW_T_COMMA_in_synpred57_MorphDSL1620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_var_in_synpred57_MorphDSL1624_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_var_in_synpred57_MorphDSL1624( FOLLOW_var_in_synpred57_MorphDSL1624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSLParser  */
static	ANTLR_BITWORD FOLLOW_T_RPAREN_in_synpred57_MorphDSL1626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSLParserImplTraits::BitsetListType FOLLOW_T_RPAREN_in_synpred57_MorphDSL1626( FOLLOW_T_RPAREN_in_synpred57_MorphDSL1626_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * Grammar/MorphDSL.g:152:1: program : load ( assignment | COMMENT )+ ;
 */
void
MorphDSLParser::program()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */

     s = new MorphDSLSemantics(this); 

 
    {
        // Grammar/MorphDSL.g:154:2: ( load ( assignment | COMMENT )+ )
        // Grammar/MorphDSL.g:154:4: load ( assignment | COMMENT )+
        {
            this->followPush(FOLLOW_load_in_program588);
            load();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:154:9: ( assignment | COMMENT )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=3;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			alt1=1;
            		}
            	    break;
            	case COMMENT:
            		{
            			alt1=2;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // Grammar/MorphDSL.g:154:10: assignment
            	        {
            	            this->followPush(FOLLOW_assignment_in_program591);
            	            assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 2:
            	        // Grammar/MorphDSL.g:154:23: COMMENT
            	        {
            	             this->matchToken(COMMENT, &FOLLOW_COMMENT_in_program595);
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MorphDSLParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start load
 * Grammar/MorphDSL.g:157:1: load : imeSpremenljivke= ID '=' 'load' '(' imeSlike= STRING ')' ;
 */
void
MorphDSLParser::load()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    imeSpremenljivke;
    const CommonTokenType*    imeSlike;

    /* Initialize rule variables
     */

    imeSpremenljivke       = NULL;
    imeSlike       = NULL;


 
    {
        // Grammar/MorphDSL.g:158:2: (imeSpremenljivke= ID '=' 'load' '(' imeSlike= STRING ')' )
        // Grammar/MorphDSL.g:158:4: imeSpremenljivke= ID '=' 'load' '(' imeSlike= STRING ')'
        {
            imeSpremenljivke =  this->matchToken(ID, &FOLLOW_ID_in_load610);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_load612);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LOAD, &FOLLOW_T_LOAD_in_load614);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_load616);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            imeSlike =  this->matchToken(STRING, &FOLLOW_STRING_in_load620);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_load622);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                		s->setZadnjaSpremenljivka((imeSpremenljivke->getText()));
                		s->loadImpl((imeSlike->getText()), (imeSpremenljivke->getText()));
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloadEx; /* Prevent compiler warnings */
    ruleloadEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end load */

/**
 * $ANTLR start assignment
 * Grammar/MorphDSL.g:165:1: assignment : figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] ) ;
 */
void
MorphDSLParser::assignment()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    MorphDSLParser_figurevector_return figurevector1;
    typedef	MorphDSLParser_figurevector_return RETURN_TYPE_figurevector1;

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:165:12: ( figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] ) )
        // Grammar/MorphDSL.g:166:2: figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] )
        {
            this->followPush(FOLLOW_figurevector_in_assignment638);
            figurevector1=figurevector();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_assignment640);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // Grammar/MorphDSL.g:167:2: ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector | sql[$figurevector.text] )
            {
                int alt2=7;
                switch ( this->LA(1) )
                {
                case T_BOUNDARY:
                case T_COMPLEMENT:
                case T_HITMISS:
                case T_INTERSECTION:
                case T_UNION:
                case T_WITHOUT:
                	{
                		alt2=1;
                	}
                    break;
                case T_CROP:
                case T_DIFERENTIALPROFILES:
                case T_GRADIENT:
                case T_MAPPING:
                case T_MULTIPLY:
                case T_NEGATE:
                case T_NORMALIZE:
                case T_SEGMENTATION:
                case T_SUBTRACT:
                	{
                		alt2=2;
                	}
                    break;
                case T_CLOSE:
                case T_DILATE:
                case T_ERODE:
                case T_OPEN:
                	{
                		alt2=3;
                	}
                    break;
                case T_DISTANCETRANSFORM:
                	{
                		alt2=4;
                	}
                    break;
                case T_TRESHOLD:
                	{
                		alt2=5;
                	}
                    break;
                case DOUBLENUMBER:
                	{
                		alt2=6;
                	}
                    break;
                case T_SELECT:
                	{
                		alt2=7;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleassignmentEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:167:4: operatorsBB
            	    {
            	        this->followPush(FOLLOW_operatorsBB_in_assignment646);
            	        operatorsBB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:168:4: operatorsGG
            	    {
            	        this->followPush(FOLLOW_operatorsGG_in_assignment652);
            	        operatorsGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:169:4: operatorsBBGG
            	    {
            	        this->followPush(FOLLOW_operatorsBBGG_in_assignment657);
            	        operatorsBBGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:170:4: operatorsBG
            	    {
            	        this->followPush(FOLLOW_operatorsBG_in_assignment662);
            	        operatorsBG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:171:4: operatorsGB
            	    {
            	        this->followPush(FOLLOW_operatorsGB_in_assignment667);
            	        operatorsGB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:172:4: vector
            	    {
            	        this->followPush(FOLLOW_vector_in_assignment672);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:173:4: sql[$figurevector.text]
            	    {
            	        this->followPush(FOLLOW_sql_in_assignment677);
            	        sql(
            	        (this->get_strstream()->toStringTT(figurevector1.start, figurevector1.stop))
            	        );

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start figurevector
 * Grammar/MorphDSL.g:176:1: figurevector : ID ;
 */
MorphDSLParser_figurevector_return
MorphDSLParser::figurevector()
{
    MorphDSLParser_figurevector_return retval(this);


    const CommonTokenType*    ID2;

    /* Initialize rule variables
     */

    ID2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:177:2: ( ID )
        // Grammar/MorphDSL.g:177:4: ID
        {
            ID2 =  this->matchToken(ID, &FOLLOW_ID_in_figurevector691);
            if  (this->hasException())
            {
                goto rulefigurevectorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                 
                		s->setZadnjaSpremenljivka((ID2->getText())); 
                		s->initNovaSpremenljivka(s->getZadnjaSpremenljivka());
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefigurevectorEx; /* Prevent compiler warnings */
    rulefigurevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end figurevector */

/**
 * $ANTLR start var
 * Grammar/MorphDSL.g:184:1: var returns [Identifier* id] : ID ( '.' subId )? ;
 */
Identifier*
MorphDSLParser::var()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Identifier* id;


    const CommonTokenType*    ID3;
    SubId::SubIdentifier subId4;
    typedef	SubId::SubIdentifier RETURN_TYPE_subId4;

    /* Initialize rule variables
     */

     id = NULL; 
    ID3       = NULL;


 
    {
        // Grammar/MorphDSL.g:186:2: ( ID ( '.' subId )? )
        // Grammar/MorphDSL.g:186:4: ID ( '.' subId )?
        {
            ID3 =  this->matchToken(ID, &FOLLOW_ID_in_var716);
            if  (this->hasException())
            {
                goto rulevarEx;
            }
            if (this->hasFailed())
            {
                return id;
            }


            if ( this->get_backtracking()==0 )
            {
                 id= new Identifier(ID3);
                 
            }


            // Grammar/MorphDSL.g:187:2: ( '.' subId )?
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                    case 72:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:187:3: '.' subId
            	    {
            	         this->matchToken(72, &FOLLOW_72_in_var723);
            	        if  (this->hasException())
            	        {
            	            goto rulevarEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return id;
            	        }


            	        this->followPush(FOLLOW_subId_in_var725);
            	        subId4=subId();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevarEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return id;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             id
            	            ->setSubId(subId4
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulevarEx; /* Prevent compiler warnings */
    rulevarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return id;
}
/* $ANTLR end var */

/**
 * $ANTLR start subId
 * Grammar/MorphDSL.g:190:1: subId returns [SubId::SubIdentifier id] : ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' );
 */
SubId::SubIdentifier
MorphDSLParser::subId()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    SubId::SubIdentifier id;


    /* Initialize rule variables
     */

     id = SubId::NONE; 

 
    {
        {
            //  Grammar/MorphDSL.g:192:2: ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' )

            ANTLR_UINT32 alt4;

            alt4=5;

            switch ( this->LA(1) )
            {
            case T_MASK:
            	{
            		alt4=1;
            	}
                break;
            case T_SET:
            	{
            		alt4=2;
            	}
                break;
            case T_ATTRIBUTE_SQL:
            	{
            		alt4=3;
            	}
                break;
            case T_OKROGLOST:
            	{
            		alt4=4;
            	}
                break;
            case T_VOLUMENT:
            	{
            		alt4=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return id;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto rulesubIdEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:192:4: 'mask'
        	    {
        	         this->matchToken(T_MASK, &FOLLOW_T_MASK_in_subId749);
        	        if  (this->hasException())
        	        {
        	            goto rulesubIdEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return id;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             id= SubId::MASK;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:193:4: 'set'
        	    {
        	         this->matchToken(T_SET, &FOLLOW_T_SET_in_subId756);
        	        if  (this->hasException())
        	        {
        	            goto rulesubIdEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return id;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             id= SubId::SET;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:194:4: 'attribute'
        	    {
        	         this->matchToken(T_ATTRIBUTE_SQL, &FOLLOW_T_ATTRIBUTE_SQL_in_subId763);
        	        if  (this->hasException())
        	        {
        	            goto rulesubIdEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return id;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             id= SubId::ATTRIBUTE;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:195:4: 'okroglost'
        	    {
        	         this->matchToken(T_OKROGLOST, &FOLLOW_T_OKROGLOST_in_subId770);
        	        if  (this->hasException())
        	        {
        	            goto rulesubIdEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return id;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             id= SubId::OKROGLOST;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // Grammar/MorphDSL.g:196:4: 'volument'
        	    {
        	         this->matchToken(T_VOLUMENT, &FOLLOW_T_VOLUMENT_in_subId777);
        	        if  (this->hasException())
        	        {
        	            goto rulesubIdEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return id;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             id= SubId::VOLUMENT;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesubIdEx; /* Prevent compiler warnings */
    rulesubIdEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return id;
}
/* $ANTLR end subId */

/**
 * $ANTLR start sql
 * Grammar/MorphDSL.g:199:1: sql[std::string spremenljivka] returns [Sql* sql] : 'SELECT' operatorSql 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )* ;
 */
Sql*
MorphDSLParser::sql(std::string spremenljivka)
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Sql* sql;


    const CommonTokenType*    ID6;
    MorphDSLParser_sqlWhere_return w1;
    typedef	MorphDSLParser_sqlWhere_return RETURN_TYPE_w1;

    MorphDSLParser_sqlWhere_return w2;
    typedef	MorphDSLParser_sqlWhere_return RETURN_TYPE_w2;

    MorphDSLParser_operatorSql_return operatorSql5;
    typedef	MorphDSLParser_operatorSql_return RETURN_TYPE_operatorSql5;

    /* Initialize rule variables
     */


    		sql= new Sql();
     
    	
    ID6       = NULL;


 
    {
        // Grammar/MorphDSL.g:206:5: ( 'SELECT' operatorSql 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )* )
        // Grammar/MorphDSL.g:206:7: 'SELECT' operatorSql 'FROM' ID 'WHERE' w1= sqlWhere ( 'AND' w2= sqlWhere )*
        {
             this->matchToken(T_SELECT, &FOLLOW_T_SELECT_in_sql812);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            this->followPush(FOLLOW_operatorSql_in_sql814);
            operatorSql5=operatorSql();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


             this->matchToken(T_FROM, &FOLLOW_T_FROM_in_sql816);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            ID6 =  this->matchToken(ID, &FOLLOW_ID_in_sql818);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


             this->matchToken(T_WHERE, &FOLLOW_T_WHERE_in_sql820);
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            this->followPush(FOLLOW_sqlWhere_in_sql824);
            w1=sqlWhere();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesqlEx;
            }
            if (this->hasFailed())
            {
                return sql;
            }


            if ( this->get_backtracking()==0 )
            {

                		 sql->dodajOmejitev(w1.keyword
                , w1.stavek
                ); 
                	
            }


            // Grammar/MorphDSL.g:210:2: ( 'AND' w2= sqlWhere )*

            for (;;)
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case T_AND:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:210:3: 'AND' w2= sqlWhere
            	    {
            	         this->matchToken(T_AND, &FOLLOW_T_AND_in_sql831);
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	        this->followPush(FOLLOW_sqlWhere_in_sql835);
            	        w2=sqlWhere();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesqlEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return sql;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	            			sql->dodajOmejitev(w2.keyword
            	            , w2.stavek
            	            );
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


            if ( this->get_backtracking()==0 )
            {

                	    sql
                ->selectKeyword = operatorSql5.selectKw
                ;
                	    sql
                ->selectFunkcija = operatorSql5.funkcija
                ;
                	    sql
                ->fromId = (ID6->getText());
                	 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlEx; /* Prevent compiler warnings */
    rulesqlEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		s->sqlImpl(sql
                , spremenljivka); delete sql
                ;
                	
            }
        }

    return sql;
}
/* $ANTLR end sql */

/**
 * $ANTLR start operatorSql
 * Grammar/MorphDSL.g:222:1: operatorSql returns [SelectKw::Keyword selectKw, std::string funkcija] : ( operatorName '(' sk1= selectKeyword ')' |sk2= selectKeyword | '*' );
 */
MorphDSLParser_operatorSql_return
MorphDSLParser::operatorSql()
{
    MorphDSLParser_operatorSql_return retval(this);


    SelectKw::Keyword sk1;
    typedef	SelectKw::Keyword RETURN_TYPE_sk1;

    SelectKw::Keyword sk2;
    typedef	SelectKw::Keyword RETURN_TYPE_sk2;

    MorphDSLParser_operatorName_return operatorName7;
    typedef	MorphDSLParser_operatorName_return RETURN_TYPE_operatorName7;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  Grammar/MorphDSL.g:223:2: ( operatorName '(' sk1= selectKeyword ')' |sk2= selectKeyword | '*' )

            ANTLR_UINT32 alt6;

            alt6=3;

            switch ( this->LA(1) )
            {
            case T_NORMALIZE:
            	{
            		alt6=1;
            	}
                break;
            case T_ATTRIBUTE_SQL:
            case T_EXTERNAL_GRADIENT:
            case T_INTERNAL_GRADIENT:
            case T_MASK:
            case T_OKROGLOST:
            case T_SET:
            case T_VOLUMENT:
            	{
            		alt6=2;
            	}
                break;
            case T_STAR:
            	{
            		alt6=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto ruleoperatorSqlEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:223:4: operatorName '(' sk1= selectKeyword ')'
        	    {
        	        this->followPush(FOLLOW_operatorName_in_operatorSql863);
        	        operatorName7=operatorName();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorSql865);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_selectKeyword_in_operatorSql869);
        	        sk1=selectKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             retval.selectKw= 
        	            sk1
        	            ;
        	             retval.funkcija= 
        	            (this->get_strstream()->toStringTT(operatorName7.start, operatorName7.stop))
        	            ;
        	             
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorSql873);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:224:4: sk2= selectKeyword
        	    {
        	        this->followPush(FOLLOW_selectKeyword_in_operatorSql880);
        	        sk2=selectKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             retval.selectKw= 
        	            sk2
        	            ;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:225:4: '*'
        	    {
        	         this->matchToken(T_STAR, &FOLLOW_T_STAR_in_operatorSql887);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorSqlEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             retval.selectKw= SelectKw::Star;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorSqlEx; /* Prevent compiler warnings */
    ruleoperatorSqlEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end operatorSql */

/**
 * $ANTLR start selectKeyword
 * Grammar/MorphDSL.g:228:1: selectKeyword returns [SelectKw::Keyword kw] : ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' | 'internal_gradient' | 'external_gradient' );
 */
SelectKw::Keyword
MorphDSLParser::selectKeyword()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    SelectKw::Keyword kw;


    /* Initialize rule variables
     */

     kw= SelectKw::Error;
     

 
    {
        {
            //  Grammar/MorphDSL.g:230:2: ( 'mask' | 'set' | 'attribute' | 'okroglost' | 'volument' | 'internal_gradient' | 'external_gradient' )

            ANTLR_UINT32 alt7;

            alt7=7;

            switch ( this->LA(1) )
            {
            case T_MASK:
            	{
            		alt7=1;
            	}
                break;
            case T_SET:
            	{
            		alt7=2;
            	}
                break;
            case T_ATTRIBUTE_SQL:
            	{
            		alt7=3;
            	}
                break;
            case T_OKROGLOST:
            	{
            		alt7=4;
            	}
                break;
            case T_VOLUMENT:
            	{
            		alt7=5;
            	}
                break;
            case T_INTERNAL_GRADIENT:
            	{
            		alt7=6;
            	}
                break;
            case T_EXTERNAL_GRADIENT:
            	{
            		alt7=7;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return kw;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleselectKeywordEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:230:4: 'mask'
        	    {
        	         this->matchToken(T_MASK, &FOLLOW_T_MASK_in_selectKeyword910);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Mask;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:231:4: 'set'
        	    {
        	         this->matchToken(T_SET, &FOLLOW_T_SET_in_selectKeyword917);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Set;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:232:4: 'attribute'
        	    {
        	         this->matchToken(T_ATTRIBUTE_SQL, &FOLLOW_T_ATTRIBUTE_SQL_in_selectKeyword925);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Attribute;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:233:4: 'okroglost'
        	    {
        	         this->matchToken(T_OKROGLOST, &FOLLOW_T_OKROGLOST_in_selectKeyword932);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Okroglost;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // Grammar/MorphDSL.g:234:4: 'volument'
        	    {
        	         this->matchToken(T_VOLUMENT, &FOLLOW_T_VOLUMENT_in_selectKeyword939);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::Volument;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // Grammar/MorphDSL.g:235:4: 'internal_gradient'
        	    {
        	         this->matchToken(T_INTERNAL_GRADIENT, &FOLLOW_T_INTERNAL_GRADIENT_in_selectKeyword947);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::InternalGradient;
        	             
        	        }


        	    }
        	    break;
        	case 7:
        	    // Grammar/MorphDSL.g:236:4: 'external_gradient'
        	    {
        	         this->matchToken(T_EXTERNAL_GRADIENT, &FOLLOW_T_EXTERNAL_GRADIENT_in_selectKeyword955);
        	        if  (this->hasException())
        	        {
        	            goto ruleselectKeywordEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return kw;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             kw= SelectKw::ExternalGradient;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleselectKeywordEx; /* Prevent compiler warnings */
    ruleselectKeywordEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return kw;
}
/* $ANTLR end selectKeyword */

/**
 * $ANTLR start operatorName
 * Grammar/MorphDSL.g:239:1: operatorName : 'normalize' ;
 */
MorphDSLParser_operatorName_return
MorphDSLParser::operatorName()
{
    MorphDSLParser_operatorName_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:239:13: ( 'normalize' )
        // Grammar/MorphDSL.g:239:15: 'normalize'
        {
             this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorName966);
            if  (this->hasException())
            {
                goto ruleoperatorNameEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorNameEx; /* Prevent compiler warnings */
    ruleoperatorNameEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end operatorName */

/**
 * $ANTLR start sqlWhere
 * Grammar/MorphDSL.g:241:1: sqlWhere returns [std::string keyword, SqlWhere* stavek] : (val1= DOUBLENUMBER op1= relOp (kv1= sqlWhereKeyword |var1= var ) | (kv2= sqlWhereKeyword |var2= var ) op2= relOp val2= DOUBLENUMBER |kv3= sqlWhereKeyword '=' '(' sql[\"\"] ')' );
 */
MorphDSLParser_sqlWhere_return
MorphDSLParser::sqlWhere()
{
    MorphDSLParser_sqlWhere_return retval(this);


    const CommonTokenType*    val1;
    const CommonTokenType*    val2;
    RelOp::RelacijskiOperatorji op1;
    typedef	RelOp::RelacijskiOperatorji RETURN_TYPE_op1;

    MorphDSLParser_sqlWhereKeyword_return kv1;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv1;

    Identifier* var1;
    typedef	Identifier* RETURN_TYPE_var1;

    MorphDSLParser_sqlWhereKeyword_return kv2;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv2;

    Identifier* var2;
    typedef	Identifier* RETURN_TYPE_var2;

    RelOp::RelacijskiOperatorji op2;
    typedef	RelOp::RelacijskiOperatorji RETURN_TYPE_op2;

    MorphDSLParser_sqlWhereKeyword_return kv3;
    typedef	MorphDSLParser_sqlWhereKeyword_return RETURN_TYPE_kv3;

    Sql* sql8;
    typedef	Sql* RETURN_TYPE_sql8;

    /* Initialize rule variables
     */

     bool isVar = false; 
    val1       = NULL;
    val2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        {
            //  Grammar/MorphDSL.g:243:2: (val1= DOUBLENUMBER op1= relOp (kv1= sqlWhereKeyword |var1= var ) | (kv2= sqlWhereKeyword |var2= var ) op2= relOp val2= DOUBLENUMBER |kv3= sqlWhereKeyword '=' '(' sql[\"\"] ')' )

            ANTLR_UINT32 alt10;

            alt10=3;

            switch ( this->LA(1) )
            {
            case DOUBLENUMBER:
            	{
            		alt10=1;
            	}
                break;
            case T_AREA_SQL:
            case T_ATRIBUTE:
            case T_EXTERNAL_GRADIENT:
            case T_INTERNAL_GRADIENT:
            case T_OKROGLOST:
            case T_RESPONSE:
            case T_VOLUMENT:
            	{
            		switch ( this->LA(2) )
            		{
            		case T_LESS_THAN:
            		case T_LESS_THAN_OR_EQ:
            		case T_MORE_THAN:
            		case T_MORE_THAN_OR_EQ:
            		case T_NOT_EQUAL:
            			{
            				alt10=2;
            			}
            		    break;
            		case T_EQUALS:
            			{
            				switch ( this->LA(3) )
            				{
            				case T_LPAREN:
            					{
            						alt10=3;
            					}
            				    break;
            				case DOUBLENUMBER:
            					{
            						alt10=2;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return retval;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 10 );
            				    ex->set_state( 4 );


            				    goto rulesqlWhereEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 10 );
            		    ex->set_state( 2 );


            		    goto rulesqlWhereEx;

            		}

            	}
                break;
            case ID:
            	{
            		alt10=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto rulesqlWhereEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:243:4: val1= DOUBLENUMBER op1= relOp (kv1= sqlWhereKeyword |var1= var )
        	    {
        	        val1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere987);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_relOp_in_sqlWhere991);
        	        op1=relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // Grammar/MorphDSL.g:244:4: (kv1= sqlWhereKeyword |var1= var )
        	        {
        	            int alt8=2;
        	            switch ( this->LA(1) )
        	            {
        	            case T_AREA_SQL:
        	            case T_ATRIBUTE:
        	            case T_EXTERNAL_GRADIENT:
        	            case T_INTERNAL_GRADIENT:
        	            case T_OKROGLOST:
        	            case T_RESPONSE:
        	            case T_VOLUMENT:
        	            	{
        	            		alt8=1;
        	            	}
        	                break;
        	            case ID:
        	            	{
        	            		alt8=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 8 );
        	                ex->set_state( 0 );


        	                goto rulesqlWhereEx;

        	            }

        	            switch (alt8)
        	            {
        	        	case 1:
        	        	    // Grammar/MorphDSL.g:244:5: kv1= sqlWhereKeyword
        	        	    {
        	        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere1000);
        	        	        kv1=sqlWhereKeyword();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulesqlWhereEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // Grammar/MorphDSL.g:244:27: var1= var
        	        	    {
        	        	        this->followPush(FOLLOW_var_in_sqlWhere1006);
        	        	        var1=var();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulesqlWhereEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             isVar = true; 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( this->get_backtracking()==0 )
        	        {
        	             
        	            			if(!isVar){
        	            	  			retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv1.start, kv1.stop))
        	            ;

        	            	  			retval.stavek= new SqlWhere(
        	            op1
        	            , toDouble(val1), 
        	            (this->get_strstream()->toStringTT(kv1.start, kv1.stop))
        	            );

        	            			}
        	            			else{
        	            				//TODO SQL WHERE 1
        	            				retval.stavek= NULL;

        	            			}
        	            	  	
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:256:2: (kv2= sqlWhereKeyword |var2= var ) op2= relOp val2= DOUBLENUMBER
        	    {
        	        // Grammar/MorphDSL.g:256:2: (kv2= sqlWhereKeyword |var2= var )
        	        {
        	            int alt9=2;
        	            switch ( this->LA(1) )
        	            {
        	            case T_AREA_SQL:
        	            case T_ATRIBUTE:
        	            case T_EXTERNAL_GRADIENT:
        	            case T_INTERNAL_GRADIENT:
        	            case T_OKROGLOST:
        	            case T_RESPONSE:
        	            case T_VOLUMENT:
        	            	{
        	            		alt9=1;
        	            	}
        	                break;
        	            case ID:
        	            	{
        	            		alt9=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 9 );
        	                ex->set_state( 0 );


        	                goto rulesqlWhereEx;

        	            }

        	            switch (alt9)
        	            {
        	        	case 1:
        	        	    // Grammar/MorphDSL.g:256:3: kv2= sqlWhereKeyword
        	        	    {
        	        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere1025);
        	        	        kv2=sqlWhereKeyword();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulesqlWhereEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // Grammar/MorphDSL.g:256:25: var2= var
        	        	    {
        	        	        this->followPush(FOLLOW_var_in_sqlWhere1031);
        	        	        var2=var();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulesqlWhereEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             isVar = true; 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_relOp_in_sqlWhere1038);
        	        op2=relOp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        val2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_sqlWhere1042);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             
        	            			if(!isVar){
        	            				retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv2.start, kv2.stop))
        	            ;

        	            				retval.stavek= new SqlWhere(
        	            op2
        	            , toDouble(val2), 
        	            (this->get_strstream()->toStringTT(kv2.start, kv2.stop))
        	            );

        	            			}
        	            			else{
        	            				//TODO SQL WHERE 2
        	            				retval.stavek= NULL;

        	            			}
        	            		
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:268:2: kv3= sqlWhereKeyword '=' '(' sql[\"\"] ')'
        	    {
        	        this->followPush(FOLLOW_sqlWhereKeyword_in_sqlWhere1054);
        	        kv3=sqlWhereKeyword();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_sqlWhere1056);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_sqlWhere1058);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_sql_in_sqlWhere1060);
        	        sql8=sql("");

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_sqlWhere1063);
        	        if  (this->hasException())
        	        {
        	            goto rulesqlWhereEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	            			retval.keyword= 
        	            (this->get_strstream()->toStringTT(kv3.start, kv3.stop))
        	            ;

        	            			retval.stavek= new SqlWhere(
        	            sql8
        	            , (this->get_strstream()->toStringTT(kv3.start, kv3.stop))
        	            );

        	            		
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereEx; /* Prevent compiler warnings */
    rulesqlWhereEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end sqlWhere */

/**
 * $ANTLR start sqlWhereKeyword
 * Grammar/MorphDSL.g:275:1: sqlWhereKeyword : ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' );
 */
MorphDSLParser_sqlWhereKeyword_return
MorphDSLParser::sqlWhereKeyword()
{
    MorphDSLParser_sqlWhereKeyword_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:276:2: ( 'area' | 'response' | 'internal_gradient' | 'external_gradient' | 'volument' | 'okroglost' | 'atribute' )
        // Grammar/MorphDSL.g:
        {
            if ( ((this->LA(1) >= T_AREA_SQL) && (this->LA(1) <= T_ATRIBUTE)) || this->LA(1) == T_EXTERNAL_GRADIENT || this->LA(1) == T_INTERNAL_GRADIENT || this->LA(1) == T_OKROGLOST || this->LA(1) == T_RESPONSE || this->LA(1) == T_VOLUMENT )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulesqlWhereKeywordEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesqlWhereKeywordEx; /* Prevent compiler warnings */
    rulesqlWhereKeywordEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end sqlWhereKeyword */

/**
 * $ANTLR start relOp
 * Grammar/MorphDSL.g:285:1: relOp returns [RelOp::RelacijskiOperatorji relOperator] : ( '>' | '<' | '=' | '!=' | '>=' | '<=' );
 */
RelOp::RelacijskiOperatorji
MorphDSLParser::relOp()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    RelOp::RelacijskiOperatorji relOperator;


    /* Initialize rule variables
     */

     relOperator= RelOp::ERR;


 
    {
        {
            //  Grammar/MorphDSL.g:287:2: ( '>' | '<' | '=' | '!=' | '>=' | '<=' )

            ANTLR_UINT32 alt11;

            alt11=6;

            switch ( this->LA(1) )
            {
            case T_MORE_THAN:
            	{
            		alt11=1;
            	}
                break;
            case T_LESS_THAN:
            	{
            		alt11=2;
            	}
                break;
            case T_EQUALS:
            	{
            		alt11=3;
            	}
                break;
            case T_NOT_EQUAL:
            	{
            		alt11=4;
            	}
                break;
            case T_MORE_THAN_OR_EQ:
            	{
            		alt11=5;
            	}
                break;
            case T_LESS_THAN_OR_EQ:
            	{
            		alt11=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return relOperator;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 11 );
                ex->set_state( 0 );


                goto rulerelOpEx;

            }

            switch (alt11)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:287:4: '>'
        	    {
        	         this->matchToken(T_MORE_THAN, &FOLLOW_T_MORE_THAN_in_relOp1136);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::GT;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:288:4: '<'
        	    {
        	         this->matchToken(T_LESS_THAN, &FOLLOW_T_LESS_THAN_in_relOp1144);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::LT;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:289:4: '='
        	    {
        	         this->matchToken(T_EQUALS, &FOLLOW_T_EQUALS_in_relOp1152);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::EQ;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:290:4: '!='
        	    {
        	         this->matchToken(T_NOT_EQUAL, &FOLLOW_T_NOT_EQUAL_in_relOp1160);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::NE;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // Grammar/MorphDSL.g:291:4: '>='
        	    {
        	         this->matchToken(T_MORE_THAN_OR_EQ, &FOLLOW_T_MORE_THAN_OR_EQ_in_relOp1167);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::GE;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // Grammar/MorphDSL.g:292:4: '<='
        	    {
        	         this->matchToken(T_LESS_THAN_OR_EQ, &FOLLOW_T_LESS_THAN_OR_EQ_in_relOp1174);
        	        if  (this->hasException())
        	        {
        	            goto rulerelOpEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return relOperator;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             relOperator= RelOp::LE;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulerelOpEx; /* Prevent compiler warnings */
    rulerelOpEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return relOperator;
}
/* $ANTLR end relOp */

/**
 * $ANTLR start operatorsBB
 * Grammar/MorphDSL.g:295:1: operatorsBB : ( 'complement' '(' cId= var ')' | 'union' '(' uId1= var ',' uId2= var ')' | 'intersection' '(' iId1= var ',' iId2= var ')' | 'without' '(' wId1= var ',' wId2= var ')' | 'hitmiss' '(' hId1= var ',' hId2= var ')' | 'boundary' '(' bId= var ')' ) ;
 */
void
MorphDSLParser::operatorsBB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    Identifier* cId;
    typedef	Identifier* RETURN_TYPE_cId;

    Identifier* uId1;
    typedef	Identifier* RETURN_TYPE_uId1;

    Identifier* uId2;
    typedef	Identifier* RETURN_TYPE_uId2;

    Identifier* iId1;
    typedef	Identifier* RETURN_TYPE_iId1;

    Identifier* iId2;
    typedef	Identifier* RETURN_TYPE_iId2;

    Identifier* wId1;
    typedef	Identifier* RETURN_TYPE_wId1;

    Identifier* wId2;
    typedef	Identifier* RETURN_TYPE_wId2;

    Identifier* hId1;
    typedef	Identifier* RETURN_TYPE_hId1;

    Identifier* hId2;
    typedef	Identifier* RETURN_TYPE_hId2;

    Identifier* bId;
    typedef	Identifier* RETURN_TYPE_bId;

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:295:13: ( ( 'complement' '(' cId= var ')' | 'union' '(' uId1= var ',' uId2= var ')' | 'intersection' '(' iId1= var ',' iId2= var ')' | 'without' '(' wId1= var ',' wId2= var ')' | 'hitmiss' '(' hId1= var ',' hId2= var ')' | 'boundary' '(' bId= var ')' ) )
        // Grammar/MorphDSL.g:296:2: ( 'complement' '(' cId= var ')' | 'union' '(' uId1= var ',' uId2= var ')' | 'intersection' '(' iId1= var ',' iId2= var ')' | 'without' '(' wId1= var ',' wId2= var ')' | 'hitmiss' '(' hId1= var ',' hId2= var ')' | 'boundary' '(' bId= var ')' )
        {
            // Grammar/MorphDSL.g:296:2: ( 'complement' '(' cId= var ')' | 'union' '(' uId1= var ',' uId2= var ')' | 'intersection' '(' iId1= var ',' iId2= var ')' | 'without' '(' wId1= var ',' wId2= var ')' | 'hitmiss' '(' hId1= var ',' hId2= var ')' | 'boundary' '(' bId= var ')' )
            {
                int alt12=6;
                switch ( this->LA(1) )
                {
                case T_COMPLEMENT:
                	{
                		alt12=1;
                	}
                    break;
                case T_UNION:
                	{
                		alt12=2;
                	}
                    break;
                case T_INTERSECTION:
                	{
                		alt12=3;
                	}
                    break;
                case T_WITHOUT:
                	{
                		alt12=4;
                	}
                    break;
                case T_HITMISS:
                	{
                		alt12=5;
                	}
                    break;
                case T_BOUNDARY:
                	{
                		alt12=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 12 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBEx;

                }

                switch (alt12)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:296:4: 'complement' '(' cId= var ')'
            	    {
            	         this->matchToken(T_COMPLEMENT, &FOLLOW_T_COMPLEMENT_in_operatorsBB1190);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1192);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1196);
            	        cId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1198);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            	s->complementImpl(cId
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:297:4: 'union' '(' uId1= var ',' uId2= var ')'
            	    {
            	         this->matchToken(T_UNION, &FOLLOW_T_UNION_in_operatorsBB1205);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1207);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1211);
            	        uId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1213);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1217);
            	        uId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1219);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->unionImpl(uId1
            	            , uId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:298:4: 'intersection' '(' iId1= var ',' iId2= var ')'
            	    {
            	         this->matchToken(T_INTERSECTION, &FOLLOW_T_INTERSECTION_in_operatorsBB1226);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1228);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1232);
            	        iId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1234);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1238);
            	        iId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1240);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->intersectionImpl(iId1
            	            , iId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:299:4: 'without' '(' wId1= var ',' wId2= var ')'
            	    {
            	         this->matchToken(T_WITHOUT, &FOLLOW_T_WITHOUT_in_operatorsBB1247);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1249);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1253);
            	        wId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1255);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1259);
            	        wId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1261);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->withoutImpl(wId1
            	            , wId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:300:4: 'hitmiss' '(' hId1= var ',' hId2= var ')'
            	    {
            	         this->matchToken(T_HITMISS, &FOLLOW_T_HITMISS_in_operatorsBB1268);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1270);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1274);
            	        hId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBB1276);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1280);
            	        hId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1282);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->hitMissImpl(hId1
            	            , hId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:301:4: 'boundary' '(' bId= var ')'
            	    {
            	         this->matchToken(T_BOUNDARY, &FOLLOW_T_BOUNDARY_in_operatorsBB1289);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBB1291);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBB1295);
            	        bId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBB1297);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->boundaryImpl(bId
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBEx; /* Prevent compiler warnings */
    ruleoperatorsBBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBB */

/**
 * $ANTLR start operatorsGG
 * Grammar/MorphDSL.g:304:1: operatorsGG : ( 'negate' '(' nId= var ')' | 'normalize' | 'multiply' '(' mId= var ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= var ')' | 'multiply' '(' mId3= var ',' mId4= var ')' | 'crop' '(' cId= var ',' interval ')' | 'subtract' '(' sId1= var ',' sId2= var ')' | 'gradient' '(' 'INTERNAL' ',' giId= var ')' | 'gradient' '(' 'EXTERNAL' ',' geId= var ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= var ',' dpmId2= var ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= var ',' dpaId2= var ')' | 'mapping' '(' 'DMP' ',' dmpId1= var ',' dmpId2= var ')' | 'mapping' '(' 'DAP' ',' dapId1= var ',' dapId2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= var ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')' ) ) ;
 */
void
MorphDSLParser::operatorsGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    mDbl;
    const CommonTokenType*    mDbl2;
    Identifier* nId;
    typedef	Identifier* RETURN_TYPE_nId;

    Identifier* mId;
    typedef	Identifier* RETURN_TYPE_mId;

    Identifier* mId2;
    typedef	Identifier* RETURN_TYPE_mId2;

    Identifier* mId3;
    typedef	Identifier* RETURN_TYPE_mId3;

    Identifier* mId4;
    typedef	Identifier* RETURN_TYPE_mId4;

    Identifier* cId;
    typedef	Identifier* RETURN_TYPE_cId;

    Identifier* sId1;
    typedef	Identifier* RETURN_TYPE_sId1;

    Identifier* sId2;
    typedef	Identifier* RETURN_TYPE_sId2;

    Identifier* giId;
    typedef	Identifier* RETURN_TYPE_giId;

    Identifier* geId;
    typedef	Identifier* RETURN_TYPE_geId;

    Identifier* dpmId1;
    typedef	Identifier* RETURN_TYPE_dpmId1;

    Identifier* dpmId2;
    typedef	Identifier* RETURN_TYPE_dpmId2;

    Identifier* dpaId1;
    typedef	Identifier* RETURN_TYPE_dpaId1;

    Identifier* dpaId2;
    typedef	Identifier* RETURN_TYPE_dpaId2;

    Identifier* dmpId1;
    typedef	Identifier* RETURN_TYPE_dmpId1;

    Identifier* dmpId2;
    typedef	Identifier* RETURN_TYPE_dmpId2;

    Identifier* dapId1;
    typedef	Identifier* RETURN_TYPE_dapId1;

    Identifier* dapId2;
    typedef	Identifier* RETURN_TYPE_dapId2;

    Identifier* msls_1_Id1;
    typedef	Identifier* RETURN_TYPE_msls_1_Id1;

    Identifier* msls_1_Id2;
    typedef	Identifier* RETURN_TYPE_msls_1_Id2;

    Identifier* msls_2_Id1;
    typedef	Identifier* RETURN_TYPE_msls_2_Id1;

    Identifier* msls_2_Id2;
    typedef	Identifier* RETURN_TYPE_msls_2_Id2;

    Identifier* watershadeId;
    typedef	Identifier* RETURN_TYPE_watershadeId;

    Identifier* watershadeMarkerId2;
    typedef	Identifier* RETURN_TYPE_watershadeMarkerId2;

    Identifier* watershadeMarkerId1;
    typedef	Identifier* RETURN_TYPE_watershadeMarkerId1;

    MorphDSLParser_interval_return interval9;
    typedef	MorphDSLParser_interval_return RETURN_TYPE_interval9;

    /* Initialize rule variables
     */

    mDbl       = NULL;
    mDbl2       = NULL;


 
    {
        // Grammar/MorphDSL.g:304:13: ( ( 'negate' '(' nId= var ')' | 'normalize' | 'multiply' '(' mId= var ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= var ')' | 'multiply' '(' mId3= var ',' mId4= var ')' | 'crop' '(' cId= var ',' interval ')' | 'subtract' '(' sId1= var ',' sId2= var ')' | 'gradient' '(' 'INTERNAL' ',' giId= var ')' | 'gradient' '(' 'EXTERNAL' ',' geId= var ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= var ',' dpmId2= var ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= var ',' dpaId2= var ')' | 'mapping' '(' 'DMP' ',' dmpId1= var ',' dmpId2= var ')' | 'mapping' '(' 'DAP' ',' dapId1= var ',' dapId2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= var ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')' ) ) )
        // Grammar/MorphDSL.g:305:2: ( 'negate' '(' nId= var ')' | 'normalize' | 'multiply' '(' mId= var ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= var ')' | 'multiply' '(' mId3= var ',' mId4= var ')' | 'crop' '(' cId= var ',' interval ')' | 'subtract' '(' sId1= var ',' sId2= var ')' | 'gradient' '(' 'INTERNAL' ',' giId= var ')' | 'gradient' '(' 'EXTERNAL' ',' geId= var ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= var ',' dpmId2= var ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= var ',' dpaId2= var ')' | 'mapping' '(' 'DMP' ',' dmpId1= var ',' dmpId2= var ')' | 'mapping' '(' 'DAP' ',' dapId1= var ',' dapId2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= var ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')' ) )
        {
            // Grammar/MorphDSL.g:305:2: ( 'negate' '(' nId= var ')' | 'normalize' | 'multiply' '(' mId= var ',' mDbl= DOUBLENUMBER ')' | 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= var ')' | 'multiply' '(' mId3= var ',' mId4= var ')' | 'crop' '(' cId= var ',' interval ')' | 'subtract' '(' sId1= var ',' sId2= var ')' | 'gradient' '(' 'INTERNAL' ',' giId= var ')' | 'gradient' '(' 'EXTERNAL' ',' geId= var ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= var ',' dpmId2= var ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= var ',' dpaId2= var ')' | 'mapping' '(' 'DMP' ',' dmpId1= var ',' dmpId2= var ')' | 'mapping' '(' 'DAP' ',' dapId1= var ',' dapId2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')' | 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')' | 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= var ')' | ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')' ) )
            {
                int alt13=17;
                switch ( this->LA(1) )
                {
                case T_NEGATE:
                	{
                		alt13=1;
                	}
                    break;
                case T_NORMALIZE:
                	{
                		alt13=2;
                	}
                    break;
                case T_MULTIPLY:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case DOUBLENUMBER:
                					{
                						alt13=4;
                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 72:
                							{
                								switch ( this->LA(5) )
                								{
                								case T_MASK:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case DOUBLENUMBER:
                													{
                														alt13=3;
                													}
                												    break;
                												case ID:
                													{
                														alt13=5;
                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 26 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 29 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;
                								case T_SET:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case DOUBLENUMBER:
                													{
                														alt13=3;
                													}
                												    break;
                												case ID:
                													{
                														alt13=5;
                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 26 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 30 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;
                								case T_ATTRIBUTE_SQL:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case DOUBLENUMBER:
                													{
                														alt13=3;
                													}
                												    break;
                												case ID:
                													{
                														alt13=5;
                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 26 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 31 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;
                								case T_OKROGLOST:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case DOUBLENUMBER:
                													{
                														alt13=3;
                													}
                												    break;
                												case ID:
                													{
                														alt13=5;
                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 26 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 32 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;
                								case T_VOLUMENT:
                									{
                										switch ( this->LA(6) )
                										{
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case DOUBLENUMBER:
                													{
                														alt13=3;
                													}
                												    break;
                												case ID:
                													{
                														alt13=5;
                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 26 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 33 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 13 );
                								    ex->set_state( 25 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case DOUBLENUMBER:
                									{
                										alt13=3;
                									}
                								    break;
                								case ID:
                									{
                										alt13=5;
                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 13 );
                								    ex->set_state( 26 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 13 );
                						    ex->set_state( 16 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 13 );
                				    ex->set_state( 10 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_CROP:
                	{
                		alt13=6;
                	}
                    break;
                case T_SUBTRACT:
                	{
                		alt13=7;
                	}
                    break;
                case T_GRADIENT:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_INTERNAL:
                					{
                						alt13=8;
                					}
                				    break;
                				case T_EXTERNAL:
                					{
                						alt13=9;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 13 );
                				    ex->set_state( 11 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 6 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_DIFERENTIALPROFILES:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MORPHOLOGICAL:
                					{
                						alt13=10;
                					}
                				    break;
                				case T_ATTRIBUTE:
                					{
                						alt13=11;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 13 );
                				    ex->set_state( 12 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 7 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_MAPPING:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_DMP:
                					{
                						alt13=12;
                					}
                				    break;
                				case T_DAP:
                					{
                						alt13=13;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 13 );
                				    ex->set_state( 13 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 8 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;
                case T_SEGMENTATION:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_MSLS:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 72:
                											{
                												switch ( this->LA(7) )
                												{
                												case T_MASK:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_COMMA:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 72:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case T_MASK:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 56 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_SET:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 57 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_ATTRIBUTE_SQL:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 58 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_OKROGLOST:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 59 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_VOLUMENT:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 60 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;

                																				default:
                																				    if (this->get_backtracking()>0)
                																				    {
                																				        this->set_failedflag( true );
                																				        return ;
                																				    }

                																				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				    ex->set_decisionNum( 13 );
                																				    ex->set_state( 54 );


                																				    goto ruleoperatorsGGEx;

                																				}

                																			}
                																		    break;
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 48 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;

                																default:
                																    if (this->get_backtracking()>0)
                																    {
                																        this->set_failedflag( true );
                																        return ;
                																    }

                																    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																    ex->set_decisionNum( 13 );
                																    ex->set_state( 39 );


                																    goto ruleoperatorsGGEx;

                																}

                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 43 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_SET:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_COMMA:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 72:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case T_MASK:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 56 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_SET:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 57 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_ATTRIBUTE_SQL:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 58 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_OKROGLOST:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 59 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_VOLUMENT:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 60 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;

                																				default:
                																				    if (this->get_backtracking()>0)
                																				    {
                																				        this->set_failedflag( true );
                																				        return ;
                																				    }

                																				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				    ex->set_decisionNum( 13 );
                																				    ex->set_state( 54 );


                																				    goto ruleoperatorsGGEx;

                																				}

                																			}
                																		    break;
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 48 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;

                																default:
                																    if (this->get_backtracking()>0)
                																    {
                																        this->set_failedflag( true );
                																        return ;
                																    }

                																    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																    ex->set_decisionNum( 13 );
                																    ex->set_state( 39 );


                																    goto ruleoperatorsGGEx;

                																}

                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 44 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_ATTRIBUTE_SQL:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_COMMA:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 72:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case T_MASK:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 56 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_SET:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 57 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_ATTRIBUTE_SQL:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 58 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_OKROGLOST:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 59 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_VOLUMENT:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 60 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;

                																				default:
                																				    if (this->get_backtracking()>0)
                																				    {
                																				        this->set_failedflag( true );
                																				        return ;
                																				    }

                																				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				    ex->set_decisionNum( 13 );
                																				    ex->set_state( 54 );


                																				    goto ruleoperatorsGGEx;

                																				}

                																			}
                																		    break;
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 48 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;

                																default:
                																    if (this->get_backtracking()>0)
                																    {
                																        this->set_failedflag( true );
                																        return ;
                																    }

                																    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																    ex->set_decisionNum( 13 );
                																    ex->set_state( 39 );


                																    goto ruleoperatorsGGEx;

                																}

                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 45 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_OKROGLOST:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_COMMA:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 72:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case T_MASK:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 56 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_SET:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 57 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_ATTRIBUTE_SQL:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 58 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_OKROGLOST:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 59 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_VOLUMENT:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 60 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;

                																				default:
                																				    if (this->get_backtracking()>0)
                																				    {
                																				        this->set_failedflag( true );
                																				        return ;
                																				    }

                																				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				    ex->set_decisionNum( 13 );
                																				    ex->set_state( 54 );


                																				    goto ruleoperatorsGGEx;

                																				}

                																			}
                																		    break;
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 48 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;

                																default:
                																    if (this->get_backtracking()>0)
                																    {
                																        this->set_failedflag( true );
                																        return ;
                																    }

                																    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																    ex->set_decisionNum( 13 );
                																    ex->set_state( 39 );


                																    goto ruleoperatorsGGEx;

                																}

                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 46 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_VOLUMENT:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_COMMA:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 72:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case T_MASK:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 56 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_SET:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 57 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_ATTRIBUTE_SQL:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 58 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_OKROGLOST:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 59 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;
                																				case T_VOLUMENT:
                																					{
                																						switch ( this->LA(12) )
                																						{
                																						case T_RPAREN:
                																							{
                																								{
                																								    int LA13_55 = this->LA(13);
                																								    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																								    {
                																								        alt13=14;
                																								    }
                																								    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																								    {
                																								        alt13=15;
                																								    }
                																								    else
                																								    {
                																								        if (this->get_backtracking()>0)
                																								        {
                																								            this->set_failedflag( true );
                																								            return ;
                																								        }


                																								        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																								        ex->set_decisionNum( 13 );
                																								        ex->set_state( 55 );


                																								        goto ruleoperatorsGGEx;

                																								    }
                																								}
                																							}
                																						    break;

                																						default:
                																						    if (this->get_backtracking()>0)
                																						    {
                																						        this->set_failedflag( true );
                																						        return ;
                																						    }

                																						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																						    ex->set_decisionNum( 13 );
                																						    ex->set_state( 60 );


                																						    goto ruleoperatorsGGEx;

                																						}

                																					}
                																				    break;

                																				default:
                																				    if (this->get_backtracking()>0)
                																				    {
                																				        this->set_failedflag( true );
                																				        return ;
                																				    }

                																				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				    ex->set_decisionNum( 13 );
                																				    ex->set_state( 54 );


                																				    goto ruleoperatorsGGEx;

                																				}

                																			}
                																		    break;
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 48 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;

                																default:
                																    if (this->get_backtracking()>0)
                																    {
                																        this->set_failedflag( true );
                																        return ;
                																    }

                																    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																    ex->set_decisionNum( 13 );
                																    ex->set_state( 39 );


                																    goto ruleoperatorsGGEx;

                																}

                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 47 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 38 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;
                										case T_COMMA:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 72:
                															{
                																switch ( this->LA(9) )
                																{
                																case T_MASK:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 56 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;
                																case T_SET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 57 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;
                																case T_ATTRIBUTE_SQL:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 58 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;
                																case T_OKROGLOST:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 59 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;
                																case T_VOLUMENT:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case T_RPAREN:
                																			{
                																				{
                																				    int LA13_55 = this->LA(11);
                																				    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																				    {
                																				        alt13=14;
                																				    }
                																				    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																				    {
                																				        alt13=15;
                																				    }
                																				    else
                																				    {
                																				        if (this->get_backtracking()>0)
                																				        {
                																				            this->set_failedflag( true );
                																				            return ;
                																				        }


                																				        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																				        ex->set_decisionNum( 13 );
                																				        ex->set_state( 55 );


                																				        goto ruleoperatorsGGEx;

                																				    }
                																				}
                																			}
                																		    break;

                																		default:
                																		    if (this->get_backtracking()>0)
                																		    {
                																		        this->set_failedflag( true );
                																		        return ;
                																		    }

                																		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																		    ex->set_decisionNum( 13 );
                																		    ex->set_state( 60 );


                																		    goto ruleoperatorsGGEx;

                																		}

                																	}
                																    break;

                																default:
                																    if (this->get_backtracking()>0)
                																    {
                																        this->set_failedflag( true );
                																        return ;
                																    }

                																    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																    ex->set_decisionNum( 13 );
                																    ex->set_state( 54 );


                																    goto ruleoperatorsGGEx;

                																}

                															}
                														    break;
                														case T_RPAREN:
                															{
                																{
                																    int LA13_55 = this->LA(9);
                																    if ( (this->msynpred( antlr3::ClassForwarder<synpred56_MorphDSL>() )))
                																    {
                																        alt13=14;
                																    }
                																    else if ( (this->msynpred( antlr3::ClassForwarder<synpred57_MorphDSL>() )))
                																    {
                																        alt13=15;
                																    }
                																    else
                																    {
                																        if (this->get_backtracking()>0)
                																        {
                																            this->set_failedflag( true );
                																            return ;
                																        }


                																        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                																        ex->set_decisionNum( 13 );
                																        ex->set_state( 55 );


                																        goto ruleoperatorsGGEx;

                																    }
                																}
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 48 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 39 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 36 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 13 );
                								    ex->set_state( 27 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 13 );
                						    ex->set_state( 23 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;
                				case T_WATHERSHADE:
                					{
                						switch ( this->LA(4) )
                						{
                						case T_COMMA:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 72:
                											{
                												switch ( this->LA(7) )
                												{
                												case T_MASK:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																alt13=16;
                															}
                														    break;
                														case T_COMMA:
                															{
                																alt13=17;
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 49 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_SET:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																alt13=16;
                															}
                														    break;
                														case T_COMMA:
                															{
                																alt13=17;
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 50 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_ATTRIBUTE_SQL:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																alt13=16;
                															}
                														    break;
                														case T_COMMA:
                															{
                																alt13=17;
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 51 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_OKROGLOST:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																alt13=16;
                															}
                														    break;
                														case T_COMMA:
                															{
                																alt13=17;
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 52 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;
                												case T_VOLUMENT:
                													{
                														switch ( this->LA(8) )
                														{
                														case T_RPAREN:
                															{
                																alt13=16;
                															}
                														    break;
                														case T_COMMA:
                															{
                																alt13=17;
                															}
                														    break;

                														default:
                														    if (this->get_backtracking()>0)
                														    {
                														        this->set_failedflag( true );
                														        return ;
                														    }

                														    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                														    ex->set_decisionNum( 13 );
                														    ex->set_state( 53 );


                														    goto ruleoperatorsGGEx;

                														}

                													}
                												    break;

                												default:
                												    if (this->get_backtracking()>0)
                												    {
                												        this->set_failedflag( true );
                												        return ;
                												    }

                												    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                												    ex->set_decisionNum( 13 );
                												    ex->set_state( 40 );


                												    goto ruleoperatorsGGEx;

                												}

                											}
                										    break;
                										case T_RPAREN:
                											{
                												alt13=16;
                											}
                										    break;
                										case T_COMMA:
                											{
                												alt13=17;
                											}
                										    break;

                										default:
                										    if (this->get_backtracking()>0)
                										    {
                										        this->set_failedflag( true );
                										        return ;
                										    }

                										    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                										    ex->set_decisionNum( 13 );
                										    ex->set_state( 37 );


                										    goto ruleoperatorsGGEx;

                										}

                									}
                								    break;

                								default:
                								    if (this->get_backtracking()>0)
                								    {
                								        this->set_failedflag( true );
                								        return ;
                								    }

                								    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                								    ex->set_decisionNum( 13 );
                								    ex->set_state( 28 );


                								    goto ruleoperatorsGGEx;

                								}

                							}
                						    break;

                						default:
                						    if (this->get_backtracking()>0)
                						    {
                						        this->set_failedflag( true );
                						        return ;
                						    }

                						    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                						    ex->set_decisionNum( 13 );
                						    ex->set_state( 24 );


                						    goto ruleoperatorsGGEx;

                						}

                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 13 );
                				    ex->set_state( 14 );


                				    goto ruleoperatorsGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 9 );


                		    goto ruleoperatorsGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto ruleoperatorsGGEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:305:4: 'negate' '(' nId= var ')'
            	    {
            	         this->matchToken(T_NEGATE, &FOLLOW_T_NEGATE_in_operatorsGG1315);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1317);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1321);
            	        nId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1323);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->negateImpl(nId
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:306:4: 'normalize'
            	    {
            	         this->matchToken(T_NORMALIZE, &FOLLOW_T_NORMALIZE_in_operatorsGG1330);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->normalizeImpl(); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:307:4: 'multiply' '(' mId= var ',' mDbl= DOUBLENUMBER ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1337);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1339);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1343);
            	        mId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1345);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG1349);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1351);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->multiplyImpl(mId
            	            , toDouble(mDbl)); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:308:4: 'multiply' '(' mDbl2= DOUBLENUMBER ',' mId2= var ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1358);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1360);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        mDbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG1364);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1366);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1370);
            	        mId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1372);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->multiplyImpl(toDouble(mDbl2), 
            	            mId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 5:
            	    // Grammar/MorphDSL.g:309:4: 'multiply' '(' mId3= var ',' mId4= var ')'
            	    {
            	         this->matchToken(T_MULTIPLY, &FOLLOW_T_MULTIPLY_in_operatorsGG1378);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1380);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1384);
            	        mId3=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1386);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1390);
            	        mId4=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1392);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->multiplyImpl(mId3
            	            , mId4
            	            ); 
            	        }


            	    }
            	    break;
            	case 6:
            	    // Grammar/MorphDSL.g:310:4: 'crop' '(' cId= var ',' interval ')'
            	    {
            	         this->matchToken(T_CROP, &FOLLOW_T_CROP_in_operatorsGG1399);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1401);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1405);
            	        cId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1407);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_interval_in_operatorsGG1409);
            	        interval9=interval();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1411);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->cropImpl(cId
            	            , interval9.start
            	            , interval9.stop
            	            ); 
            	        }


            	    }
            	    break;
            	case 7:
            	    // Grammar/MorphDSL.g:311:4: 'subtract' '(' sId1= var ',' sId2= var ')'
            	    {
            	         this->matchToken(T_SUBTRACT, &FOLLOW_T_SUBTRACT_in_operatorsGG1418);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1420);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1424);
            	        sId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1426);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1430);
            	        sId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1432);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->subtractImpl(sId1
            	            , sId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 8:
            	    // Grammar/MorphDSL.g:312:4: 'gradient' '(' 'INTERNAL' ',' giId= var ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG1439);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1441);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_INTERNAL, &FOLLOW_T_INTERNAL_in_operatorsGG1443);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1445);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1449);
            	        giId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1451);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->gradientInternalImpl(giId
            	            ); 
            	        }


            	    }
            	    break;
            	case 9:
            	    // Grammar/MorphDSL.g:313:4: 'gradient' '(' 'EXTERNAL' ',' geId= var ')'
            	    {
            	         this->matchToken(T_GRADIENT, &FOLLOW_T_GRADIENT_in_operatorsGG1458);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1460);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_EXTERNAL, &FOLLOW_T_EXTERNAL_in_operatorsGG1462);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1464);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1468);
            	        geId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1470);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->gradientExternalImpl(geId
            	            ); 
            	        }


            	    }
            	    break;
            	case 10:
            	    // Grammar/MorphDSL.g:314:4: 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' dpmId1= var ',' dpmId2= var ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1477);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1479);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MORPHOLOGICAL, &FOLLOW_T_MORPHOLOGICAL_in_operatorsGG1481);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1483);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1487);
            	        dpmId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1489);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1493);
            	        dpmId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1495);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->diferentialProfilesMorphologicalImpl(dpmId1
            	            , dpmId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 11:
            	    // Grammar/MorphDSL.g:315:4: 'diferentialProfiles' '(' 'ATTRIBUTE' ',' dpaId1= var ',' dpaId2= var ')'
            	    {
            	         this->matchToken(T_DIFERENTIALPROFILES, &FOLLOW_T_DIFERENTIALPROFILES_in_operatorsGG1502);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1504);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_ATTRIBUTE, &FOLLOW_T_ATTRIBUTE_in_operatorsGG1506);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1508);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1512);
            	        dpaId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1514);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1518);
            	        dpaId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1520);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->diferentialProfilesAttributeImpl(dpaId1
            	            , dpaId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 12:
            	    // Grammar/MorphDSL.g:316:4: 'mapping' '(' 'DMP' ',' dmpId1= var ',' dmpId2= var ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1527);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1529);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DMP, &FOLLOW_T_DMP_in_operatorsGG1531);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1533);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1537);
            	        dmpId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1539);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1543);
            	        dmpId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1547);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 13:
            	    // Grammar/MorphDSL.g:317:4: 'mapping' '(' 'DAP' ',' dapId1= var ',' dapId2= var ')'
            	    {
            	         this->matchToken(T_MAPPING, &FOLLOW_T_MAPPING_in_operatorsGG1555);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1557);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_DAP, &FOLLOW_T_DAP_in_operatorsGG1559);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1561);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1565);
            	        dapId1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1567);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1571);
            	        dapId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1575);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             
            	        }


            	    }
            	    break;
            	case 14:
            	    // Grammar/MorphDSL.g:318:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1583);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1585);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1587);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1589);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1593);
            	        msls_1_Id1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1595);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1599);
            	        msls_1_Id2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1601);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->segmentationMsls1Impl(msls_1_Id1
            	            , msls_1_Id2
            	            ); 
            	        }


            	    }
            	    break;
            	case 15:
            	    // Grammar/MorphDSL.g:319:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1608);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1610);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_operatorsGG1612);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1614);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1618);
            	        msls_2_Id1=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1620);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1624);
            	        msls_2_Id2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1626);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->segmentationMsls2Impl(msls_2_Id1
            	            , msls_2_Id2
            	            ); 
            	        }


            	    }
            	    break;
            	case 16:
            	    // Grammar/MorphDSL.g:320:4: 'segmentation' '(' 'WATHERSHADE' ',' watershadeId= var ')'
            	    {
            	         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1633);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1635);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1637);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1639);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsGG1643);
            	        watershadeId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1645);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->segmentationWatershadeImpl(watershadeId
            	            ); 
            	        }


            	    }
            	    break;
            	case 17:
            	    // Grammar/MorphDSL.g:324:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')' )
            	    {
            	        // Grammar/MorphDSL.g:324:4: ( 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')' )
            	        // Grammar/MorphDSL.g:324:5: 'segmentation' '(' 'WATHERSHADE' ',' watershadeMarkerId2= var ',' watershadeMarkerId1= var ')'
            	        {
            	             this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_operatorsGG1656);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGG1658);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_WATHERSHADE, &FOLLOW_T_WATHERSHADE_in_operatorsGG1660);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1662);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            this->followPush(FOLLOW_var_in_operatorsGG1666);
            	            watershadeMarkerId2=var();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGG1668);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            this->followPush(FOLLOW_var_in_operatorsGG1672);
            	            watershadeMarkerId1=var();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGG1674);
            	            if  (this->hasException())
            	            {
            	                goto ruleoperatorsGGEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->segmentationWatershadeMarkerImpl(watershadeMarkerId1
            	            , watershadeMarkerId2
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGGEx; /* Prevent compiler warnings */
    ruleoperatorsGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGG */

/**
 * $ANTLR start interval
 * Grammar/MorphDSL.g:327:1: interval returns [double start, double stop] : dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER ;
 */
MorphDSLParser_interval_return
MorphDSLParser::interval()
{
    MorphDSLParser_interval_return retval(this);


    const CommonTokenType*    dbl1;
    const CommonTokenType*    dbl2;

    /* Initialize rule variables
     */

    dbl1       = NULL;
    dbl2       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:328:5: (dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER )
        // Grammar/MorphDSL.g:328:7: dbl1= DOUBLENUMBER ',' dbl2= DOUBLENUMBER
        {
            dbl1 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1699);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_interval1701);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            dbl2 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval1705);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {

                		istringstream((dbl1->getText())) >> 
                retval.start
                ;
                		istringstream((dbl2->getText())) >> 
                retval.stop
                ;
                	
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end interval */

/**
 * $ANTLR start operatorsBBGG
 * Grammar/MorphDSL.g:335:1: operatorsBBGG : ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) ;
 */
void
MorphDSLParser::operatorsBBGG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:335:15: ( ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE ) )
        // Grammar/MorphDSL.g:336:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
        {
            // Grammar/MorphDSL.g:336:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )
            {
                int alt14=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt14=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt14=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 14 );
                				    ex->set_state( 5 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 14 );
                		    ex->set_state( 1 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_DILATE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt14=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt14=2;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 14 );
                				    ex->set_state( 6 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 14 );
                		    ex->set_state( 2 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_OPEN:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt14=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt14=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt14=3;
                					}
                				    break;
                				case ID:
                					{
                						alt14=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 14 );
                				    ex->set_state( 7 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 14 );
                		    ex->set_state( 3 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;
                case T_CLOSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_LPAREN:
                			{
                				switch ( this->LA(3) )
                				{
                				case T_BOX:
                					{
                						alt14=1;
                					}
                				    break;
                				case T_RECONSTRUCTION:
                					{
                						alt14=2;
                					}
                				    break;
                				case T_AREA:
                					{
                						alt14=3;
                					}
                				    break;
                				case ID:
                					{
                						alt14=4;
                					}
                				    break;

                				default:
                				    if (this->get_backtracking()>0)
                				    {
                				        this->set_failedflag( true );
                				        return ;
                				    }

                				    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 14 );
                				    ex->set_state( 8 );


                				    goto ruleoperatorsBBGGEx;

                				}

                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 14 );
                		    ex->set_state( 4 );


                		    goto ruleoperatorsBBGGEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBBGGEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:336:4: operatorsBOX
            	    {
            	        this->followPush(FOLLOW_operatorsBOX_in_operatorsBBGG1722);
            	        operatorsBOX();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:337:4: operatorsRECONSTRUCTION
            	    {
            	        this->followPush(FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG1728);
            	        operatorsRECONSTRUCTION();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:338:4: operatorsAREA
            	    {
            	        this->followPush(FOLLOW_operatorsAREA_in_operatorsBBGG1734);
            	        operatorsAREA();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:339:4: operatorsATTRIBUTE
            	    {
            	        this->followPush(FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG1740);
            	        operatorsATTRIBUTE();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBBGGEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBGGEx; /* Prevent compiler warnings */
    ruleoperatorsBBGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBBGG */

/**
 * $ANTLR start operatorsBOX
 * Grammar/MorphDSL.g:343:1: operatorsBOX : ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= var ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= var ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= var ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= var ')' ) ;
 */
void
MorphDSLParser::operatorsBOX()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    eNum;
    const CommonTokenType*    dNum;
    const CommonTokenType*    oNum;
    const CommonTokenType*    cNum;
    Identifier* eId;
    typedef	Identifier* RETURN_TYPE_eId;

    Identifier* dId;
    typedef	Identifier* RETURN_TYPE_dId;

    Identifier* oId;
    typedef	Identifier* RETURN_TYPE_oId;

    Identifier* cId;
    typedef	Identifier* RETURN_TYPE_cId;

    /* Initialize rule variables
     */

    eNum       = NULL;
    dNum       = NULL;
    oNum       = NULL;
    cNum       = NULL;


 
    {
        // Grammar/MorphDSL.g:343:14: ( ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= var ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= var ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= var ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= var ')' ) )
        // Grammar/MorphDSL.g:344:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= var ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= var ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= var ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= var ')' )
        {
            // Grammar/MorphDSL.g:344:2: ( 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= var ')' | 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= var ')' | 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= var ')' | 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= var ')' )
            {
                int alt15=4;
                switch ( this->LA(1) )
                {
                case T_ERODE:
                	{
                		alt15=1;
                	}
                    break;
                case T_DILATE:
                	{
                		alt15=2;
                	}
                    break;
                case T_OPEN:
                	{
                		alt15=3;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt15=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 15 );
                    ex->set_state( 0 );


                    goto ruleoperatorsBOXEx;

                }

                switch (alt15)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:344:4: 'erode' '(' 'BOX' '(' eNum= DOUBLENUMBER ')' ',' eId= var ')'
            	    {
            	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsBOX1759);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1761);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1763);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1765);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        eNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1769);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1771);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1773);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBOX1777);
            	        eId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1779);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->erodeBoxImpl(toDouble(eNum), 
            	            eId
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:345:4: 'dilate' '(' 'BOX' '(' dNum= DOUBLENUMBER ')' ',' dId= var ')'
            	    {
            	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsBOX1787);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1789);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1791);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1793);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        dNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1797);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1799);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1801);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBOX1805);
            	        dId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1807);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->dilateBoxImpl(toDouble(dNum), 
            	            dId
            	            ); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // Grammar/MorphDSL.g:346:4: 'open' '(' 'BOX' '(' oNum= DOUBLENUMBER ')' ',' oId= var ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsBOX1814);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1816);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1818);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1820);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1824);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1826);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1828);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBOX1832);
            	        oId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1834);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->openBoxImpl(toDouble(oNum), 
            	            oId
            	            ); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // Grammar/MorphDSL.g:347:4: 'close' '(' 'BOX' '(' cNum= DOUBLENUMBER ')' ',' cId= var ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsBOX1843);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1845);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsBOX1847);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBOX1849);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cNum =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX1853);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1855);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsBOX1857);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsBOX1861);
            	        cId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBOX1863);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsBOXEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->closeBoxImpl(toDouble(cNum), 
            	            cId
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBOXEx; /* Prevent compiler warnings */
    ruleoperatorsBOXEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBOX */

/**
 * $ANTLR start operatorsRECONSTRUCTION
 * Grammar/MorphDSL.g:351:1: operatorsRECONSTRUCTION : ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= var ',' eId1= var ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= var ',' dId1= var ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= var ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= var ')' );
 */
void
MorphDSLParser::operatorsRECONSTRUCTION()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oDbl;
    const CommonTokenType*    cDbl;
    Identifier* eId2;
    typedef	Identifier* RETURN_TYPE_eId2;

    Identifier* eId1;
    typedef	Identifier* RETURN_TYPE_eId1;

    Identifier* dId2;
    typedef	Identifier* RETURN_TYPE_dId2;

    Identifier* dId1;
    typedef	Identifier* RETURN_TYPE_dId1;

    Identifier* oId;
    typedef	Identifier* RETURN_TYPE_oId;

    Identifier* cId;
    typedef	Identifier* RETURN_TYPE_cId;

    /* Initialize rule variables
     */

    oDbl       = NULL;
    cDbl       = NULL;


 
    {
        {
            //  Grammar/MorphDSL.g:351:25: ( 'erode' '(' 'RECONSTRUCTION' ',' eId2= var ',' eId1= var ')' | 'dilate' '(' 'RECONSTRUCTION' ',' dId2= var ',' dId1= var ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= var ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= var ')' )

            ANTLR_UINT32 alt16;

            alt16=4;

            switch ( this->LA(1) )
            {
            case T_ERODE:
            	{
            		alt16=1;
            	}
                break;
            case T_DILATE:
            	{
            		alt16=2;
            	}
                break;
            case T_OPEN:
            	{
            		alt16=3;
            	}
                break;
            case T_CLOSE:
            	{
            		alt16=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 16 );
                ex->set_state( 0 );


                goto ruleoperatorsRECONSTRUCTIONEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // Grammar/MorphDSL.g:353:4: 'erode' '(' 'RECONSTRUCTION' ',' eId2= var ',' eId1= var ')'
        	    {
        	         this->matchToken(T_ERODE, &FOLLOW_T_ERODE_in_operatorsRECONSTRUCTION1890);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1892);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1894);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1896);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_var_in_operatorsRECONSTRUCTION1900);
        	        eId2=var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1902);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_var_in_operatorsRECONSTRUCTION1906);
        	        eId1=var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1908);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             s->erodeImpl(eId1
        	            , eId2
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // Grammar/MorphDSL.g:355:4: 'dilate' '(' 'RECONSTRUCTION' ',' dId2= var ',' dId1= var ')'
        	    {
        	         this->matchToken(T_DILATE, &FOLLOW_T_DILATE_in_operatorsRECONSTRUCTION1917);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1919);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1921);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1923);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_var_in_operatorsRECONSTRUCTION1927);
        	        dId2=var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1929);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_var_in_operatorsRECONSTRUCTION1933);
        	        dId1=var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1935);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             s->dilateImpl(dId1
        	            , dId2
        	            ); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // Grammar/MorphDSL.g:356:4: 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' oDbl= DOUBLENUMBER ')' ',' oId= var ')'
        	    {
        	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsRECONSTRUCTION1942);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1944);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1946);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1948);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1950);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1952);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1956);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1958);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1960);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_var_in_operatorsRECONSTRUCTION1964);
        	        oId=var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1966);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             s->openImpl(toDouble(oDbl), 
        	            oId
        	            ); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // Grammar/MorphDSL.g:357:4: 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' cDbl= DOUBLENUMBER ')' ',' cId= var ')'
        	    {
        	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsRECONSTRUCTION1974);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1976);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RECONSTRUCTION, &FOLLOW_T_RECONSTRUCTION_in_operatorsRECONSTRUCTION1978);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1980);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_BOX, &FOLLOW_T_BOX_in_operatorsRECONSTRUCTION1982);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsRECONSTRUCTION1984);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1988);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1990);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsRECONSTRUCTION1992);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_var_in_operatorsRECONSTRUCTION1996);
        	        cId=var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsRECONSTRUCTION1998);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             s->closeImpl(toDouble(cDbl), 
        	            cId
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsRECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleoperatorsRECONSTRUCTIONEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsRECONSTRUCTION */

/**
 * $ANTLR start operatorsAREA
 * Grammar/MorphDSL.g:360:1: operatorsAREA : ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= var ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= var ')' ) ;
 */
void
MorphDSLParser::operatorsAREA()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    oDbl;
    const CommonTokenType*    cDbl;
    Identifier* oId;
    typedef	Identifier* RETURN_TYPE_oId;

    Identifier* cId;
    typedef	Identifier* RETURN_TYPE_cId;

    /* Initialize rule variables
     */

    oDbl       = NULL;
    cDbl       = NULL;


 
    {
        // Grammar/MorphDSL.g:360:15: ( ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= var ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= var ')' ) )
        // Grammar/MorphDSL.g:361:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= var ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= var ')' )
        {
            // Grammar/MorphDSL.g:361:2: ( 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= var ')' | 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= var ')' )
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt17=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt17=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 17 );
                    ex->set_state( 0 );


                    goto ruleoperatorsAREAEx;

                }

                switch (alt17)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:361:4: 'open' '(' 'AREA' ',' oDbl= DOUBLENUMBER ',' oId= var ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsAREA2016);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA2018);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA2020);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA2022);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA2026);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA2028);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsAREA2032);
            	        oId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA2034);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->openArea(toDouble(oDbl), 
            	            oId
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:362:4: 'close' '(' 'AREA' ',' cDbl= DOUBLENUMBER ',' cId= var ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsAREA2042);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsAREA2044);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_AREA, &FOLLOW_T_AREA_in_operatorsAREA2046);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA2048);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA2052);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsAREA2054);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsAREA2058);
            	        cId=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsAREA2060);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsAREAEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->closeArea(toDouble(cDbl), 
            	            cId
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsAREAEx; /* Prevent compiler warnings */
    ruleoperatorsAREAEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsAREA */

/**
 * $ANTLR start operatorsATTRIBUTE
 * Grammar/MorphDSL.g:366:1: operatorsATTRIBUTE : ( 'open' '(' attr1= ID ',' oDbl= DOUBLENUMBER ',' oId2= var ')' | 'close' '(' attr2= ID ',' cDbl= DOUBLENUMBER ',' cId2= var ')' ) ;
 */
void
MorphDSLParser::operatorsATTRIBUTE()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    attr1;
    const CommonTokenType*    oDbl;
    const CommonTokenType*    attr2;
    const CommonTokenType*    cDbl;
    Identifier* oId2;
    typedef	Identifier* RETURN_TYPE_oId2;

    Identifier* cId2;
    typedef	Identifier* RETURN_TYPE_cId2;

    /* Initialize rule variables
     */

    attr1       = NULL;
    oDbl       = NULL;
    attr2       = NULL;
    cDbl       = NULL;


 
    {
        // Grammar/MorphDSL.g:366:20: ( ( 'open' '(' attr1= ID ',' oDbl= DOUBLENUMBER ',' oId2= var ')' | 'close' '(' attr2= ID ',' cDbl= DOUBLENUMBER ',' cId2= var ')' ) )
        // Grammar/MorphDSL.g:367:2: ( 'open' '(' attr1= ID ',' oDbl= DOUBLENUMBER ',' oId2= var ')' | 'close' '(' attr2= ID ',' cDbl= DOUBLENUMBER ',' cId2= var ')' )
        {
            // Grammar/MorphDSL.g:367:2: ( 'open' '(' attr1= ID ',' oDbl= DOUBLENUMBER ',' oId2= var ')' | 'close' '(' attr2= ID ',' cDbl= DOUBLENUMBER ',' cId2= var ')' )
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case T_OPEN:
                	{
                		alt18=1;
                	}
                    break;
                case T_CLOSE:
                	{
                		alt18=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSLParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 18 );
                    ex->set_state( 0 );


                    goto ruleoperatorsATTRIBUTEEx;

                }

                switch (alt18)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:367:4: 'open' '(' attr1= ID ',' oDbl= DOUBLENUMBER ',' oId2= var ')'
            	    {
            	         this->matchToken(T_OPEN, &FOLLOW_T_OPEN_in_operatorsATTRIBUTE2079);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2081);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        attr1 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE2085);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE2087);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        oDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2091);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE2093);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsATTRIBUTE2097);
            	        oId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2099);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->openAttribute((attr1->getText()), toDouble(oDbl), 
            	            oId2
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // Grammar/MorphDSL.g:368:4: 'close' '(' attr2= ID ',' cDbl= DOUBLENUMBER ',' cId2= var ')'
            	    {
            	         this->matchToken(T_CLOSE, &FOLLOW_T_CLOSE_in_operatorsATTRIBUTE2107);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsATTRIBUTE2109);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        attr2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE2113);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE2115);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        cDbl =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE2119);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsATTRIBUTE2121);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_var_in_operatorsATTRIBUTE2125);
            	        cId2=var();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsATTRIBUTE2127);
            	        if  (this->hasException())
            	        {
            	            goto ruleoperatorsATTRIBUTEEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             s->closeAttribute((attr2->getText()), toDouble(cDbl), 
            	            cId2
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsATTRIBUTEEx; /* Prevent compiler warnings */
    ruleoperatorsATTRIBUTEEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsATTRIBUTE */

/**
 * $ANTLR start operatorsBG
 * Grammar/MorphDSL.g:372:1: operatorsBG : 'distanceTransform' '(' var ')' ;
 */
void
MorphDSLParser::operatorsBG()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    Identifier* var10;
    typedef	Identifier* RETURN_TYPE_var10;

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:372:13: ( 'distanceTransform' '(' var ')' )
        // Grammar/MorphDSL.g:372:15: 'distanceTransform' '(' var ')'
        {
             this->matchToken(T_DISTANCETRANSFORM, &FOLLOW_T_DISTANCETRANSFORM_in_operatorsBG2143);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsBG2145);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_var_in_operatorsBG2147);
            var10=var();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsBG2149);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 s->distanceTransformImpl(var10
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBGEx; /* Prevent compiler warnings */
    ruleoperatorsBGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBG */

/**
 * $ANTLR start operatorsGB
 * Grammar/MorphDSL.g:374:1: operatorsGB : 'treshold' '(' DOUBLENUMBER ',' var ')' ;
 */
void
MorphDSLParser::operatorsGB()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    DOUBLENUMBER11;
    Identifier* var12;
    typedef	Identifier* RETURN_TYPE_var12;

    /* Initialize rule variables
     */

    DOUBLENUMBER11       = NULL;


 
    {
        // Grammar/MorphDSL.g:374:13: ( 'treshold' '(' DOUBLENUMBER ',' var ')' )
        // Grammar/MorphDSL.g:374:15: 'treshold' '(' DOUBLENUMBER ',' var ')'
        {
             this->matchToken(T_TRESHOLD, &FOLLOW_T_TRESHOLD_in_operatorsGB2159);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_operatorsGB2161);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            DOUBLENUMBER11 =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGB2163);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_operatorsGB2165);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_var_in_operatorsGB2167);
            var12=var();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_operatorsGB2169);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 s->tresholdImpl(toDouble(DOUBLENUMBER11), 
                var12
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGBEx; /* Prevent compiler warnings */
    ruleoperatorsGBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGB */

/**
 * $ANTLR start marker
 * Grammar/MorphDSL.g:376:1: marker : ( ID | DOUBLENUMBER ) ;
 */
void
MorphDSLParser::marker()
{
        MorphDSLParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // Grammar/MorphDSL.g:376:8: ( ( ID | DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:
        {
            if ( this->LA(1) == DOUBLENUMBER || this->LA(1) == ID )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSLParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemarkerEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemarkerEx; /* Prevent compiler warnings */
    rulemarkerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end marker */

/**
 * $ANTLR start vector
 * Grammar/MorphDSL.g:382:1: vector : (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) ;
 */
MorphDSLParser_vector_return
MorphDSLParser::vector()
{
    MorphDSLParser_vector_return retval(this);


    const CommonTokenType*    st;
    const CommonTokenType*    kncSt;

    /* Initialize rule variables
     */

     std::vector<double> tmp; 
    st       = NULL;
    kncSt       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // Grammar/MorphDSL.g:388:2: ( (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER ) )
        // Grammar/MorphDSL.g:389:2: (st= DOUBLENUMBER ( ',' ) )* (kncSt= DOUBLENUMBER )
        {
            // Grammar/MorphDSL.g:389:2: (st= DOUBLENUMBER ( ',' ) )*

            for (;;)
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                case DOUBLENUMBER:
                	{
                		switch ( this->LA(2) )
                		{
                		case T_COMMA:
                			{
                				alt19=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    // Grammar/MorphDSL.g:389:3: st= DOUBLENUMBER ( ',' )
            	    {
            	        st =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector2221);
            	        if  (this->hasException())
            	        {
            	            goto rulevectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        // Grammar/MorphDSL.g:389:19: ( ',' )
            	        // Grammar/MorphDSL.g:389:21: ','
            	        {
            	             this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_vector2225);
            	            if  (this->hasException())
            	            {
            	                goto rulevectorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }


            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             tmp.push_back(toDouble(st)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


            // Grammar/MorphDSL.g:389:64: (kncSt= DOUBLENUMBER )
            // Grammar/MorphDSL.g:389:65: kncSt= DOUBLENUMBER
            {
                kncSt =  this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector2237);
                if  (this->hasException())
                {
                    goto rulevectorEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                     tmp.push_back(toDouble(kncSt)); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                		std::string fNew = s->getZadnjaSpremenljivka();
                		s->insertToVect(std::pair<string, std::vector<double>>(fNew, tmp));
                	
            }
        }

    return retval;
}
/* $ANTLR end vector */

// $ANTLR start synpred56_MorphDSL
void MorphDSLParser::msynpred56_MorphDSL_fragment(  )
{
	Identifier* msls_1_Id1;
	typedef	Identifier* RETURN_TYPE_msls_1_Id1;

	Identifier* msls_1_Id2;
	typedef	Identifier* RETURN_TYPE_msls_1_Id2;

    // Grammar/MorphDSL.g:318:4: ( 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')' )
    // Grammar/MorphDSL.g:318:4: 'segmentation' '(' 'MSLS' ',' msls_1_Id1= var ',' msls_1_Id2= var ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred56_MorphDSL1583);
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred56_MorphDSL1585);
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred56_MorphDSL1587);
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred56_MorphDSL1589);
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_var_in_synpred56_MorphDSL1593);
        msls_1_Id1=var();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred56_MorphDSL1595);
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_var_in_synpred56_MorphDSL1599);
        msls_1_Id2=var();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred56_MorphDSL1601);
        if  (this->hasException())
        {
            goto rulesynpred56_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred56_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred56_MorphDSLEx: ;

}
// $ANTLR end synpred56_MorphDSL

// $ANTLR start synpred57_MorphDSL
void MorphDSLParser::msynpred57_MorphDSL_fragment(  )
{
	Identifier* msls_2_Id1;
	typedef	Identifier* RETURN_TYPE_msls_2_Id1;

	Identifier* msls_2_Id2;
	typedef	Identifier* RETURN_TYPE_msls_2_Id2;

    // Grammar/MorphDSL.g:319:4: ( 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')' )
    // Grammar/MorphDSL.g:319:4: 'segmentation' '(' 'MSLS' ',' msls_2_Id1= var ',' msls_2_Id2= var ')'
    {
         this->matchToken(T_SEGMENTATION, &FOLLOW_T_SEGMENTATION_in_synpred57_MorphDSL1608);
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_LPAREN, &FOLLOW_T_LPAREN_in_synpred57_MorphDSL1610);
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_MSLS, &FOLLOW_T_MSLS_in_synpred57_MorphDSL1612);
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred57_MorphDSL1614);
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_var_in_synpred57_MorphDSL1618);
        msls_2_Id1=var();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_COMMA, &FOLLOW_T_COMMA_in_synpred57_MorphDSL1620);
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_var_in_synpred57_MorphDSL1624);
        msls_2_Id2=var();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(T_RPAREN, &FOLLOW_T_RPAREN_in_synpred57_MorphDSL1626);
        if  (this->hasException())
        {
            goto rulesynpred57_MorphDSLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred57_MorphDSLEx; /* Prevent compiler warnings */
rulesynpred57_MorphDSLEx: ;

}
// $ANTLR end synpred57_MorphDSL
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred57_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred57_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSLParser::msynpred( antlr3::ClassForwarder< synpred56_MorphDSL >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred56_MorphDSL_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
