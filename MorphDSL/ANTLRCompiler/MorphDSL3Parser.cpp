/** \file
 *  This C++ source file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g
 *     -                            On : 2013-06-03 14:29:08
 *     -                for the parser : MorphDSL3ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include "StdAfx.h"
#include <iostream>
#include <string>
#include <vector>
#include    "MorphDSL3Parser.hpp"
   #include "../ANTLRInterface/CompilerSemanticInterface.h"
using namespace std;

/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace 	User  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MorphDSL3ParserTokenNames[44+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DOUBLENUMBER",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "NUMBER",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'\"'",
        (ANTLR_UINT8*) "'('",
        (ANTLR_UINT8*) "')'",
        (ANTLR_UINT8*) "','",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'AREA'",
        (ANTLR_UINT8*) "'ATTRIBUTE'",
        (ANTLR_UINT8*) "'BOX'",
        (ANTLR_UINT8*) "'DAP'",
        (ANTLR_UINT8*) "'DMP'",
        (ANTLR_UINT8*) "'EXTERNAL'",
        (ANTLR_UINT8*) "'INTERNAL'",
        (ANTLR_UINT8*) "'MORPHOLOGICAL'",
        (ANTLR_UINT8*) "'MSLS'",
        (ANTLR_UINT8*) "'RECONSTRUCTION'",
        (ANTLR_UINT8*) "'WATHERSHADE'",
        (ANTLR_UINT8*) "'boundary'",
        (ANTLR_UINT8*) "'close'",
        (ANTLR_UINT8*) "'complement'",
        (ANTLR_UINT8*) "'crop'",
        (ANTLR_UINT8*) "'diferentialProfiles'",
        (ANTLR_UINT8*) "'dilate'",
        (ANTLR_UINT8*) "'distanceTransform'",
        (ANTLR_UINT8*) "'erode'",
        (ANTLR_UINT8*) "'gradient'",
        (ANTLR_UINT8*) "'hitmiss'",
        (ANTLR_UINT8*) "'intersection'",
        (ANTLR_UINT8*) "'load'",
        (ANTLR_UINT8*) "'mapping'",
        (ANTLR_UINT8*) "'multiply'",
        (ANTLR_UINT8*) "'negate'",
        (ANTLR_UINT8*) "'normalize'",
        (ANTLR_UINT8*) "'open'",
        (ANTLR_UINT8*) "'segmentation'",
        (ANTLR_UINT8*) "'subtract'",
        (ANTLR_UINT8*) "'treshold'",
        (ANTLR_UINT8*) "'union'",
        (ANTLR_UINT8*) "'without'",
        (ANTLR_UINT8*) "'add'"
       };


/** \brief Name of the grammar file that generated this code
 */
//static const char fileName[] = "C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MorphDSL3Parser::getGrammarFileName()
{
	return "C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g";
}
/** \brief Create a new MorphDSL3Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSL3Parser::MorphDSL3Parser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MorphDSL3Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MorphDSL3Parser::MorphDSL3Parser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MorphDSL3Parser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MorphDSL3ParserTokenNames );
	currentFigure = NULL;
	interval1 = NULL;
	interval2 = NULL;
	marker1 = NULL;
	marker2 = NULL;
	outputFigureName = "";
}


void
MorphDSL3Parser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MorphDSL3Parser::~MorphDSL3Parser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MorphDSL3ParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_load_in_program68_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_load_in_program68( FOLLOW_load_in_program68_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_program71_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000042) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_assignment_in_program71( FOLLOW_assignment_in_program71_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load83_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_load83( FOLLOW_ID_in_load83_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_13_in_load85_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_13_in_load85( FOLLOW_13_in_load85_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_36_in_load87_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_36_in_load87( FOLLOW_36_in_load87_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_load89_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_load89( FOLLOW_10_in_load89_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_9_in_load92_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_9_in_load92( FOLLOW_9_in_load92_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_load94_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_load94( FOLLOW_ID_in_load94_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_9_in_load96_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_9_in_load96( FOLLOW_9_in_load96_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_load98_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_load98( FOLLOW_11_in_load98_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_figurevector_in_assignment112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_figurevector_in_assignment112( FOLLOW_figurevector_in_assignment112_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_13_in_assignment114_bits[]	= { ANTLR_UINT64_LIT(0x00007FEFFE000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_13_in_assignment114( FOLLOW_13_in_assignment114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsBB_in_assignment137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsBB_in_assignment137( FOLLOW_operatorsBB_in_assignment137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsGG_in_assignment160_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsGG_in_assignment160( FOLLOW_operatorsGG_in_assignment160_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsBBGG_in_assignment183_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsBBGG_in_assignment183( FOLLOW_operatorsBBGG_in_assignment183_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsBG_in_assignment205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsBG_in_assignment205( FOLLOW_operatorsBG_in_assignment205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsGB_in_assignment227_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsGB_in_assignment227( FOLLOW_operatorsGB_in_assignment227_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_vector_in_assignment249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_vector_in_assignment249( FOLLOW_vector_in_assignment249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_figurevector281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_figurevector281( FOLLOW_ID_in_figurevector281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_27_in_operatorsBB293_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_27_in_operatorsBB293( FOLLOW_27_in_operatorsBB293_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBB296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBB296( FOLLOW_10_in_operatorsBB296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB298( FOLLOW_ID_in_operatorsBB298_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBB300_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBB300( FOLLOW_11_in_operatorsBB300_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_45_in_operatorsBB313_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_45_in_operatorsBB313( FOLLOW_45_in_operatorsBB313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBB316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBB316( FOLLOW_10_in_operatorsBB316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB318( FOLLOW_ID_in_operatorsBB318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBB320_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBB320( FOLLOW_12_in_operatorsBB320_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB322( FOLLOW_ID_in_operatorsBB322_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBB324_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBB324( FOLLOW_11_in_operatorsBB324_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_35_in_operatorsBB340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_35_in_operatorsBB340( FOLLOW_35_in_operatorsBB340_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBB342_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBB342( FOLLOW_10_in_operatorsBB342_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB344( FOLLOW_ID_in_operatorsBB344_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBB346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBB346( FOLLOW_12_in_operatorsBB346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB348_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB348( FOLLOW_ID_in_operatorsBB348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBB350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBB350( FOLLOW_11_in_operatorsBB350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_46_in_operatorsBB359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_46_in_operatorsBB359( FOLLOW_46_in_operatorsBB359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBB361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBB361( FOLLOW_10_in_operatorsBB361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB363( FOLLOW_ID_in_operatorsBB363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBB365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBB365( FOLLOW_12_in_operatorsBB365_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB367( FOLLOW_ID_in_operatorsBB367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBB369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBB369( FOLLOW_11_in_operatorsBB369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_34_in_operatorsBB383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_34_in_operatorsBB383( FOLLOW_34_in_operatorsBB383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBB385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBB385( FOLLOW_10_in_operatorsBB385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB387( FOLLOW_ID_in_operatorsBB387_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBB390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBB390( FOLLOW_12_in_operatorsBB390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB392( FOLLOW_ID_in_operatorsBB392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBB394_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBB394( FOLLOW_11_in_operatorsBB394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_25_in_operatorsBB399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_25_in_operatorsBB399( FOLLOW_25_in_operatorsBB399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBB401_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBB401( FOLLOW_10_in_operatorsBB401_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBB403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBB403( FOLLOW_ID_in_operatorsBB403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBB405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBB405( FOLLOW_11_in_operatorsBB405_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_39_in_operatorsGG418_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_39_in_operatorsGG418( FOLLOW_39_in_operatorsGG418_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG420( FOLLOW_10_in_operatorsGG420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG422( FOLLOW_ID_in_operatorsGG422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG424( FOLLOW_11_in_operatorsGG424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_40_in_operatorsGG467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_40_in_operatorsGG467( FOLLOW_40_in_operatorsGG467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_38_in_operatorsGG518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_38_in_operatorsGG518( FOLLOW_38_in_operatorsGG518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG520( FOLLOW_10_in_operatorsGG520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG522_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG522( FOLLOW_ID_in_operatorsGG522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG524( FOLLOW_12_in_operatorsGG524_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG526( FOLLOW_DOUBLENUMBER_in_operatorsGG526_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG528( FOLLOW_11_in_operatorsGG528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_38_in_operatorsGG535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_38_in_operatorsGG535( FOLLOW_38_in_operatorsGG535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG537( FOLLOW_10_in_operatorsGG537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGG539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGG539( FOLLOW_DOUBLENUMBER_in_operatorsGG539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG541_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG541( FOLLOW_12_in_operatorsGG541_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG543( FOLLOW_ID_in_operatorsGG543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG545( FOLLOW_11_in_operatorsGG545_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_38_in_operatorsGG552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_38_in_operatorsGG552( FOLLOW_38_in_operatorsGG552_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG554( FOLLOW_10_in_operatorsGG554_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG556( FOLLOW_ID_in_operatorsGG556_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG558_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG558( FOLLOW_12_in_operatorsGG558_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG560( FOLLOW_ID_in_operatorsGG560_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG562( FOLLOW_11_in_operatorsGG562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_28_in_operatorsGG590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_28_in_operatorsGG590( FOLLOW_28_in_operatorsGG590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG592( FOLLOW_10_in_operatorsGG592_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG593( FOLLOW_ID_in_operatorsGG593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG595( FOLLOW_12_in_operatorsGG595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_interval_in_operatorsGG597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_interval_in_operatorsGG597( FOLLOW_interval_in_operatorsGG597_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG599_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG599( FOLLOW_11_in_operatorsGG599_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_43_in_operatorsGG628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_43_in_operatorsGG628( FOLLOW_43_in_operatorsGG628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG630( FOLLOW_10_in_operatorsGG630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG632( FOLLOW_ID_in_operatorsGG632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG634( FOLLOW_12_in_operatorsGG634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG636( FOLLOW_ID_in_operatorsGG636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG638( FOLLOW_11_in_operatorsGG638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_33_in_operatorsGG651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_33_in_operatorsGG651( FOLLOW_33_in_operatorsGG651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG653_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG653( FOLLOW_10_in_operatorsGG653_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_20_in_operatorsGG655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_20_in_operatorsGG655( FOLLOW_20_in_operatorsGG655_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG657( FOLLOW_12_in_operatorsGG657_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG659( FOLLOW_ID_in_operatorsGG659_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG661( FOLLOW_11_in_operatorsGG661_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_33_in_operatorsGG666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_33_in_operatorsGG666( FOLLOW_33_in_operatorsGG666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG668( FOLLOW_10_in_operatorsGG668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_19_in_operatorsGG670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_19_in_operatorsGG670( FOLLOW_19_in_operatorsGG670_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG672( FOLLOW_12_in_operatorsGG672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG674_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG674( FOLLOW_ID_in_operatorsGG674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG676( FOLLOW_11_in_operatorsGG676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_29_in_operatorsGG681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_29_in_operatorsGG681( FOLLOW_29_in_operatorsGG681_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG683_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG683( FOLLOW_10_in_operatorsGG683_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_21_in_operatorsGG685_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_21_in_operatorsGG685( FOLLOW_21_in_operatorsGG685_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG687( FOLLOW_12_in_operatorsGG687_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG689( FOLLOW_ID_in_operatorsGG689_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG691( FOLLOW_12_in_operatorsGG691_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG693( FOLLOW_ID_in_operatorsGG693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG695( FOLLOW_11_in_operatorsGG695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_29_in_operatorsGG700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_29_in_operatorsGG700( FOLLOW_29_in_operatorsGG700_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG702_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG702( FOLLOW_10_in_operatorsGG702_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_15_in_operatorsGG704_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_15_in_operatorsGG704( FOLLOW_15_in_operatorsGG704_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG706( FOLLOW_12_in_operatorsGG706_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG708( FOLLOW_ID_in_operatorsGG708_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG710( FOLLOW_12_in_operatorsGG710_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG712_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG712( FOLLOW_ID_in_operatorsGG712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG714( FOLLOW_11_in_operatorsGG714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_37_in_operatorsGG719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_37_in_operatorsGG719( FOLLOW_37_in_operatorsGG719_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG721_bits[]	= { ANTLR_UINT64_LIT(0x0000000000040000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG721( FOLLOW_10_in_operatorsGG721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_18_in_operatorsGG723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_18_in_operatorsGG723( FOLLOW_18_in_operatorsGG723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG725( FOLLOW_12_in_operatorsGG725_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG727( FOLLOW_ID_in_operatorsGG727_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG729( FOLLOW_12_in_operatorsGG729_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG731( FOLLOW_ID_in_operatorsGG731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG733( FOLLOW_12_in_operatorsGG733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG735( FOLLOW_ID_in_operatorsGG735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG738( FOLLOW_11_in_operatorsGG738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_37_in_operatorsGG743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_37_in_operatorsGG743( FOLLOW_37_in_operatorsGG743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG745_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG745( FOLLOW_10_in_operatorsGG745_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_17_in_operatorsGG747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_17_in_operatorsGG747( FOLLOW_17_in_operatorsGG747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG749( FOLLOW_12_in_operatorsGG749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG751( FOLLOW_ID_in_operatorsGG751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG753_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG753( FOLLOW_12_in_operatorsGG753_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG755_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG755( FOLLOW_ID_in_operatorsGG755_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG757_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG757( FOLLOW_12_in_operatorsGG757_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG759( FOLLOW_ID_in_operatorsGG759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG761_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG761( FOLLOW_11_in_operatorsGG761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_42_in_operatorsGG766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_42_in_operatorsGG766( FOLLOW_42_in_operatorsGG766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG768( FOLLOW_10_in_operatorsGG768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_22_in_operatorsGG770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_22_in_operatorsGG770( FOLLOW_22_in_operatorsGG770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG772_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG772( FOLLOW_12_in_operatorsGG772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG774( FOLLOW_ID_in_operatorsGG774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG776( FOLLOW_12_in_operatorsGG776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG778( FOLLOW_ID_in_operatorsGG778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG780( FOLLOW_11_in_operatorsGG780_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_42_in_operatorsGG785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_42_in_operatorsGG785( FOLLOW_42_in_operatorsGG785_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG787( FOLLOW_10_in_operatorsGG787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_22_in_operatorsGG789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_22_in_operatorsGG789( FOLLOW_22_in_operatorsGG789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG791_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG791( FOLLOW_12_in_operatorsGG791_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG793( FOLLOW_ID_in_operatorsGG793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG795( FOLLOW_12_in_operatorsGG795_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG797( FOLLOW_ID_in_operatorsGG797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG799( FOLLOW_11_in_operatorsGG799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_42_in_operatorsGG804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_42_in_operatorsGG804( FOLLOW_42_in_operatorsGG804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG806_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG806( FOLLOW_10_in_operatorsGG806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_24_in_operatorsGG808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_24_in_operatorsGG808( FOLLOW_24_in_operatorsGG808_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG810( FOLLOW_12_in_operatorsGG810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG813_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG813( FOLLOW_ID_in_operatorsGG813_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG815( FOLLOW_11_in_operatorsGG815_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_42_in_operatorsGG820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_42_in_operatorsGG820( FOLLOW_42_in_operatorsGG820_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGG822_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGG822( FOLLOW_10_in_operatorsGG822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_24_in_operatorsGG824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_24_in_operatorsGG824( FOLLOW_24_in_operatorsGG824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG826( FOLLOW_12_in_operatorsGG826_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_marker_in_operatorsGG828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_marker_in_operatorsGG828( FOLLOW_marker_in_operatorsGG828_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGG831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGG831( FOLLOW_12_in_operatorsGG831_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGG833_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGG833( FOLLOW_ID_in_operatorsGG833_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGG835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGG835( FOLLOW_11_in_operatorsGG835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval847( FOLLOW_DOUBLENUMBER_in_interval847_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_interval849_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_interval849( FOLLOW_12_in_interval849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_interval851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_interval851( FOLLOW_DOUBLENUMBER_in_interval851_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsBOX_in_operatorsBBGG864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsBOX_in_operatorsBBGG864( FOLLOW_operatorsBOX_in_operatorsBBGG864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG870_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG870( FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG870_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_operatorsBBGG876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_operatorsBBGG876( FOLLOW_operatorsAREA_in_operatorsBBGG876_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG882( FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_32_in_operatorsBOX893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_32_in_operatorsBOX893( FOLLOW_32_in_operatorsBOX893_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX896( FOLLOW_10_in_operatorsBOX896_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_16_in_operatorsBOX898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_16_in_operatorsBOX898( FOLLOW_16_in_operatorsBOX898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX900( FOLLOW_10_in_operatorsBOX900_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX902( FOLLOW_DOUBLENUMBER_in_operatorsBOX902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX904( FOLLOW_11_in_operatorsBOX904_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBOX906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBOX906( FOLLOW_12_in_operatorsBOX906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX909_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX909( FOLLOW_ID_in_operatorsBOX909_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX911( FOLLOW_11_in_operatorsBOX911_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_30_in_operatorsBOX923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_30_in_operatorsBOX923( FOLLOW_30_in_operatorsBOX923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX926( FOLLOW_10_in_operatorsBOX926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_16_in_operatorsBOX928_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_16_in_operatorsBOX928( FOLLOW_16_in_operatorsBOX928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX930( FOLLOW_10_in_operatorsBOX930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX932( FOLLOW_DOUBLENUMBER_in_operatorsBOX932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX934_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX934( FOLLOW_11_in_operatorsBOX934_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBOX936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBOX936( FOLLOW_12_in_operatorsBOX936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX939( FOLLOW_ID_in_operatorsBOX939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX941( FOLLOW_11_in_operatorsBOX941_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_41_in_operatorsBOX953_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_41_in_operatorsBOX953( FOLLOW_41_in_operatorsBOX953_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX957_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX957( FOLLOW_10_in_operatorsBOX957_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_16_in_operatorsBOX959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_16_in_operatorsBOX959( FOLLOW_16_in_operatorsBOX959_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX961( FOLLOW_10_in_operatorsBOX961_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX963_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX963( FOLLOW_DOUBLENUMBER_in_operatorsBOX963_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX965( FOLLOW_11_in_operatorsBOX965_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBOX967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBOX967( FOLLOW_12_in_operatorsBOX967_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX970( FOLLOW_ID_in_operatorsBOX970_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX972_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX972( FOLLOW_11_in_operatorsBOX972_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_26_in_operatorsBOX981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_26_in_operatorsBOX981( FOLLOW_26_in_operatorsBOX981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX985( FOLLOW_10_in_operatorsBOX985_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_16_in_operatorsBOX987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_16_in_operatorsBOX987( FOLLOW_16_in_operatorsBOX987_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBOX989_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBOX989( FOLLOW_10_in_operatorsBOX989_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsBOX991_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsBOX991( FOLLOW_DOUBLENUMBER_in_operatorsBOX991_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX993( FOLLOW_11_in_operatorsBOX993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsBOX995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsBOX995( FOLLOW_12_in_operatorsBOX995_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBOX998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBOX998( FOLLOW_ID_in_operatorsBOX998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBOX1000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBOX1000( FOLLOW_11_in_operatorsBOX1000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_32_in_operatorsRECONSTRUCTION1019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_32_in_operatorsRECONSTRUCTION1019( FOLLOW_32_in_operatorsRECONSTRUCTION1019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsRECONSTRUCTION1022_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsRECONSTRUCTION1022( FOLLOW_10_in_operatorsRECONSTRUCTION1022_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_23_in_operatorsRECONSTRUCTION1024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_23_in_operatorsRECONSTRUCTION1024( FOLLOW_23_in_operatorsRECONSTRUCTION1024_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1026( FOLLOW_12_in_operatorsRECONSTRUCTION1026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_marker_in_operatorsRECONSTRUCTION1028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_marker_in_operatorsRECONSTRUCTION1028( FOLLOW_marker_in_operatorsRECONSTRUCTION1028_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1030( FOLLOW_12_in_operatorsRECONSTRUCTION1030_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1033( FOLLOW_ID_in_operatorsRECONSTRUCTION1033_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsRECONSTRUCTION1035_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsRECONSTRUCTION1035( FOLLOW_11_in_operatorsRECONSTRUCTION1035_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_30_in_operatorsRECONSTRUCTION1047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_30_in_operatorsRECONSTRUCTION1047( FOLLOW_30_in_operatorsRECONSTRUCTION1047_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsRECONSTRUCTION1050_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsRECONSTRUCTION1050( FOLLOW_10_in_operatorsRECONSTRUCTION1050_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_23_in_operatorsRECONSTRUCTION1052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_23_in_operatorsRECONSTRUCTION1052( FOLLOW_23_in_operatorsRECONSTRUCTION1052_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1054( FOLLOW_12_in_operatorsRECONSTRUCTION1054_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_marker_in_operatorsRECONSTRUCTION1056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_marker_in_operatorsRECONSTRUCTION1056( FOLLOW_marker_in_operatorsRECONSTRUCTION1056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1058( FOLLOW_12_in_operatorsRECONSTRUCTION1058_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1061_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1061( FOLLOW_ID_in_operatorsRECONSTRUCTION1061_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsRECONSTRUCTION1063_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsRECONSTRUCTION1063( FOLLOW_11_in_operatorsRECONSTRUCTION1063_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_41_in_operatorsRECONSTRUCTION1075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_41_in_operatorsRECONSTRUCTION1075( FOLLOW_41_in_operatorsRECONSTRUCTION1075_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsRECONSTRUCTION1079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsRECONSTRUCTION1079( FOLLOW_10_in_operatorsRECONSTRUCTION1079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_23_in_operatorsRECONSTRUCTION1081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_23_in_operatorsRECONSTRUCTION1081( FOLLOW_23_in_operatorsRECONSTRUCTION1081_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1083_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1083( FOLLOW_12_in_operatorsRECONSTRUCTION1083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_16_in_operatorsRECONSTRUCTION1086_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_16_in_operatorsRECONSTRUCTION1086( FOLLOW_16_in_operatorsRECONSTRUCTION1086_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsRECONSTRUCTION1088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsRECONSTRUCTION1088( FOLLOW_10_in_operatorsRECONSTRUCTION1088_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1090_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1090( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1090_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsRECONSTRUCTION1092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsRECONSTRUCTION1092( FOLLOW_11_in_operatorsRECONSTRUCTION1092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1094_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1094( FOLLOW_12_in_operatorsRECONSTRUCTION1094_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1096_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1096( FOLLOW_ID_in_operatorsRECONSTRUCTION1096_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsRECONSTRUCTION1098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsRECONSTRUCTION1098( FOLLOW_11_in_operatorsRECONSTRUCTION1098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_26_in_operatorsRECONSTRUCTION1110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_26_in_operatorsRECONSTRUCTION1110( FOLLOW_26_in_operatorsRECONSTRUCTION1110_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsRECONSTRUCTION1114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsRECONSTRUCTION1114( FOLLOW_10_in_operatorsRECONSTRUCTION1114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_23_in_operatorsRECONSTRUCTION1116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_23_in_operatorsRECONSTRUCTION1116( FOLLOW_23_in_operatorsRECONSTRUCTION1116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1118( FOLLOW_12_in_operatorsRECONSTRUCTION1118_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_16_in_operatorsRECONSTRUCTION1121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_16_in_operatorsRECONSTRUCTION1121( FOLLOW_16_in_operatorsRECONSTRUCTION1121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsRECONSTRUCTION1123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsRECONSTRUCTION1123( FOLLOW_10_in_operatorsRECONSTRUCTION1123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1125( FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsRECONSTRUCTION1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsRECONSTRUCTION1127( FOLLOW_11_in_operatorsRECONSTRUCTION1127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsRECONSTRUCTION1129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsRECONSTRUCTION1129( FOLLOW_12_in_operatorsRECONSTRUCTION1129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsRECONSTRUCTION1132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsRECONSTRUCTION1132( FOLLOW_ID_in_operatorsRECONSTRUCTION1132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsRECONSTRUCTION1134_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsRECONSTRUCTION1134( FOLLOW_11_in_operatorsRECONSTRUCTION1134_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_41_in_operatorsAREA1157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_41_in_operatorsAREA1157( FOLLOW_41_in_operatorsAREA1157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsAREA1161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsAREA1161( FOLLOW_10_in_operatorsAREA1161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_14_in_operatorsAREA1163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_14_in_operatorsAREA1163( FOLLOW_14_in_operatorsAREA1163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsAREA1165_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsAREA1165( FOLLOW_12_in_operatorsAREA1165_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1167( FOLLOW_DOUBLENUMBER_in_operatorsAREA1167_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsAREA1169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsAREA1169( FOLLOW_12_in_operatorsAREA1169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1172( FOLLOW_ID_in_operatorsAREA1172_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsAREA1174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsAREA1174( FOLLOW_11_in_operatorsAREA1174_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_26_in_operatorsAREA1185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_26_in_operatorsAREA1185( FOLLOW_26_in_operatorsAREA1185_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsAREA1189_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsAREA1189( FOLLOW_10_in_operatorsAREA1189_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_14_in_operatorsAREA1191_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_14_in_operatorsAREA1191( FOLLOW_14_in_operatorsAREA1191_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsAREA1193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsAREA1193( FOLLOW_12_in_operatorsAREA1193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsAREA1195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsAREA1195( FOLLOW_DOUBLENUMBER_in_operatorsAREA1195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsAREA1197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsAREA1197( FOLLOW_12_in_operatorsAREA1197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsAREA1200_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsAREA1200( FOLLOW_ID_in_operatorsAREA1200_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsAREA1202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsAREA1202( FOLLOW_11_in_operatorsAREA1202_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_41_in_operatorsATTRIBUTE1224_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_41_in_operatorsATTRIBUTE1224( FOLLOW_41_in_operatorsATTRIBUTE1224_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsATTRIBUTE1228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsATTRIBUTE1228( FOLLOW_10_in_operatorsATTRIBUTE1228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1230( FOLLOW_ID_in_operatorsATTRIBUTE1230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsATTRIBUTE1232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsATTRIBUTE1232( FOLLOW_12_in_operatorsATTRIBUTE1232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1235( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1235_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsATTRIBUTE1238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsATTRIBUTE1238( FOLLOW_12_in_operatorsATTRIBUTE1238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1240( FOLLOW_ID_in_operatorsATTRIBUTE1240_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsATTRIBUTE1242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsATTRIBUTE1242( FOLLOW_11_in_operatorsATTRIBUTE1242_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_26_in_operatorsATTRIBUTE1254_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_26_in_operatorsATTRIBUTE1254( FOLLOW_26_in_operatorsATTRIBUTE1254_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsATTRIBUTE1258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsATTRIBUTE1258( FOLLOW_10_in_operatorsATTRIBUTE1258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1260_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1260( FOLLOW_ID_in_operatorsATTRIBUTE1260_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsATTRIBUTE1262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsATTRIBUTE1262( FOLLOW_12_in_operatorsATTRIBUTE1262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1265( FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1265_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsATTRIBUTE1268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsATTRIBUTE1268( FOLLOW_12_in_operatorsATTRIBUTE1268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsATTRIBUTE1271_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsATTRIBUTE1271( FOLLOW_ID_in_operatorsATTRIBUTE1271_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsATTRIBUTE1273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsATTRIBUTE1273( FOLLOW_11_in_operatorsATTRIBUTE1273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_31_in_operatorsBG1291_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_31_in_operatorsBG1291( FOLLOW_31_in_operatorsBG1291_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsBG1294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsBG1294( FOLLOW_10_in_operatorsBG1294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsBG1296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsBG1296( FOLLOW_ID_in_operatorsBG1296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsBG1298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsBG1298( FOLLOW_11_in_operatorsBG1298_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_44_in_operatorsGB1317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_44_in_operatorsGB1317( FOLLOW_44_in_operatorsGB1317_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_operatorsGB1320_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_operatorsGB1320( FOLLOW_10_in_operatorsGB1320_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_operatorsGB1322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_operatorsGB1322( FOLLOW_DOUBLENUMBER_in_operatorsGB1322_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_operatorsGB1324_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_operatorsGB1324( FOLLOW_12_in_operatorsGB1324_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_operatorsGB1326_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_operatorsGB1326( FOLLOW_ID_in_operatorsGB1326_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_operatorsGB1328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_operatorsGB1328( FOLLOW_11_in_operatorsGB1328_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1367( FOLLOW_DOUBLENUMBER_in_vector1367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_vector1370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_vector1370( FOLLOW_12_in_vector1370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_DOUBLENUMBER_in_vector1376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_DOUBLENUMBER_in_vector1376( FOLLOW_DOUBLENUMBER_in_vector1376_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_42_in_synpred25_MorphDSL3766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_42_in_synpred25_MorphDSL3766( FOLLOW_42_in_synpred25_MorphDSL3766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_synpred25_MorphDSL3768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_synpred25_MorphDSL3768( FOLLOW_10_in_synpred25_MorphDSL3768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_22_in_synpred25_MorphDSL3770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_22_in_synpred25_MorphDSL3770( FOLLOW_22_in_synpred25_MorphDSL3770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_synpred25_MorphDSL3772_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_synpred25_MorphDSL3772( FOLLOW_12_in_synpred25_MorphDSL3772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred25_MorphDSL3774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_synpred25_MorphDSL3774( FOLLOW_ID_in_synpred25_MorphDSL3774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_synpred25_MorphDSL3776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_synpred25_MorphDSL3776( FOLLOW_12_in_synpred25_MorphDSL3776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred25_MorphDSL3778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_synpred25_MorphDSL3778( FOLLOW_ID_in_synpred25_MorphDSL3778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_synpred25_MorphDSL3780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_synpred25_MorphDSL3780( FOLLOW_11_in_synpred25_MorphDSL3780_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_42_in_synpred26_MorphDSL3785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_42_in_synpred26_MorphDSL3785( FOLLOW_42_in_synpred26_MorphDSL3785_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_10_in_synpred26_MorphDSL3787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_10_in_synpred26_MorphDSL3787( FOLLOW_10_in_synpred26_MorphDSL3787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_22_in_synpred26_MorphDSL3789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_22_in_synpred26_MorphDSL3789( FOLLOW_22_in_synpred26_MorphDSL3789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_synpred26_MorphDSL3791_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_synpred26_MorphDSL3791( FOLLOW_12_in_synpred26_MorphDSL3791_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred26_MorphDSL3793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_synpred26_MorphDSL3793( FOLLOW_ID_in_synpred26_MorphDSL3793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_12_in_synpred26_MorphDSL3795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_12_in_synpred26_MorphDSL3795( FOLLOW_12_in_synpred26_MorphDSL3795_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_ID_in_synpred26_MorphDSL3797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_ID_in_synpred26_MorphDSL3797( FOLLOW_ID_in_synpred26_MorphDSL3797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_11_in_synpred26_MorphDSL3799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_11_in_synpred26_MorphDSL3799( FOLLOW_11_in_synpred26_MorphDSL3799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MorphDSL3Parser  */
static	ANTLR_BITWORD FOLLOW_operatorsAREA_in_synpred30_MorphDSL3876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MorphDSL3ParserImplTraits::BitsetListType FOLLOW_operatorsAREA_in_synpred30_MorphDSL3876( FOLLOW_operatorsAREA_in_synpred30_MorphDSL3876_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:43:1: program : load ( assignment )+ ;
 */
void
MorphDSL3Parser::program()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:43:9: ( load ( assignment )+ )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:44:2: load ( assignment )+
        {
            this->followPush(FOLLOW_load_in_program68);
            load();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:45:2: ( assignment )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA1_0 = this->LA(1);
            	    if ( (LA1_0 == ID))
            	    {
            	        alt1=1;
            	    }

            	}
            	switch (alt1)
            	{
            	    case 1:
            	        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:45:2: assignment
            	        {
            	            this->followPush(FOLLOW_assignment_in_program71);
            	            assignment();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MorphDSL3ParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start load
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:48:1: load : ID '=' 'load' '(' '\"' ID '\"' ')' ;
 */
void
MorphDSL3Parser::load()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
		const CommonTokenType* ID2;
    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:48:6: ( ID '=' 'load' '(' '\"' ID '\"' ')' )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:49:2: ID '=' 'load' '(' '\"' ID '\"' ')'
        {
			currentFigure =
				this->matchToken(ID, &FOLLOW_ID_in_load83);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(13, &FOLLOW_13_in_load85);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(36, &FOLLOW_36_in_load87);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(10, &FOLLOW_10_in_load89);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(9, &FOLLOW_9_in_load92);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

			ID2 = 
             this->matchToken(ID, &FOLLOW_ID_in_load94);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(9, &FOLLOW_9_in_load96);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(11, &FOLLOW_11_in_load98);
            if  (this->hasException())
            {
                goto ruleloadEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

				cout<<"LOADING"<<endl;

				stringstream fLast;//create a stringstream
				fLast << ID2->getText();
				cout<<"<--  "<<fLast.str()<<endl;

				int firstLetter = fLast.str().find_last_of("/\\")+1;
				int length = fLast.str().find_last_of(".")-firstLetter;
				outputFigureName = fLast.str().substr(firstLetter,length);
				//cout<<outputFigureName<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout<<"-->  "<<fNew.str()<<endl;

                cout<<"---END"<<endl;

				morphInterface.LoadImg(fLast.str(), img);
				morphInterface.StoreImg(fNew.str(), img);

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloadEx; /* Prevent compiler warnings */
    ruleloadEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end load */

/**
 * $ANTLR start assignment
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:52:1: assignment : figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector ) ;
 */
void
MorphDSL3Parser::assignment()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:52:12: ( figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector ) )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:53:2: figurevector '=' ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector )
        {
            this->followPush(FOLLOW_figurevector_in_assignment112);
            figurevector();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(13, &FOLLOW_13_in_assignment114);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:54:19: ( operatorsBB | operatorsGG | operatorsBBGG | operatorsBG | operatorsGB | vector )
            {
                int alt2=6;
                switch ( this->LA(1) )
                {
                case 25:
                case 27:
                case 34:
                case 35:
                case 45:
                case 46:
                	{
                		alt2=1;
                	}
                    break;
                case 28:
                case 29:
                case 33:
                case 37:
                case 38:
                case 39:
                case 40:
                case 42:
                case 43:
                	{
                		alt2=2;
                	}
                    break;
                case EOF:
                case ID:
                case 26:
                case 30:
                case 32:
                case 41:
                	{
                		alt2=3;
                	}
                    break;
                case 31:
                	{
                		alt2=4;
                	}
                    break;
                case 44:
                	{
                		alt2=5;
                	}
                    break;
                case DOUBLENUMBER:
                	{
                		alt2=6;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto ruleassignmentEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:54:21: operatorsBB
            	    {
            	        this->followPush(FOLLOW_operatorsBB_in_assignment137);
            	        operatorsBB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:55:21: operatorsGG
            	    {
            	        this->followPush(FOLLOW_operatorsGG_in_assignment160);
            	        operatorsGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:56:21: operatorsBBGG
            	    {
            	        this->followPush(FOLLOW_operatorsBBGG_in_assignment183);
            	        operatorsBBGG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:57:21: operatorsBG
            	    {
            	        this->followPush(FOLLOW_operatorsBG_in_assignment205);
            	        operatorsBG();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:58:21: operatorsGB
            	    {
            	        this->followPush(FOLLOW_operatorsGB_in_assignment227);
            	        operatorsGB();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:59:21: vector
            	    {
            	        this->followPush(FOLLOW_vector_in_assignment249);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start figurevector
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:63:1: figurevector : ID ;
 */
void
MorphDSL3Parser::figurevector()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:63:14: ( ID )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:64:2: ID
        {
			currentFigure =  
				this->matchToken(ID, &FOLLOW_ID_in_figurevector281);

            if  (this->hasException())
            {
                goto rulefigurevectorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefigurevectorEx; /* Prevent compiler warnings */
    rulefigurevectorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end figurevector */

/**
 * $ANTLR start operatorsBB
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:67:1: operatorsBB : ( 'complement' '(' ID ')' | 'union' '(' ID ',' ID ')' | 'intersection' '(' ID ',' ID ')' | 'without' '(' ID ',' ID ')' | 'hitmiss' '(' ID ',' ID ')' | 'boundary' '(' ID ')' );
 */
void
MorphDSL3Parser::operatorsBB()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:68:2: ( 'complement' '(' ID ')' | 'union' '(' ID ',' ID ')' | 'intersection' '(' ID ',' ID ')' | 'without' '(' ID ',' ID ')' | 'hitmiss' '(' ID ',' ID ')' | 'boundary' '(' ID ')' )

            ANTLR_UINT32 alt3;

            alt3=6;

            switch ( this->LA(1) )
            {
            case 27:
            	{
            		alt3=1;
            	}
                break;
            case 45:
            	{
            		alt3=2;
            	}
                break;
            case 35:
            	{
            		alt3=3;
            	}
                break;
            case 46:
            	{
            		alt3=4;
            	}
                break;
            case 34:
            	{
            		alt3=5;
            	}
                break;
            case 25:
            	{
            		alt3=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto ruleoperatorsBBEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:68:4: 'complement' '(' ID ')'
        	    {
					const CommonTokenType* ID2;

        	         this->matchToken(27, &FOLLOW_27_in_operatorsBB293);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBB296);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB298);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBB300);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"COMPLEMENT"<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.complement(fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:69:4: 'union' '(' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(45, &FOLLOW_45_in_operatorsBB313);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBB316);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB318);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBB320);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB322);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBB324);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"UNION"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.unionBB(fFirst.str(), fLast.str(), fNew.str());
					cout<<"---END"<<endl;
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:70:4: 'intersection' '(' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(35, &FOLLOW_35_in_operatorsBB340);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBB342);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 	
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB344);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					
        	         this->matchToken(12, &FOLLOW_12_in_operatorsBB346);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB348);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBB350);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"INTERSECTION"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.intersection(fFirst.str(), fLast.str(), fNew.str());
					cout<<"---END"<<endl;
        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:71:4: 'without' '(' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(46, &FOLLOW_46_in_operatorsBB359);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBB361);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =	
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB363);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBB365);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB367);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBB369);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


					cout<<"WITHOUT"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.without(fFirst.str(), fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:73:4: 'hitmiss' '(' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(34, &FOLLOW_34_in_operatorsBB383);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBB385);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =	
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB387);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBB390);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB392);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBB394);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"HITMISS"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.hitmiss(fFirst.str(), fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:74:4: 'boundary' '(' ID ')'
        	    {
					const CommonTokenType* ID1;

					this->matchToken(25, &FOLLOW_25_in_operatorsBB399);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBB401);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBB403);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBB405);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"BOUNDARY"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.boundary(fFirst.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBEx; /* Prevent compiler warnings */
    ruleoperatorsBBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBB */

/**
 * $ANTLR start operatorsGG
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:77:1: operatorsGG : ( 'negate' '(' ID ')' | 'normalize' | 'multiply' '(' ID ',' DOUBLENUMBER ')' | 'multiply' '(' DOUBLENUMBER ',' ID ')' | 'multiply' '(' ID ',' ID ')' | 'crop' '(' ID ',' interval ')' | 'subtract' '(' ID ',' ID ')' | 'gradient' '(' 'INTERNAL' ',' ID ')' | 'gradient' '(' 'EXTERNAL' ',' ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' ID ',' ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' ID ',' ID ')' | 'mapping' '(' 'DMP' ',' ID ',' ID ',' ID ')' | 'mapping' '(' 'DAP' ',' ID ',' ID ',' ID ')' | 'segmentation' '(' 'MSLS' ',' ID ',' ID ')' | 'segmentation' '(' 'MSLS' ',' ID ',' ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' marker ',' ID ')' );
 */
void
MorphDSL3Parser::operatorsGG()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:78:2: ( 'negate' '(' ID ')' | 'normalize' | 'multiply' '(' ID ',' DOUBLENUMBER ')' | 'multiply' '(' DOUBLENUMBER ',' ID ')' | 'multiply' '(' ID ',' ID ')' | 'crop' '(' ID ',' interval ')' | 'subtract' '(' ID ',' ID ')' | 'gradient' '(' 'INTERNAL' ',' ID ')' | 'gradient' '(' 'EXTERNAL' ',' ID ')' | 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' ID ',' ID ')' | 'diferentialProfiles' '(' 'ATTRIBUTE' ',' ID ',' ID ')' | 'mapping' '(' 'DMP' ',' ID ',' ID ',' ID ')' | 'mapping' '(' 'DAP' ',' ID ',' ID ',' ID ')' | 'segmentation' '(' 'MSLS' ',' ID ',' ID ')' | 'segmentation' '(' 'MSLS' ',' ID ',' ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' ID ')' | 'segmentation' '(' 'WATHERSHADE' ',' marker ',' ID ')' )

            ANTLR_UINT32 alt4;

            alt4=17;

            switch ( this->LA(1) )
            {
            case 39:
            	{
            		alt4=1;
            	}
                break;
            case 40:
            	{
            		alt4=2;
            	}
                break;
            case 38:
            	{
            		{
            		    int LA4_3 = this->LA(2);
            		    if ( (LA4_3 == 10))
            		    {
            		        {
            		            int LA4_10 = this->LA(3);
            		            if ( (LA4_10 == ID))
            		            {
            		                {
            		                    int LA4_15 = this->LA(4);
            		                    if ( (LA4_15 == 12))
            		                    {
            		                        {
            		                            int LA4_25 = this->LA(5);
            		                            if ( (LA4_25 == DOUBLENUMBER))
            		                            {
            		                                alt4=3;
            		                            }
            		                            else if ( (LA4_25 == ID))
            		                            {
            		                                alt4=5;
            		                            }
            		                            else
            		                            {
            		                                if (this->get_backtracking()>0)
            		                                {
            		                                    this->set_failedflag( true );
            		                                    return ;
            		                                }


            		                                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                ex->set_decisionNum( 4 );
            		                                ex->set_state( 25 );


            		                                goto ruleoperatorsGGEx;

            		                            }
            		                        }
            		                    }
            		                    else
            		                    {
            		                        if (this->get_backtracking()>0)
            		                        {
            		                            this->set_failedflag( true );
            		                            return ;
            		                        }


            		                        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                        ex->set_decisionNum( 4 );
            		                        ex->set_state( 15 );


            		                        goto ruleoperatorsGGEx;

            		                    }
            		                }
            		            }
            		            else if ( (LA4_10 == DOUBLENUMBER))
            		            {
            		                alt4=4;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 4 );
            		                ex->set_state( 10 );


            		                goto ruleoperatorsGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 3 );


            		        goto ruleoperatorsGGEx;

            		    }
            		}
            	}
                break;
            case 28:
            	{
            		alt4=6;
            	}
                break;
            case 43:
            	{
            		alt4=7;
            	}
                break;
            case 33:
            	{
            		{
            		    int LA4_6 = this->LA(2);
            		    if ( (LA4_6 == 10))
            		    {
            		        {
            		            int LA4_11 = this->LA(3);
            		            if ( (LA4_11 == 20))
            		            {
            		                alt4=8;
            		            }
            		            else if ( (LA4_11 == 19))
            		            {
            		                alt4=9;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 4 );
            		                ex->set_state( 11 );


            		                goto ruleoperatorsGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 6 );


            		        goto ruleoperatorsGGEx;

            		    }
            		}
            	}
                break;
            case 29:
            	{
            		{
            		    int LA4_7 = this->LA(2);
            		    if ( (LA4_7 == 10))
            		    {
            		        {
            		            int LA4_12 = this->LA(3);
            		            if ( (LA4_12 == 21))
            		            {
            		                alt4=10;
            		            }
            		            else if ( (LA4_12 == 15))
            		            {
            		                alt4=11;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 4 );
            		                ex->set_state( 12 );


            		                goto ruleoperatorsGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 7 );


            		        goto ruleoperatorsGGEx;

            		    }
            		}
            	}
                break;
            case 37:
            	{
            		{
            		    int LA4_8 = this->LA(2);
            		    if ( (LA4_8 == 10))
            		    {
            		        {
            		            int LA4_13 = this->LA(3);
            		            if ( (LA4_13 == 18))
            		            {
            		                alt4=12;
            		            }
            		            else if ( (LA4_13 == 17))
            		            {
            		                alt4=13;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 4 );
            		                ex->set_state( 13 );


            		                goto ruleoperatorsGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 8 );


            		        goto ruleoperatorsGGEx;

            		    }
            		}
            	}
                break;
            case 42:
            	{
            		{
            		    int LA4_9 = this->LA(2);
            		    if ( (LA4_9 == 10))
            		    {
            		        {
            		            int LA4_14 = this->LA(3);
            		            if ( (LA4_14 == 22))
            		            {
            		                {
            		                    int LA4_23 = this->LA(4);
            		                    if ( (LA4_23 == 12))
            		                    {
            		                        {
            		                            int LA4_26 = this->LA(5);
            		                            if ( (LA4_26 == ID))
            		                            {
            		                                {
            		                                    int LA4_30 = this->LA(6);
            		                                    if ( (LA4_30 == 12))
            		                                    {
            		                                        {
            		                                            int LA4_33 = this->LA(7);
            		                                            if ( (LA4_33 == ID))
            		                                            {
            		                                                {
            		                                                    int LA4_35 = this->LA(8);
            		                                                    if ( (LA4_35 == 11))
            		                                                    {
            		                                                        {
            		                                                            int LA4_36 = this->LA(9);
            		                                                            if ( (this->msynpred( antlr3::ClassForwarder<synpred25_MorphDSL3>() )))
            		                                                            {
            		                                                                alt4=14;
            		                                                            }
            		                                                            else if ( (this->msynpred( antlr3::ClassForwarder<synpred26_MorphDSL3>() )))
            		                                                            {
            		                                                                alt4=15;
            		                                                            }
            		                                                            else
            		                                                            {
            		                                                                if (this->get_backtracking()>0)
            		                                                                {
            		                                                                    this->set_failedflag( true );
            		                                                                    return ;
            		                                                                }


            		                                                                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                                                ex->set_decisionNum( 4 );
            		                                                                ex->set_state( 36 );


            		                                                                goto ruleoperatorsGGEx;

            		                                                            }
            		                                                        }
            		                                                    }
            		                                                    else
            		                                                    {
            		                                                        if (this->get_backtracking()>0)
            		                                                        {
            		                                                            this->set_failedflag( true );
            		                                                            return ;
            		                                                        }


            		                                                        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                                        ex->set_decisionNum( 4 );
            		                                                        ex->set_state( 35 );


            		                                                        goto ruleoperatorsGGEx;

            		                                                    }
            		                                                }
            		                                            }
            		                                            else
            		                                            {
            		                                                if (this->get_backtracking()>0)
            		                                                {
            		                                                    this->set_failedflag( true );
            		                                                    return ;
            		                                                }


            		                                                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                                ex->set_decisionNum( 4 );
            		                                                ex->set_state( 33 );


            		                                                goto ruleoperatorsGGEx;

            		                                            }
            		                                        }
            		                                    }
            		                                    else
            		                                    {
            		                                        if (this->get_backtracking()>0)
            		                                        {
            		                                            this->set_failedflag( true );
            		                                            return ;
            		                                        }


            		                                        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                        ex->set_decisionNum( 4 );
            		                                        ex->set_state( 30 );


            		                                        goto ruleoperatorsGGEx;

            		                                    }
            		                                }
            		                            }
            		                            else
            		                            {
            		                                if (this->get_backtracking()>0)
            		                                {
            		                                    this->set_failedflag( true );
            		                                    return ;
            		                                }


            		                                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                ex->set_decisionNum( 4 );
            		                                ex->set_state( 26 );


            		                                goto ruleoperatorsGGEx;

            		                            }
            		                        }
            		                    }
            		                    else
            		                    {
            		                        if (this->get_backtracking()>0)
            		                        {
            		                            this->set_failedflag( true );
            		                            return ;
            		                        }


            		                        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                        ex->set_decisionNum( 4 );
            		                        ex->set_state( 23 );


            		                        goto ruleoperatorsGGEx;

            		                    }
            		                }
            		            }
            		            else if ( (LA4_14 == 24))
            		            {
            		                {
            		                    int LA4_24 = this->LA(4);
            		                    if ( (LA4_24 == 12))
            		                    {
            		                        {
            		                            int LA4_27 = this->LA(5);
            		                            if ( (LA4_27 == ID))
            		                            {
            		                                {
            		                                    int LA4_31 = this->LA(6);
            		                                    if ( (LA4_31 == 11))
            		                                    {
            		                                        alt4=16;
            		                                    }
            		                                    else if ( (LA4_31 == 12))
            		                                    {
            		                                        alt4=17;
            		                                    }
            		                                    else
            		                                    {
            		                                        if (this->get_backtracking()>0)
            		                                        {
            		                                            this->set_failedflag( true );
            		                                            return ;
            		                                        }


            		                                        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                        ex->set_decisionNum( 4 );
            		                                        ex->set_state( 31 );


            		                                        goto ruleoperatorsGGEx;

            		                                    }
            		                                }
            		                            }
            		                            else if ( (LA4_27 == DOUBLENUMBER))
            		                            {
            		                                alt4=17;
            		                            }
            		                            else
            		                            {
            		                                if (this->get_backtracking()>0)
            		                                {
            		                                    this->set_failedflag( true );
            		                                    return ;
            		                                }


            		                                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                                ex->set_decisionNum( 4 );
            		                                ex->set_state( 27 );


            		                                goto ruleoperatorsGGEx;

            		                            }
            		                        }
            		                    }
            		                    else
            		                    {
            		                        if (this->get_backtracking()>0)
            		                        {
            		                            this->set_failedflag( true );
            		                            return ;
            		                        }


            		                        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                        ex->set_decisionNum( 4 );
            		                        ex->set_state( 24 );


            		                        goto ruleoperatorsGGEx;

            		                    }
            		                }
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 4 );
            		                ex->set_state( 14 );


            		                goto ruleoperatorsGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 9 );


            		        goto ruleoperatorsGGEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleoperatorsGGEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:78:4: 'negate' '(' ID ')'
        	    {
					const CommonTokenType* ID2;

        	         this->matchToken(39, &FOLLOW_39_in_operatorsGG418);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG420);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG422);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG424);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

				cout<<"NEGATE"<<endl;

				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << ID2->getText()[0]-96;
				fLast << ".bmp";
				cout<<"<--  "<<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout <<"-->  " <<fNew.str()<<endl;

                // morphInterface.negate("maribor1.bmp", "maribor2.bmp");
				morphInterface.negate(fLast.str(), fNew.str());
                cout<<"---END"<<endl;

        	    }

        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:79:4: 'normalize'
        	    {
        	         this->matchToken(40, &FOLLOW_40_in_operatorsGG467);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

				cout<<"NORMALIZE"<<endl;

				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << currentFigure->getText()[0]-96-1;
				fLast << ".bmp";
				cout<<"<--  "<<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout <<"-->  " <<fNew.str()<<endl;

				//when 5 pics created
				// d = open(AREA, 250, c)
				// morphInterface.openAREA(250, "maribor1.bmp", "maribor2.bmp");
				morphInterface.normalize(fLast.str(), fNew.str());
				cout<<"---END"<<endl;

        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:80:4: 'multiply' '(' ID ',' DOUBLENUMBER ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(38, &FOLLOW_38_in_operatorsGG518);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG520);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG522);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG524);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG526);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG528);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"MULTIPLY"<<endl;

					stringstream nss;//create a stringstream
					nss << ID2->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID1->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.multiply(fLast.str(), number, fNew.str());
					cout<<"---END"<<endl;


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:81:4: 'multiply' '(' DOUBLENUMBER ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(38, &FOLLOW_38_in_operatorsGG535);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG537);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGG539);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG541);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG543);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG545);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"MULTYPLY"<<endl;

					stringstream nss;//create a stringstream
					nss << ID1->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.multiply(number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:82:4: 'multiply' '(' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(38, &FOLLOW_38_in_operatorsGG552);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG554);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG556);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG558);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG560);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG562);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


					cout<<"MULTYPLY"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.multiply(fFirst.str(), fLast.str(), fNew.str());
					cout<<"---END"<<endl;


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:83:26: 'crop' '(' ID ',' interval ')'
        	    {
					const CommonTokenType* ID1;

					this->matchToken(28, &FOLLOW_28_in_operatorsGG590);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG592);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					 ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG593);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG595);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_interval_in_operatorsGG597);
        	        interval();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG599);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"CROP"<<endl;

					stringstream nss;//create a stringstream
					nss << interval1->getText();
					int number1; 
					istringstream(nss.str()) >> number1;
					cout<<"<--  "<<number1<<endl;

					stringstream nss2;//create a stringstream
					nss2 << interval2->getText();
					int number2; 
					istringstream(nss2.str()) >> number2;
					cout<<"<--  "<<number2<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID1->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.crop(fLast.str(), number1, number2, fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 7:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:84:4: 'subtract' '(' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(43, &FOLLOW_43_in_operatorsGG628);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG630);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG632);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG634);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG636);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG638);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

				cout<<"SUBTRACT"<<endl;

				stringstream fFirst;//create a stringstream
				fFirst << "./";
				fFirst << outputFigureName;
				fFirst << ID1->getText()[0]-96;
				fFirst << ".bmp";
				cout<<"<--  "<<fFirst.str()<<endl;

				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << ID2->getText()[0]-96;
				fLast << ".bmp";
				cout<<"<--  "<<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout<<"-->  "<<fNew.str()<<endl;

				//when 5 pics created
				morphInterface.subtract(fFirst.str(), fLast.str(), fNew.str());
                cout<<"---END"<<endl;


        	    }
        	    break;
        	case 8:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:86:4: 'gradient' '(' 'INTERNAL' ',' ID ')'
        	    {
					const CommonTokenType* ID1;

					this->matchToken(33, &FOLLOW_33_in_operatorsGG651);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG653);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(20, &FOLLOW_20_in_operatorsGG655);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG657);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG659);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG661);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"GRADIENT INTERNAL"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					//when 5 pics created
					morphInterface.gradientINTERNAL(fFirst.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 9:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:87:4: 'gradient' '(' 'EXTERNAL' ',' ID ')'
        	    {
					const CommonTokenType* ID1;

					this->matchToken(33, &FOLLOW_33_in_operatorsGG666);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG668);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(19, &FOLLOW_19_in_operatorsGG670);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG672);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG674);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG676);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"GRADIENT EXTERNAL"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					//when 5 pics created
					morphInterface.gradientEXTERNAL(fFirst.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 10:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:88:4: 'diferentialProfiles' '(' 'MORPHOLOGICAL' ',' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

        	         this->matchToken(29, &FOLLOW_29_in_operatorsGG681);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG683);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(21, &FOLLOW_21_in_operatorsGG685);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG687);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG689);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG691);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG693);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG695);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"DIF. PROFILES - MORPHOLOGICAL"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID2->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << ID1->getText()[0]-96;
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					//fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					std::map<string,std::vector<double>>::iterator it;
					it=vect.find(fLast.str());

					morphInterface.diferentialProfilesMORPHOLOGICAL(fFirst.str(), it->second, fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 11:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:89:4: 'diferentialProfiles' '(' 'ATTRIBUTE' ',' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

        	         this->matchToken(29, &FOLLOW_29_in_operatorsGG700);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG702);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(15, &FOLLOW_15_in_operatorsGG704);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG706);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG708);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG710);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG712);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG714);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"DIF. PROFILES - ATTRIBUTE"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID2->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << ID1->getText()[0]-96;
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					//fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					std::map<string,std::vector<double>>::iterator it;
					it=vect.find(fLast.str());

					morphInterface.diferentialProfilesATTRIBUTE(fFirst.str(), it->second, fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 12:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:90:4: 'mapping' '(' 'DMP' ',' ID ',' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;
					//const CommonTokenType* ID3;

					this->matchToken(37, &FOLLOW_37_in_operatorsGG719);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG721);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(18, &FOLLOW_18_in_operatorsGG723);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG725);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG727);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG729);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG731);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					/*
        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG733);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
					
					ID3 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG735);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
					*/

        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG738);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"MAPPING - DMP"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID2->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << ID1->getText()[0]-96;
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					//fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					std::map<string,std::vector<double>>::iterator it;
					it=vect.find(fLast.str());

					morphInterface.mappingDMP(fFirst.str(), it->second, fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 13:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:91:4: 'mapping' '(' 'DAP' ',' ID ',' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;
					//const CommonTokenType* ID3;

					this->matchToken(37, &FOLLOW_37_in_operatorsGG743);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG745);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(17, &FOLLOW_17_in_operatorsGG747);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG749);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG751);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG753);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG755);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					/*
        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG757);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID3 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG759);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
					*/

        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG761);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"MAPPING - DAP"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID2->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << ID1->getText()[0]-96;
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					//fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					std::map<string,std::vector<double>>::iterator it;
					it=vect.find(fLast.str());

					morphInterface.mappingDAP(fFirst.str(), it->second, fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 14:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:92:4: 'segmentation' '(' 'MSLS' ',' ID ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(42, &FOLLOW_42_in_operatorsGG766);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG768);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(22, &FOLLOW_22_in_operatorsGG770);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG772);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =	
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG774);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG776);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG778);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG780);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"SEGMENTATION - MSLS"<<endl;

					cout<<"MAPPING - DAP"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID2->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << ID1->getText()[0]-96;
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					//fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					std::map<string,std::vector<double>>::iterator it;
					it=vect.find(fLast.str());

					morphInterface.segmentationMSLS(fFirst.str(), it->second, fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 15:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:93:4: 'segmentation' '(' 'MSLS' ',' ID ',' ID ')'
        	    {
 					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(42, &FOLLOW_42_in_operatorsGG785);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG787);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(22, &FOLLOW_22_in_operatorsGG789);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG791);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG793);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG795);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG797);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG799);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"SEGMENTATION - MSLS"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					//morphInterface.segmentationMSLS(fFirst.str(), fLast.str(), fNew.str());
					cout<<"---END"<<endl;


        	    }
        	    break;
        	case 16:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:94:4: 'segmentation' '(' 'WATHERSHADE' ',' ID ')'
        	    {
					const CommonTokenType* ID1;

					this->matchToken(42, &FOLLOW_42_in_operatorsGG804);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG806);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(24, &FOLLOW_24_in_operatorsGG808);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG810);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG813);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG815);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"SEGMENTATION - WATHERSHADE"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".wtf";
					cout<<"-->  "<<fNew.str()<<endl;

					morphInterface.segmentationWATHERSHADE(fFirst.str(), fNew.str());
					cout<<"---END"<<endl;
        	    }
        	    break;
        	case 17:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:95:4: 'segmentation' '(' 'WATHERSHADE' ',' marker ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

        	         this->matchToken(42, &FOLLOW_42_in_operatorsGG820);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsGG822);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(24, &FOLLOW_24_in_operatorsGG824);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG826);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
					cout<<"SEGMENTATION - WATHERSHADE MARKER 1"<<endl;

/*

        	        this->followPush(FOLLOW_marker_in_operatorsGG828);
        	        marker();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
*/
// CHANGE
					cout<<"SEGMENTATION - WATHERSHADE MARKER 2"<<endl;

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG833);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

// CHANGE

        	         this->matchToken(12, &FOLLOW_12_in_operatorsGG831);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG833);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsGG835);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"SEGMENTATION - WATHERSHADE MARKER"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;
					
					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".wtf";
					cout<<"-->  "<<fNew.str()<<endl;

//					if (marker1!=NULL)
//					{
						stringstream m1;//create a stringstream
						m1 << "./";
						m1 << outputFigureName;
						m1 << ID2->getText()[0]-96;
						//m1 << marker1->getText()[0]-96;
						m1 << ".bmp";
						cout<<"<--  "<<m1.str()<<endl;

						morphInterface.segmentationWATHERSHADE(m1.str(), fFirst.str(), fNew.str());
//					}
/*					else if (marker2 != NULL)
					{
						stringstream nss;//create a stringstream
						nss << marker2->getText();
						int number; 
						istringstream(nss.str()) >> number;
						cout<<"<--  "<<number<<endl;

						morphInterface.segmentationWATHERSHADE(number, fFirst.str(), fNew.str());
					}
*/
					cout<<"---END"<<endl;

					marker1 = NULL;
					marker2 = NULL;

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGGEx; /* Prevent compiler warnings */
    ruleoperatorsGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsGG */

/**
 * $ANTLR start interval
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:98:1: interval : DOUBLENUMBER ',' DOUBLENUMBER ;
 */
void
MorphDSL3Parser::interval()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:98:10: ( DOUBLENUMBER ',' DOUBLENUMBER )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:99:2: DOUBLENUMBER ',' DOUBLENUMBER
        {
			interval1 =
             this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval847);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(12, &FOLLOW_12_in_interval849);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

			interval2 = 
             this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_interval851);
            if  (this->hasException())
            {
                goto ruleintervalEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end interval */

/**
 * $ANTLR start operatorsBBGG
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:103:1: operatorsBBGG : ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE );
 */
void
MorphDSL3Parser::operatorsBBGG()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:104:2: ( operatorsBOX | operatorsRECONSTRUCTION | operatorsAREA | operatorsATTRIBUTE )

            ANTLR_UINT32 alt5;

            alt5=4;

            switch ( this->LA(1) )
            {
            case 32:
            	{
            		{
            		    int LA5_1 = this->LA(2);
            		    if ( (LA5_1 == 10))
            		    {
            		        {
            		            int LA5_7 = this->LA(3);
            		            if ( (LA5_7 == 16))
            		            {
            		                alt5=1;
            		            }
            		            else if ( (LA5_7 == 23))
            		            {
            		                alt5=2;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 5 );
            		                ex->set_state( 7 );


            		                goto ruleoperatorsBBGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 5 );
            		        ex->set_state( 1 );


            		        goto ruleoperatorsBBGGEx;

            		    }
            		}
            	}
                break;
            case 30:
            	{
            		{
            		    int LA5_2 = this->LA(2);
            		    if ( (LA5_2 == 10))
            		    {
            		        {
            		            int LA5_8 = this->LA(3);
            		            if ( (LA5_8 == 16))
            		            {
            		                alt5=1;
            		            }
            		            else if ( (LA5_8 == 23))
            		            {
            		                alt5=2;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return ;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 5 );
            		                ex->set_state( 8 );


            		                goto ruleoperatorsBBGGEx;

            		            }
            		        }
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 5 );
            		        ex->set_state( 2 );


            		        goto ruleoperatorsBBGGEx;

            		    }
            		}
            	}
                break;
            case 41:
            	{
            		{
            		    int LA5_3 = this->LA(2);
            		    if ( (LA5_3 == 10))
            		    {
            		        switch ( this->LA(3) )
            		        {
            		        case 16:
            		        	{
            		        		alt5=1;
            		        	}
            		            break;
            		        case 23:
            		        	{
            		        		alt5=2;
            		        	}
            		            break;
            		        case 14:
            		        	{
            		        		alt5=3;
            		        	}
            		            break;
            		        case ID:
            		        	{
            		        		alt5=4;
            		        	}
            		            break;

            		        default:
            		            if (this->get_backtracking()>0)
            		            {
            		                this->set_failedflag( true );
            		                return ;
            		            }

            		            ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		            ex->set_decisionNum( 5 );
            		            ex->set_state( 9 );


            		            goto ruleoperatorsBBGGEx;

            		        }

            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 5 );
            		        ex->set_state( 3 );


            		        goto ruleoperatorsBBGGEx;

            		    }
            		}
            	}
                break;
            case 26:
            	{
            		{
            		    int LA5_4 = this->LA(2);
            		    if ( (LA5_4 == 10))
            		    {
            		        switch ( this->LA(3) )
            		        {
            		        case 16:
            		        	{
            		        		alt5=1;
            		        	}
            		            break;
            		        case 23:
            		        	{
            		        		alt5=2;
            		        	}
            		            break;
            		        case 14:
            		        	{
            		        		alt5=3;
            		        	}
            		            break;
            		        case ID:
            		        	{
            		        		alt5=4;
            		        	}
            		            break;

            		        default:
            		            if (this->get_backtracking()>0)
            		            {
            		                this->set_failedflag( true );
            		                return ;
            		            }

            		            ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		            ex->set_decisionNum( 5 );
            		            ex->set_state( 10 );


            		            goto ruleoperatorsBBGGEx;

            		        }

            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 5 );
            		        ex->set_state( 4 );


            		        goto ruleoperatorsBBGGEx;

            		    }
            		}
            	}
                break;
            case EOF:
            	{
            		{
            		    int LA5_5 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred30_MorphDSL3>() )))
            		    {
            		        alt5=3;
            		    }
            		    else if ( (true))
            		    {
            		        alt5=4;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 5 );
            		        ex->set_state( 5 );


            		        goto ruleoperatorsBBGGEx;

            		    }
            		}
            	}
                break;
            case ID:
            	{
            		{
            		    int LA5_6 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred30_MorphDSL3>() )))
            		    {
            		        alt5=3;
            		    }
            		    else if ( (true))
            		    {
            		        alt5=4;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 5 );
            		        ex->set_state( 6 );


            		        goto ruleoperatorsBBGGEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruleoperatorsBBGGEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:104:4: operatorsBOX
        	    {
        	        this->followPush(FOLLOW_operatorsBOX_in_operatorsBBGG864);
        	        operatorsBOX();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:105:4: operatorsRECONSTRUCTION
        	    {
        	        this->followPush(FOLLOW_operatorsRECONSTRUCTION_in_operatorsBBGG870);
        	        operatorsRECONSTRUCTION();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:106:4: operatorsAREA
        	    {
        	        this->followPush(FOLLOW_operatorsAREA_in_operatorsBBGG876);
        	        operatorsAREA();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:107:4: operatorsATTRIBUTE
        	    {
        	        this->followPush(FOLLOW_operatorsATTRIBUTE_in_operatorsBBGG882);
        	        operatorsATTRIBUTE();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBBGGEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBBGGEx; /* Prevent compiler warnings */
    ruleoperatorsBBGGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBBGG */

/**
 * $ANTLR start operatorsBOX
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:110:1: operatorsBOX : ( 'erode' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'dilate' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'open' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'close' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' );
 */
void
MorphDSL3Parser::operatorsBOX()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:111:2: ( 'erode' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'dilate' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'open' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'close' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' )

            ANTLR_UINT32 alt6;

            alt6=4;

            switch ( this->LA(1) )
            {
            case 32:
            	{
            		alt6=1;
            	}
                break;
            case 30:
            	{
            		alt6=2;
            	}
                break;
            case 41:
            	{
            		alt6=3;
            	}
                break;
            case 26:
            	{
            		alt6=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto ruleoperatorsBOXEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:111:3: 'erode' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(32, &FOLLOW_32_in_operatorsBOX893);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX896);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_operatorsBOX898);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX900);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX902);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX904);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBOX906);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX909);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX911);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"ERODEBOX: "<<endl;
				 
					stringstream nss;//create a stringstream
					nss << ID1->getText();
					int number; 
					istringstream(nss.str()) >> number;
					//cout<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << number;
					fLast << ".bmp";
					cout  <<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  "<<fNew.str()<<endl;

					//when 5 pics created
					 morphInterface.erodeBOX(number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:112:4: 'dilate' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')'
        	    {
 					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(30, &FOLLOW_30_in_operatorsBOX923);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX926);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_operatorsBOX928);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX930);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX932);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX934);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBOX936);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX939);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX941);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"DILATEBOX: "<<endl;
				 
					stringstream nss;//create a stringstream
					nss << ID1->getText();
					int number; 
					istringstream(nss.str()) >> number;
					//cout<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout  <<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  "<<fNew.str()<<endl;

					//when 5 pics created
					 morphInterface.dilateBOX(number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:113:4: 'open' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;


        	         this->matchToken(41, &FOLLOW_41_in_operatorsBOX953);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX957);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_operatorsBOX959);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX961);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX963);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX965);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBOX967);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


					ID2 = 
					this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX970);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX972);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

				cout<<"OPENBOX: "<<endl;
				 
				stringstream nss;//create a stringstream
				nss << ID1->getText();
				int number; 
				istringstream(nss.str()) >> number;
				//cout<<number<<endl;

				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << ID2->getText()[0]-96;
				fLast << ".bmp";
				cout  <<"<--  "<<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout <<"-->  "<<fNew.str()<<endl;

				//when 5 pics created
				 morphInterface.openBOX(number, fLast.str(), fNew.str());
                cout<<"---END"<<endl;

        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:114:4: 'close' '(' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					
					this->matchToken(26, &FOLLOW_26_in_operatorsBOX981);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX985);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_operatorsBOX987);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsBOX989);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsBOX991);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX993);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsBOX995);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsBOX998);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsBOX1000);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsBOXEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

				cout<<"CLOSEBOX"<<endl;

				stringstream nss;//create a stringstream
				nss << ID1->getText();
				int number; 
				istringstream(nss.str()) >> number;
				cout<<"<--  "<<number<<endl;

				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << ID2->getText()[0]-96;
				fLast << ".bmp";
				cout  << "<--  " <<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout << "-->  " <<fNew.str()<<endl;

				//when 5 pics created
				 morphInterface.closeBOX(number, fLast.str(), fNew.str());
                cout<<"---END"<<endl;

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBOXEx; /* Prevent compiler warnings */
    ruleoperatorsBOXEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBOX */

/**
 * $ANTLR start operatorsRECONSTRUCTION
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:117:1: operatorsRECONSTRUCTION : ( 'erode' '(' 'RECONSTRUCTION' ',' marker ',' ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' marker ',' ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' );
 */
void
MorphDSL3Parser::operatorsRECONSTRUCTION()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:118:2: ( 'erode' '(' 'RECONSTRUCTION' ',' marker ',' ID ')' | 'dilate' '(' 'RECONSTRUCTION' ',' marker ',' ID ')' | 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' | 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')' )

            ANTLR_UINT32 alt7;

            alt7=4;

            switch ( this->LA(1) )
            {
            case 32:
            	{
            		alt7=1;
            	}
                break;
            case 30:
            	{
            		alt7=2;
            	}
                break;
            case 41:
            	{
            		alt7=3;
            	}
                break;
            case 26:
            	{
            		alt7=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleoperatorsRECONSTRUCTIONEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:118:4: 'erode' '(' 'RECONSTRUCTION' ',' marker ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(32, &FOLLOW_32_in_operatorsRECONSTRUCTION1019);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsRECONSTRUCTION1022);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(23, &FOLLOW_23_in_operatorsRECONSTRUCTION1024);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1026);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

/*
        	        this->followPush(FOLLOW_marker_in_operatorsRECONSTRUCTION1028);
        	        marker();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
*/

// CHANGE
//					cout<<"ERODE - RECONSTRUCTION MARKER 2"<<endl;

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG833);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

// CHANGE

        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1030);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1033);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsRECONSTRUCTION1035);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"ERODE - RECONSTRUCTION MARKER"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;
					
					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					cout<<"::::::::::::"<<endl;
//					if (marker1!=NULL)
//					{
//					   cout<<"???"<<endl;
						stringstream m1;//create a stringstream
						m1 << "./";
						m1 << outputFigureName;
						//m1 << marker1->getText()[0]-96;
						m1 << ID2->getText()[0]-96;
						m1 << ".bmp";
						cout<<"<--  "<<m1.str()<<endl;

						morphInterface.erodeRECONSTRUCTION(m1.str(), fFirst.str(), fNew.str());
/*					}
					else if (marker2 != NULL)
					{
					cout<<"!!!"<<endl;
						stringstream nss;//create a stringstream
						nss << marker2->getText();
						int number; 
						istringstream(nss.str()) >> number;
						cout<<"<--  "<<number<<endl;

						morphInterface.erodeRECONSTRUCTION(number, fFirst.str(), fNew.str());
					}
*/
					cout<<"---END"<<endl;

					marker1 = NULL;
					marker2 = NULL;

        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:119:4: 'dilate' '(' 'RECONSTRUCTION' ',' marker ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(30, &FOLLOW_30_in_operatorsRECONSTRUCTION1047);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsRECONSTRUCTION1050);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(23, &FOLLOW_23_in_operatorsRECONSTRUCTION1052);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1054);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

/*
        	        this->followPush(FOLLOW_marker_in_operatorsRECONSTRUCTION1056);
        	        marker();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }
*/
// CHANGE
//					cout<<"DILATE - RECONSTRUCTION MARKER 2"<<endl;

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsGG833);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

// CHANGE


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1058);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1061);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsRECONSTRUCTION1063);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"DILATE - RECONSTRUCTION MARKER"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << "./";
					fFirst << outputFigureName;
					fFirst << ID1->getText()[0]-96;
					fFirst << ".bmp";
					cout<<"<--  "<<fFirst.str()<<endl;
					
					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

//					if (marker1!=NULL)
//					{
						stringstream m1;//create a stringstream
						m1 << "./";
						m1 << outputFigureName;
						//m1 << marker1->getText()[0]-96;
						m1 << ID2->getText()[0]-96;
						m1 << ".bmp";
						cout<<"<--  "<<m1.str()<<endl;

						morphInterface.dilateRECONSTRUCTION(m1.str(), fFirst.str(), fNew.str());
//					}
/*					else if (marker2 != NULL)
					{
						stringstream nss;//create a stringstream
						nss << marker2->getText();
						int number; 
						istringstream(nss.str()) >> number;
						cout<<"<--  "<<number<<endl;

						morphInterface.dilateRECONSTRUCTION(number, fFirst.str(), fNew.str());
					}
*/
					cout<<"---END"<<endl;

					marker1 = NULL;
					marker2 = NULL;
        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:120:4: 'open' '(' 'RECONSTRUCTION' ',' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					 this->matchToken(41, &FOLLOW_41_in_operatorsRECONSTRUCTION1075);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsRECONSTRUCTION1079);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(23, &FOLLOW_23_in_operatorsRECONSTRUCTION1081);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1083);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_operatorsRECONSTRUCTION1086);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsRECONSTRUCTION1088);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1090);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsRECONSTRUCTION1092);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1094);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1096);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsRECONSTRUCTION1098);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"OPEN RECONSTRUCTION BOX"<<endl;

					stringstream nss;//create a stringstream
					nss << ID1->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.openRECONSTRUCTION_BOX(number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:121:4: 'close' '(' 'RECONSTRUCTION' ',' 'BOX' '(' DOUBLENUMBER ')' ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(26, &FOLLOW_26_in_operatorsRECONSTRUCTION1110);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsRECONSTRUCTION1114);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(23, &FOLLOW_23_in_operatorsRECONSTRUCTION1116);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1118);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_operatorsRECONSTRUCTION1121);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsRECONSTRUCTION1123);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsRECONSTRUCTION1125);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsRECONSTRUCTION1127);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsRECONSTRUCTION1129);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsRECONSTRUCTION1132);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsRECONSTRUCTION1134);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsRECONSTRUCTIONEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"CLOSE RECONSTRUCTION BOX"<<endl;

					stringstream nss;//create a stringstream
					nss << ID1->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.closeRECONSTRUCTION_BOX(number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsRECONSTRUCTIONEx; /* Prevent compiler warnings */
    ruleoperatorsRECONSTRUCTIONEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsRECONSTRUCTION */

/**
 * $ANTLR start operatorsAREA
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:124:1: operatorsAREA : (| 'open' '(' 'AREA' ',' DOUBLENUMBER ',' ID ')' | 'close' '(' 'AREA' ',' DOUBLENUMBER ',' ID ')' );
 */
void
MorphDSL3Parser::operatorsAREA()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:125:2: (| 'open' '(' 'AREA' ',' DOUBLENUMBER ',' ID ')' | 'close' '(' 'AREA' ',' DOUBLENUMBER ',' ID ')' )

            ANTLR_UINT32 alt8;

            alt8=3;

            switch ( this->LA(1) )
            {
            case EOF:
            case ID:
            	{
            		alt8=1;
            	}
                break;
            case 41:
            	{
            		alt8=2;
            	}
                break;
            case 26:
            	{
            		alt8=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleoperatorsAREAEx;

            }

            switch (alt8)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:126:2: 
        	    {
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:126:4: 'open' '(' 'AREA' ',' DOUBLENUMBER ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(41, &FOLLOW_41_in_operatorsAREA1157);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsAREA1161);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(14, &FOLLOW_14_in_operatorsAREA1163);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsAREA1165);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 = 
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1167);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsAREA1169);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 = 
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1172);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsAREA1174);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

				cout<<"OPENAREA"<<endl;

				stringstream nss;//create a stringstream
				nss << ID1->getText();
				int number; 
				istringstream(nss.str()) >> number;
				cout<<"<--  "<<number<<endl;

				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << ID2->getText()[0]-96;
				fLast << ".bmp";
				cout<<"<--  "<<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout <<"-->  " <<fNew.str()<<endl;

				//when 5 pics created
				// d = open(AREA, 250, c)
                // morphInterface.openAREA(250, "maribor1.bmp", "maribor2.bmp");
				morphInterface.openAREA(number, fLast.str(), fNew.str());
                cout<<"---END"<<endl;

        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:127:4: 'close' '(' 'AREA' ',' DOUBLENUMBER ',' ID ')'
        	    {
					printf("INSIDE CLOSEAREA!\n");
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;

					this->matchToken(26, &FOLLOW_26_in_operatorsAREA1185);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsAREA1189);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(14, &FOLLOW_14_in_operatorsAREA1191);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsAREA1193);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsAREA1195);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsAREA1197);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsAREA1200);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsAREA1202);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsAREAEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"CLOSEAREA"<<endl;

					stringstream nss;//create a stringstream
					nss << ID1->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID2->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout <<"-->  " <<fNew.str()<<endl;

					morphInterface.closeAREA(number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsAREAEx; /* Prevent compiler warnings */
    ruleoperatorsAREAEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsAREA */

/**
 * $ANTLR start operatorsATTRIBUTE
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:130:1: operatorsATTRIBUTE : (| 'open' '(' ID ',' DOUBLENUMBER ',' ID ')' | 'close' '(' ID ',' DOUBLENUMBER ',' ID ')' );
 */
void
MorphDSL3Parser::operatorsATTRIBUTE()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:131:2: (| 'open' '(' ID ',' DOUBLENUMBER ',' ID ')' | 'close' '(' ID ',' DOUBLENUMBER ',' ID ')' )

            ANTLR_UINT32 alt9;

            alt9=3;

            switch ( this->LA(1) )
            {
            case EOF:
            case ID:
            	{
            		alt9=1;
            	}
                break;
            case 41:
            	{
            		alt9=2;
            	}
                break;
            case 26:
            	{
            		alt9=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< MorphDSL3ParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleoperatorsATTRIBUTEEx;

            }

            switch (alt9)
            {
        	case 1:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:132:2: 
        	    {
        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:132:4: 'open' '(' ID ',' DOUBLENUMBER ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;
					const CommonTokenType* ID3;

 					 this->matchToken(41, &FOLLOW_41_in_operatorsATTRIBUTE1224);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsATTRIBUTE1228);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1230);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsATTRIBUTE1232);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1235);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsATTRIBUTE1238);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID3 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1240);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsATTRIBUTE1242);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"OPEN - ATTRIBUTE"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << ID1->getText();
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream nss;//create a stringstream
					nss << ID2->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID3->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					//when 5 pics created
					morphInterface.open(fFirst.str(), number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:133:4: 'close' '(' ID ',' DOUBLENUMBER ',' ID ')'
        	    {
					const CommonTokenType* ID1;
					const CommonTokenType* ID2;
					const CommonTokenType* ID3;

					 this->matchToken(26, &FOLLOW_26_in_operatorsATTRIBUTE1254);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(10, &FOLLOW_10_in_operatorsATTRIBUTE1258);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID1 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1260);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsATTRIBUTE1262);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID2 =
        	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsATTRIBUTE1265);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(12, &FOLLOW_12_in_operatorsATTRIBUTE1268);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					ID3 =
        	         this->matchToken(ID, &FOLLOW_ID_in_operatorsATTRIBUTE1271);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(11, &FOLLOW_11_in_operatorsATTRIBUTE1273);
        	        if  (this->hasException())
        	        {
        	            goto ruleoperatorsATTRIBUTEEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }

					cout<<"CLOSE - ATTRIBUTE"<<endl;

					stringstream fFirst;//create a stringstream
					fFirst << ID1->getText();
					cout<<"<--  "<<fFirst.str()<<endl;

					stringstream nss;//create a stringstream
					nss << ID2->getText();
					int number; 
					istringstream(nss.str()) >> number;
					cout<<"<--  "<<number<<endl;

					stringstream fLast;//create a stringstream
					fLast << "./";
					fLast << outputFigureName;
					fLast << ID3->getText()[0]-96;
					fLast << ".bmp";
					cout<<"<--  "<<fLast.str()<<endl;

					stringstream fNew;//create a stringstream
					fNew << "./";
					fNew << outputFigureName;
					fNew << currentFigure->getText()[0]-96;
					fNew << ".bmp";
					cout<<"-->  "<<fNew.str()<<endl;

					//when 5 pics created
					morphInterface.close(fFirst.str(), number, fLast.str(), fNew.str());
					cout<<"---END"<<endl;

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsATTRIBUTEEx; /* Prevent compiler warnings */
    ruleoperatorsATTRIBUTEEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsATTRIBUTE */

/**
 * $ANTLR start operatorsBG
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:136:1: operatorsBG : 'distanceTransform' '(' ID ')' ;
 */
void
MorphDSL3Parser::operatorsBG()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:137:2: ( 'distanceTransform' '(' ID ')' )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:137:4: 'distanceTransform' '(' ID ')'
        {
			const CommonTokenType* ID1;

			 this->matchToken(31, &FOLLOW_31_in_operatorsBG1291);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(10, &FOLLOW_10_in_operatorsBG1294);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

			ID1 =
             this->matchToken(ID, &FOLLOW_ID_in_operatorsBG1296);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(11, &FOLLOW_11_in_operatorsBG1298);
            if  (this->hasException())
            {
                goto ruleoperatorsBGEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

			cout<<"DISTANCE TRANSFORM"<<endl;


			stringstream fLast;//create a stringstream
			fLast << "./";
			fLast << outputFigureName;
			fLast << ID1->getText()[0]-96;
			fLast << ".bmp";
			cout<<"<--  "<<fLast.str()<<endl;

			stringstream fNew;//create a stringstream
			fNew << "./";
			fNew << outputFigureName;
			fNew << currentFigure->getText()[0]-96;
			fNew << ".bmp";
			cout <<"-->  " <<fNew.str()<<endl;

			morphInterface.distanceTransform(fLast.str(), fNew.str());
			cout<<"---END"<<endl;

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsBGEx; /* Prevent compiler warnings */
    ruleoperatorsBGEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end operatorsBG */

/**
 * $ANTLR start operatorsGB
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:140:1: operatorsGB : 'treshold' '(' DOUBLENUMBER ',' ID ')' ;
 */
void
MorphDSL3Parser::operatorsGB()
{
    MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

const CommonTokenType*    ID1;
const CommonTokenType*    ID2;

/* Initialize rule variables
 */

ID1       = NULL;
ID2       = NULL;
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:141:2: ( 'treshold' '(' DOUBLENUMBER ',' ID ')' )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:141:4: 'treshold' '(' DOUBLENUMBER ',' ID ')'
        {
             this->matchToken(44, &FOLLOW_44_in_operatorsGB1317);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(10, &FOLLOW_10_in_operatorsGB1320);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

			ID1 = 
             this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_operatorsGB1322);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(12, &FOLLOW_12_in_operatorsGB1324);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            ID2 =  this->matchToken(ID, &FOLLOW_ID_in_operatorsGB1326);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(11, &FOLLOW_11_in_operatorsGB1328);
            if  (this->hasException())
            {
                goto ruleoperatorsGBEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

            if ( this->get_backtracking()==0 )
            {

				//cout<<convertLetterToNumber(ID2->getText()[0])<<endl;
				cout<<"TRESHOLDING"<<endl;
				
				stringstream nss;//create a stringstream
				nss << ID1->getText();
				int number; 
				istringstream(nss.str()) >> number;
				cout<<"<--  "<<number<<endl;
				
				stringstream fLast;//create a stringstream
				fLast << "./";
				fLast << outputFigureName;
				fLast << ID2->getText()[0]-96;
				fLast << ".bmp";
				cout<<"<--  "<<fLast.str()<<endl;

				stringstream fNew;//create a stringstream
				fNew << "./";
				fNew << outputFigureName;
				fNew << currentFigure->getText()[0]-96;
				fNew << ".bmp";
				cout<<"-->  "<<fNew.str()<<endl;

                cout<<"---END"<<endl;

				//when 5 pics created
				morphInterface.treshold(number, fLast.str(), fNew.str());
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoperatorsGBEx; /* Prevent compiler warnings */
    ruleoperatorsGBEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}


string convertLetterToNumber(char letter)
{
   stringstream ss;//create a stringstream
   ss << "./fig";
   ss << letter-96;//add number to the stream
   ss << ".bmp";
   return ss.str();//return a string with the contents of the stream
}


/* $ANTLR end operatorsGB */

/**
 * $ANTLR start marker
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:144:1: marker : ( ID | DOUBLENUMBER ) ;
 */
void
MorphDSL3Parser::marker()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:144:8: ( ( ID | DOUBLENUMBER ) )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:
        {
            if ( ((this->LA(1) >= DOUBLENUMBER) && (this->LA(1) <= ID)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< MorphDSL3ParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulemarkerEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemarkerEx; /* Prevent compiler warnings */
    rulemarkerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end marker */

/**
 * $ANTLR start vector
 * C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:148:1: vector : ( DOUBLENUMBER ( ',' ) )* DOUBLENUMBER ;
 */
void
MorphDSL3Parser::vector()
{
        MorphDSL3ParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

	const CommonTokenType*    ID1;
	const CommonTokenType*    ID2;
	std::vector<double> tmp;


    /* Initialize rule variables
     */


 
    {
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:148:8: ( ( DOUBLENUMBER ( ',' ) )* DOUBLENUMBER )
        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:149:2: ( DOUBLENUMBER ( ',' ) )* DOUBLENUMBER
        {
            // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:149:2: ( DOUBLENUMBER ( ',' ) )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = this->LA(1);
                    if ( (LA10_0 == DOUBLENUMBER))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA10_1 = this->LA(2);
                            if ( (LA10_1 == 12))
                            {
                                alt10=1;
                            }

                        }
                    }

                }
                switch (alt10)
                {
            	case 1:
            	    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:149:3: DOUBLENUMBER ( ',' )
            	    {
						ID1 =
            	         this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1367);
            	        if  (this->hasException())
            	        {
            	            goto rulevectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


						stringstream nss;//create a stringstream
						nss << ID1->getText();
						double number; //= atof(nss.str());
						nss >> number;
//						cout<<"<--  "<<number<<endl;
						tmp.push_back(number);

            	        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:149:16: ( ',' )
            	        // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:149:17: ','
            	        {
            	             this->matchToken(12, &FOLLOW_12_in_vector1370);
            	            if  (this->hasException())
            	            {
            	                goto rulevectorEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */

			ID2 = 
             this->matchToken(DOUBLENUMBER, &FOLLOW_DOUBLENUMBER_in_vector1376);
            if  (this->hasException())
            {
                goto rulevectorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

			stringstream nss;//create a stringstream
			nss << ID2->getText();
			double number; //= atof(nss.str());
			nss >> number;
//			cout<<"<--  "<<number<<endl;
			tmp.push_back(number);

        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }


	stringstream fNew;//create a stringstream
//	cout<< "VECTOR: ";
	fNew << currentFigure->getText()[0]-96;
//	cout<< currentFigure->getText();
//	cout<< " ";
//	cout<< fNew.str();
//	cout<< endl;
    std::map<string, std::vector<double>>::iterator it = vect.begin();
    vect.insert (it, std::pair<string, std::vector<double>>(fNew.str(), tmp));
    return ;
}
/* $ANTLR end vector */

// $ANTLR start synpred25_MorphDSL3
void MorphDSL3Parser::msynpred25_MorphDSL3_fragment(  )
{
    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:92:4: ( 'segmentation' '(' 'MSLS' ',' ID ',' ID ')' )
    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:92:4: 'segmentation' '(' 'MSLS' ',' ID ',' ID ')'
    {
         this->matchToken(42, &FOLLOW_42_in_synpred25_MorphDSL3766);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(10, &FOLLOW_10_in_synpred25_MorphDSL3768);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(22, &FOLLOW_22_in_synpred25_MorphDSL3770);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(12, &FOLLOW_12_in_synpred25_MorphDSL3772);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(ID, &FOLLOW_ID_in_synpred25_MorphDSL3774);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(12, &FOLLOW_12_in_synpred25_MorphDSL3776);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(ID, &FOLLOW_ID_in_synpred25_MorphDSL3778);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(11, &FOLLOW_11_in_synpred25_MorphDSL3780);
        if  (this->hasException())
        {
            goto rulesynpred25_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred25_MorphDSL3Ex; /* Prevent compiler warnings */
rulesynpred25_MorphDSL3Ex: ;

}
// $ANTLR end synpred25_MorphDSL3

// $ANTLR start synpred26_MorphDSL3
void MorphDSL3Parser::msynpred26_MorphDSL3_fragment(  )
{
    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:93:4: ( 'segmentation' '(' 'MSLS' ',' ID ',' ID ')' )
    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:93:4: 'segmentation' '(' 'MSLS' ',' ID ',' ID ')'
    {
         this->matchToken(42, &FOLLOW_42_in_synpred26_MorphDSL3785);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(10, &FOLLOW_10_in_synpred26_MorphDSL3787);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(22, &FOLLOW_22_in_synpred26_MorphDSL3789);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(12, &FOLLOW_12_in_synpred26_MorphDSL3791);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(ID, &FOLLOW_ID_in_synpred26_MorphDSL3793);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(12, &FOLLOW_12_in_synpred26_MorphDSL3795);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(ID, &FOLLOW_ID_in_synpred26_MorphDSL3797);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(11, &FOLLOW_11_in_synpred26_MorphDSL3799);
        if  (this->hasException())
        {
            goto rulesynpred26_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred26_MorphDSL3Ex; /* Prevent compiler warnings */
rulesynpred26_MorphDSL3Ex: ;

}
// $ANTLR end synpred26_MorphDSL3

// $ANTLR start synpred30_MorphDSL3
void MorphDSL3Parser::msynpred30_MorphDSL3_fragment(  )
{
    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:106:4: ( operatorsAREA )
    // C:\\Users\\Tomaz\\Desktop\\Morph\\MorphDSL3.g:106:4: operatorsAREA
    {
        this->followPush(FOLLOW_operatorsAREA_in_synpred30_MorphDSL3876);
        operatorsAREA();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred30_MorphDSL3Ex;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred30_MorphDSL3Ex; /* Prevent compiler warnings */
rulesynpred30_MorphDSL3Ex: ;

}
// $ANTLR end synpred30_MorphDSL3
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool MorphDSL3Parser::msynpred( antlr3::ClassForwarder< synpred26_MorphDSL3 >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred26_MorphDSL3_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSL3Parser::msynpred( antlr3::ClassForwarder< synpred25_MorphDSL3 >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred25_MorphDSL3_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool MorphDSL3Parser::msynpred( antlr3::ClassForwarder< synpred30_MorphDSL3 >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred30_MorphDSL3_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
