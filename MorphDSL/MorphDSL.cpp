// ConsoleMorphAntlr.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
//#include "ANTLRCompiler/TLexer.hpp"
//#include "ANTLRCompiler/TParser.hpp"
#include "ANTLRCompiler/MorphDSL3Lexer.hpp"
#include "ANTLRCompiler/MorphDSL3Parser.hpp"
#include "MorphDSL.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// The one and only application object

CWinApp theApp;

using namespace std;


int
test_main(int argc, char *argv[])
{
/*    ANTLR_UINT8*	    fName;

    if (argc < 2 || argv[1] == NULL)
    {
		fName	=(ANTLR_UINT8*)"./input"; // Note in VS2005 debug, working directory must be configured
    }
    else
    {
		fName	= (ANTLR_UINT8*)argv[1];
    }

	using namespace User;

	TLexer::InputStreamType input(fName, ANTLR_ENC_8BIT);
	TLexer lxr(&input);	    // CLexerNew is generated by ANTLR
	TParser::TokenStreamType tstream(ANTLR_SIZE_HINT, lxr.get_tokSource() );
	TParser psr(&tstream);  // CParserNew is generated by ANTLR3


	//tstream.
	printf("HELLO!");
	psr.program();
*/

    ANTLR_UINT8*	    fName;

    if (argc < 2 || argv[1] == NULL)
    {
		printf("NO ARGUMENT!\n");
		fName	=(ANTLR_UINT8*)"./DSLPrograms/Morph4.dsl"; // Note in VS2005 debug, working directory must be configured
    }
    else
    {
		printf("USING ARGUMENT!\n");
		printf(argv[1]);
		fName	= (ANTLR_UINT8*)argv[1];
    }

	using namespace User;

	MorphDSL3Lexer::InputStreamType input(fName, ANTLR_ENC_8BIT);
	MorphDSL3Lexer lxr(&input);	    // CLexerNew is generated by ANTLR
	MorphDSL3Parser::TokenStreamType tstream(ANTLR_SIZE_HINT, lxr.get_tokSource() );
	MorphDSL3Parser psr(&tstream);  // CParserNew is generated by ANTLR3


	printf("INSIDE DSL!\n");
	psr.program();

	char ch = getch();
    return 0;
}


int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	int nRetCode = 0;

	HMODULE hModule = ::GetModuleHandle(NULL);

	if (hModule != NULL)
	{
		// initialize MFC and print and error on failure
		if (!AfxWinInit(hModule, NULL, ::GetCommandLine(), 0))
		{
			// TODO: change error code to suit your needs
			_tprintf(_T("Fatal Error: MFC initialization failed\n"));
			nRetCode = 1;
		}
		else
		{
			// TODO: code your application's behavior here.
			test_main(argc, argv);
		}
	}
	else
	{
		// TODO: change error code to suit your needs
		_tprintf(_T("Fatal Error: GetModuleHandle failed\n"));
		nRetCode = 1;
	}

	return nRetCode;
}
